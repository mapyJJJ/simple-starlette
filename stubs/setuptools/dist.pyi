from . import SetuptoolsDeprecationWarning
from typing import Any, Optional

class Distribution(_Distribution):
    def patch_missing_pkg_info(self, attrs: Any) -> None: ...
    package_data: Any = ...
    dist_files: Any = ...
    src_root: Any = ...
    dependency_links: Any = ...
    setup_requires: Any = ...
    def __init__(self, attrs: Optional[Any] = ...) -> None: ...
    def warn_dash_deprecation(self, opt: Any, section: Any): ...
    def make_option_lowercase(self, opt: Any, section: Any): ...
    def parse_config_files(self, filenames: Optional[Any] = ..., ignore_option_errors: bool = ...) -> None: ...
    def fetch_build_eggs(self, requires: Any): ...
    def finalize_options(self): ...
    def get_egg_cache_dir(self): ...
    def fetch_build_egg(self, req: Any): ...
    def get_command_class(self, command: Any): ...
    def print_commands(self): ...
    def get_command_list(self): ...
    def include(self, **attrs: Any) -> None: ...
    packages: Any = ...
    py_modules: Any = ...
    ext_modules: Any = ...
    def exclude_package(self, package: Any) -> None: ...
    def has_contents_for(self, package: Any): ...
    def exclude(self, **attrs: Any) -> None: ...
    def get_cmdline_options(self): ...
    def iter_distribution_names(self) -> None: ...
    def handle_display_options(self, option_order: Any): ...

class DistDeprecationWarning(SetuptoolsDeprecationWarning): ...
