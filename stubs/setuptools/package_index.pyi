import configparser
from pkg_resources import Environment
from typing import Any, Optional

def parse_bdist_wininst(name: Any): ...
def distros_for_url(url: Any, metadata: Optional[Any] = ...) -> None: ...
def interpret_distro_name(location: Any, basename: Any, metadata: Any, py_version: Optional[Any] = ..., precedence: Any = ..., platform: Optional[Any] = ...) -> None: ...

class ContentChecker:
    def feed(self, block: Any) -> None: ...
    def is_valid(self): ...
    def report(self, reporter: Any, template: Any) -> None: ...

class HashChecker(ContentChecker):
    pattern: Any = ...
    hash_name: Any = ...
    hash: Any = ...
    expected: Any = ...
    def __init__(self, hash_name: Any, expected: Any) -> None: ...
    @classmethod
    def from_url(cls, url: Any): ...
    def feed(self, block: Any) -> None: ...
    def is_valid(self): ...
    def report(self, reporter: Any, template: Any): ...

class PackageIndex(Environment):
    index_url: Any = ...
    scanned_urls: Any = ...
    fetched_urls: Any = ...
    package_pages: Any = ...
    allows: Any = ...
    to_scan: Any = ...
    opener: Any = ...
    def __init__(self, index_url: str = ..., hosts: Any = ..., ca_bundle: Optional[Any] = ..., verify_ssl: bool = ..., *args: Any, **kw: Any) -> None: ...
    def add(self, dist: Any): ...
    def process_url(self, url: Any, retrieve: bool = ...) -> None: ...
    def process_filename(self, fn: Any, nested: bool = ...) -> None: ...
    def url_ok(self, url: Any, fatal: bool = ...): ...
    def scan_egg_links(self, search_path: Any) -> None: ...
    def scan_egg_link(self, path: Any, entry: Any) -> None: ...
    def process_index(self, url: Any, page: Any): ...
    def need_version_info(self, url: Any) -> None: ...
    def scan_all(self, msg: Optional[Any] = ..., *args: Any) -> None: ...
    def find_packages(self, requirement: Any) -> None: ...
    def obtain(self, requirement: Any, installer: Optional[Any] = ...): ...
    def check_hash(self, checker: Any, filename: Any, tfp: Any) -> None: ...
    def add_find_links(self, urls: Any) -> None: ...
    def prescan(self) -> None: ...
    def not_found_in_index(self, requirement: Any) -> None: ...
    def download(self, spec: Any, tmpdir: Any): ...
    def fetch_distribution(self, requirement: Any, tmpdir: Any, force_scan: bool = ..., source: bool = ..., develop_ok: bool = ..., local_index: Optional[Any] = ...): ...
    def fetch(self, requirement: Any, tmpdir: Any, force_scan: bool = ..., source: bool = ...): ...
    def gen_setup(self, filename: Any, fragment: Any, tmpdir: Any): ...
    dl_blocksize: int = ...
    def reporthook(self, url: Any, filename: Any, blocknum: Any, blksize: Any, size: Any) -> None: ...
    def open_url(self, url: Any, warning: Optional[Any] = ...): ...
    def scan_url(self, url: Any) -> None: ...
    def debug(self, msg: Any, *args: Any) -> None: ...
    def info(self, msg: Any, *args: Any) -> None: ...
    def warn(self, msg: Any, *args: Any) -> None: ...

class Credential:
    username: Any = ...
    password: Any = ...
    def __init__(self, username: Any, password: Any) -> None: ...
    def __iter__(self) -> Any: ...

class PyPIConfig(configparser.RawConfigParser):
    def __init__(self) -> None: ...
    @property
    def creds_by_repository(self): ...
    def find_credential(self, url: Any): ...
