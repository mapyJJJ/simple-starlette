from typing import Any, Optional

class FileList:
    allfiles: Any = ...
    files: Any = ...
    def __init__(self, warn: Optional[Any] = ..., debug_print: Optional[Any] = ...) -> None: ...
    def set_allfiles(self, allfiles: Any) -> None: ...
    def findall(self, dir: Any = ...) -> None: ...
    def debug_print(self, msg: Any) -> None: ...
    def append(self, item: Any) -> None: ...
    def extend(self, items: Any) -> None: ...
    def sort(self) -> None: ...
    def remove_duplicates(self) -> None: ...
    def process_template_line(self, line: Any) -> None: ...
    def include_pattern(self, pattern: Any, anchor: int = ..., prefix: Optional[Any] = ..., is_regex: int = ...): ...
    def exclude_pattern(self, pattern: Any, anchor: int = ..., prefix: Optional[Any] = ..., is_regex: int = ...): ...

class _UniqueDirs(set):
    def __call__(self, walk_item: Any): ...
    @classmethod
    def filter(cls, items: Any): ...

def findall(dir: Any = ...): ...
def glob_to_re(pattern: Any): ...
def translate_pattern(pattern: Any, anchor: int = ..., prefix: Optional[Any] = ..., is_regex: int = ...): ...
