from distutils.core import Command
from typing import Any, Optional

LANG_EXT: Any

class config(Command):
    description: str = ...
    user_options: Any = ...
    compiler: Any = ...
    cc: Any = ...
    include_dirs: Any = ...
    libraries: Any = ...
    library_dirs: Any = ...
    noisy: int = ...
    dump_source: int = ...
    temp_files: Any = ...
    def initialize_options(self) -> None: ...
    def finalize_options(self) -> None: ...
    def run(self) -> None: ...
    def try_cpp(self, body: Optional[Any] = ..., headers: Optional[Any] = ..., include_dirs: Optional[Any] = ..., lang: str = ...): ...
    def search_cpp(self, pattern: Any, body: Optional[Any] = ..., headers: Optional[Any] = ..., include_dirs: Optional[Any] = ..., lang: str = ...): ...
    def try_compile(self, body: Any, headers: Optional[Any] = ..., include_dirs: Optional[Any] = ..., lang: str = ...): ...
    def try_link(self, body: Any, headers: Optional[Any] = ..., include_dirs: Optional[Any] = ..., libraries: Optional[Any] = ..., library_dirs: Optional[Any] = ..., lang: str = ...): ...
    def try_run(self, body: Any, headers: Optional[Any] = ..., include_dirs: Optional[Any] = ..., libraries: Optional[Any] = ..., library_dirs: Optional[Any] = ..., lang: str = ...): ...
    def check_func(self, func: Any, headers: Optional[Any] = ..., include_dirs: Optional[Any] = ..., libraries: Optional[Any] = ..., library_dirs: Optional[Any] = ..., decl: int = ..., call: int = ...): ...
    def check_lib(self, library: Any, library_dirs: Optional[Any] = ..., headers: Optional[Any] = ..., include_dirs: Optional[Any] = ..., other_libraries: Any = ...): ...
    def check_header(self, header: Any, include_dirs: Optional[Any] = ..., library_dirs: Optional[Any] = ..., lang: str = ...): ...

def dump_file(filename: Any, head: Optional[Any] = ...) -> None: ...
