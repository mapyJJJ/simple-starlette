from distutils.errors import *
from typing import Any, Optional

class CCompiler:
    compiler_type: Any = ...
    src_extensions: Any = ...
    obj_extension: Any = ...
    static_lib_extension: Any = ...
    shared_lib_extension: Any = ...
    static_lib_format: Any = ...
    shared_lib_format: Any = ...
    exe_extension: Any = ...
    language_map: Any = ...
    language_order: Any = ...
    dry_run: Any = ...
    force: Any = ...
    verbose: Any = ...
    output_dir: Any = ...
    macros: Any = ...
    include_dirs: Any = ...
    libraries: Any = ...
    library_dirs: Any = ...
    runtime_library_dirs: Any = ...
    objects: Any = ...
    def __init__(self, verbose: int = ..., dry_run: int = ..., force: int = ...) -> None: ...
    def set_executables(self, **kwargs: Any) -> None: ...
    def set_executable(self, key: Any, value: Any) -> None: ...
    def define_macro(self, name: Any, value: Optional[Any] = ...) -> None: ...
    def undefine_macro(self, name: Any) -> None: ...
    def add_include_dir(self, dir: Any) -> None: ...
    def set_include_dirs(self, dirs: Any) -> None: ...
    def add_library(self, libname: Any) -> None: ...
    def set_libraries(self, libnames: Any) -> None: ...
    def add_library_dir(self, dir: Any) -> None: ...
    def set_library_dirs(self, dirs: Any) -> None: ...
    def add_runtime_library_dir(self, dir: Any) -> None: ...
    def set_runtime_library_dirs(self, dirs: Any) -> None: ...
    def add_link_object(self, object: Any) -> None: ...
    def set_link_objects(self, objects: Any) -> None: ...
    def detect_language(self, sources: Any): ...
    def preprocess(self, source: Any, output_file: Optional[Any] = ..., macros: Optional[Any] = ..., include_dirs: Optional[Any] = ..., extra_preargs: Optional[Any] = ..., extra_postargs: Optional[Any] = ...) -> None: ...
    def compile(self, sources: Any, output_dir: Optional[Any] = ..., macros: Optional[Any] = ..., include_dirs: Optional[Any] = ..., debug: int = ..., extra_preargs: Optional[Any] = ..., extra_postargs: Optional[Any] = ..., depends: Optional[Any] = ...): ...
    def create_static_lib(self, objects: Any, output_libname: Any, output_dir: Optional[Any] = ..., debug: int = ..., target_lang: Optional[Any] = ...) -> None: ...
    SHARED_OBJECT: str = ...
    SHARED_LIBRARY: str = ...
    EXECUTABLE: str = ...
    def link(self, target_desc: Any, objects: Any, output_filename: Any, output_dir: Optional[Any] = ..., libraries: Optional[Any] = ..., library_dirs: Optional[Any] = ..., runtime_library_dirs: Optional[Any] = ..., export_symbols: Optional[Any] = ..., debug: int = ..., extra_preargs: Optional[Any] = ..., extra_postargs: Optional[Any] = ..., build_temp: Optional[Any] = ..., target_lang: Optional[Any] = ...) -> None: ...
    def link_shared_lib(self, objects: Any, output_libname: Any, output_dir: Optional[Any] = ..., libraries: Optional[Any] = ..., library_dirs: Optional[Any] = ..., runtime_library_dirs: Optional[Any] = ..., export_symbols: Optional[Any] = ..., debug: int = ..., extra_preargs: Optional[Any] = ..., extra_postargs: Optional[Any] = ..., build_temp: Optional[Any] = ..., target_lang: Optional[Any] = ...) -> None: ...
    def link_shared_object(self, objects: Any, output_filename: Any, output_dir: Optional[Any] = ..., libraries: Optional[Any] = ..., library_dirs: Optional[Any] = ..., runtime_library_dirs: Optional[Any] = ..., export_symbols: Optional[Any] = ..., debug: int = ..., extra_preargs: Optional[Any] = ..., extra_postargs: Optional[Any] = ..., build_temp: Optional[Any] = ..., target_lang: Optional[Any] = ...) -> None: ...
    def link_executable(self, objects: Any, output_progname: Any, output_dir: Optional[Any] = ..., libraries: Optional[Any] = ..., library_dirs: Optional[Any] = ..., runtime_library_dirs: Optional[Any] = ..., debug: int = ..., extra_preargs: Optional[Any] = ..., extra_postargs: Optional[Any] = ..., target_lang: Optional[Any] = ...) -> None: ...
    def library_dir_option(self, dir: Any) -> None: ...
    def runtime_library_dir_option(self, dir: Any) -> None: ...
    def library_option(self, lib: Any) -> None: ...
    def has_function(self, funcname: Any, includes: Optional[Any] = ..., include_dirs: Optional[Any] = ..., libraries: Optional[Any] = ..., library_dirs: Optional[Any] = ...): ...
    def find_library_file(self, dirs: Any, lib: Any, debug: int = ...) -> None: ...
    def object_filenames(self, source_filenames: Any, strip_dir: int = ..., output_dir: str = ...): ...
    def shared_object_filename(self, basename: Any, strip_dir: int = ..., output_dir: str = ...): ...
    def executable_filename(self, basename: Any, strip_dir: int = ..., output_dir: str = ...): ...
    def library_filename(self, libname: Any, lib_type: str = ..., strip_dir: int = ..., output_dir: str = ...): ...
    def announce(self, msg: Any, level: int = ...) -> None: ...
    def debug_print(self, msg: Any) -> None: ...
    def warn(self, msg: Any) -> None: ...
    def execute(self, func: Any, args: Any, msg: Optional[Any] = ..., level: int = ...) -> None: ...
    def spawn(self, cmd: Any, **kwargs: Any) -> None: ...
    def move_file(self, src: Any, dst: Any): ...
    def mkpath(self, name: Any, mode: int = ...) -> None: ...

def get_default_compiler(osname: Optional[Any] = ..., platform: Optional[Any] = ...): ...

compiler_class: Any

def show_compilers() -> None: ...
def new_compiler(plat: Optional[Any] = ..., compiler: Optional[Any] = ..., verbose: int = ..., dry_run: int = ..., force: int = ...): ...
def gen_preprocess_options(macros: Any, include_dirs: Any): ...
def gen_lib_options(compiler: Any, library_dirs: Any, runtime_library_dirs: Any, libraries: Any): ...
