from distutils.ccompiler import CCompiler
from typing import Any, Optional

class BCPPCompiler(CCompiler):
    compiler_type: str = ...
    executables: Any = ...
    src_extensions: Any = ...
    obj_extension: str = ...
    static_lib_extension: str = ...
    shared_lib_extension: str = ...
    static_lib_format: str = ...
    shared_lib_format: str = ...
    exe_extension: str = ...
    cc: str = ...
    linker: str = ...
    lib: str = ...
    preprocess_options: Any = ...
    compile_options: Any = ...
    compile_options_debug: Any = ...
    ldflags_shared: Any = ...
    ldflags_shared_debug: Any = ...
    ldflags_static: Any = ...
    ldflags_exe: Any = ...
    ldflags_exe_debug: Any = ...
    def __init__(self, verbose: int = ..., dry_run: int = ..., force: int = ...) -> None: ...
    def compile(self, sources: Any, output_dir: Optional[Any] = ..., macros: Optional[Any] = ..., include_dirs: Optional[Any] = ..., debug: int = ..., extra_preargs: Optional[Any] = ..., extra_postargs: Optional[Any] = ..., depends: Optional[Any] = ...): ...
    def create_static_lib(self, objects: Any, output_libname: Any, output_dir: Optional[Any] = ..., debug: int = ..., target_lang: Optional[Any] = ...) -> None: ...
    def link(self, target_desc: Any, objects: Any, output_filename: Any, output_dir: Optional[Any] = ..., libraries: Optional[Any] = ..., library_dirs: Optional[Any] = ..., runtime_library_dirs: Optional[Any] = ..., export_symbols: Optional[Any] = ..., debug: int = ..., extra_preargs: Optional[Any] = ..., extra_postargs: Optional[Any] = ..., build_temp: Optional[Any] = ..., target_lang: Optional[Any] = ...) -> None: ...
    def find_library_file(self, dirs: Any, lib: Any, debug: int = ...): ...
    def object_filenames(self, source_filenames: Any, strip_dir: int = ..., output_dir: str = ...): ...
    def preprocess(self, source: Any, output_file: Optional[Any] = ..., macros: Optional[Any] = ..., include_dirs: Optional[Any] = ..., extra_preargs: Optional[Any] = ..., extra_postargs: Optional[Any] = ...) -> None: ...
