from typing import Any, Optional

class Command:
    sub_commands: Any = ...
    distribution: Any = ...
    verbose: Any = ...
    force: Any = ...
    help: int = ...
    finalized: int = ...
    def __init__(self, dist: Any) -> None: ...
    def __getattr__(self, attr: Any): ...
    def ensure_finalized(self) -> None: ...
    def initialize_options(self) -> None: ...
    def finalize_options(self) -> None: ...
    def dump_options(self, header: Optional[Any] = ..., indent: str = ...) -> None: ...
    def run(self) -> None: ...
    def announce(self, msg: Any, level: int = ...) -> None: ...
    def debug_print(self, msg: Any) -> None: ...
    def ensure_string(self, option: Any, default: Optional[Any] = ...) -> None: ...
    def ensure_string_list(self, option: Any) -> None: ...
    def ensure_filename(self, option: Any) -> None: ...
    def ensure_dirname(self, option: Any) -> None: ...
    def get_command_name(self): ...
    def set_undefined_options(self, src_cmd: Any, *option_pairs: Any) -> None: ...
    def get_finalized_command(self, command: Any, create: int = ...): ...
    def reinitialize_command(self, command: Any, reinit_subcommands: int = ...): ...
    def run_command(self, command: Any) -> None: ...
    def get_sub_commands(self): ...
    def warn(self, msg: Any) -> None: ...
    def execute(self, func: Any, args: Any, msg: Optional[Any] = ..., level: int = ...) -> None: ...
    def mkpath(self, name: Any, mode: int = ...) -> None: ...
    def copy_file(self, infile: Any, outfile: Any, preserve_mode: int = ..., preserve_times: int = ..., link: Optional[Any] = ..., level: int = ...): ...
    def copy_tree(self, infile: Any, outfile: Any, preserve_mode: int = ..., preserve_times: int = ..., preserve_symlinks: int = ..., level: int = ...): ...
    def move_file(self, src: Any, dst: Any, level: int = ...): ...
    def spawn(self, cmd: Any, search_path: int = ..., level: int = ...) -> None: ...
    def make_archive(self, base_name: Any, format: Any, root_dir: Optional[Any] = ..., base_dir: Optional[Any] = ..., owner: Optional[Any] = ..., group: Optional[Any] = ...): ...
    def make_file(self, infiles: Any, outfile: Any, func: Any, args: Any, exec_msg: Optional[Any] = ..., skip_msg: Optional[Any] = ..., level: int = ...) -> None: ...
