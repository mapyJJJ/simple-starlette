from pkg_resources import Environment
from setuptools import Command, SetuptoolsDeprecationWarning
from typing import Any, Optional

def samefile(p1: Any, p2: Any): ...

class easy_install(Command):
    description: str = ...
    command_consumes_arguments: bool = ...
    user_options: Any = ...
    boolean_options: Any = ...
    negative_opt: Any = ...
    create_index: Any = ...
    user: int = ...
    zip_ok: Any = ...
    install_dir: Any = ...
    index_url: Any = ...
    find_links: Any = ...
    build_directory: Any = ...
    args: Any = ...
    optimize: Any = ...
    upgrade: Any = ...
    editable: Any = ...
    root: Any = ...
    version: Any = ...
    install_purelib: Any = ...
    install_platlib: Any = ...
    install_headers: Any = ...
    install_lib: Any = ...
    install_scripts: Any = ...
    install_data: Any = ...
    install_base: Any = ...
    install_platbase: Any = ...
    install_userbase: Any = ...
    install_usersite: Any = ...
    no_find_links: Any = ...
    package_index: Any = ...
    pth_file: Any = ...
    site_dirs: Any = ...
    installed_projects: Any = ...
    verbose: Any = ...
    def initialize_options(self) -> None: ...
    def delete_blockers(self, blockers: Any) -> None: ...
    config_vars: Any = ...
    script_dir: Any = ...
    all_site_dirs: Any = ...
    shadow_path: Any = ...
    local_index: Any = ...
    outputs: Any = ...
    def finalize_options(self) -> None: ...
    def expand_basedirs(self) -> None: ...
    def expand_dirs(self) -> None: ...
    def run(self, show_deprecation: bool = ...) -> None: ...
    def pseudo_tempname(self): ...
    def warn_deprecated_options(self) -> None: ...
    def check_site_dir(self) -> None: ...
    def cant_write_to_target(self) -> None: ...
    def check_pth_processing(self): ...
    def install_egg_scripts(self, dist: Any) -> None: ...
    def add_output(self, path: Any) -> None: ...
    def not_editable(self, spec: Any) -> None: ...
    def check_editable(self, spec: Any) -> None: ...
    def easy_install(self, spec: Any, deps: bool = ...): ...
    def install_item(self, spec: Any, download: Any, tmpdir: Any, deps: Any, install_needed: bool = ...): ...
    def select_scheme(self, name: Any) -> None: ...
    def process_distribution(self, requirement: Any, dist: Any, deps: bool = ..., *info: Any) -> None: ...
    def should_unzip(self, dist: Any): ...
    def maybe_move(self, spec: Any, dist_filename: Any, setup_base: Any): ...
    def install_wrapper_scripts(self, dist: Any) -> None: ...
    def install_script(self, dist: Any, script_name: Any, script_text: Any, dev_path: Optional[Any] = ...) -> None: ...
    def write_script(self, script_name: Any, contents: Any, mode: str = ..., blockers: Any = ...) -> None: ...
    def install_eggs(self, spec: Any, dist_filename: Any, tmpdir: Any): ...
    def egg_distribution(self, egg_path: Any): ...
    def install_egg(self, egg_path: Any, tmpdir: Any): ...
    def install_exe(self, dist_filename: Any, tmpdir: Any): ...
    def exe_to_egg(self, dist_filename: Any, egg_tmp: Any): ...
    def install_wheel(self, wheel_path: Any, tmpdir: Any): ...
    def installation_report(self, req: Any, dist: Any, what: str = ...): ...
    def report_editable(self, spec: Any, setup_script: Any): ...
    def run_setup(self, setup_script: Any, setup_base: Any, args: Any) -> None: ...
    def build_and_install(self, setup_script: Any, setup_base: Any): ...
    def update_pth(self, dist: Any) -> None: ...
    def unpack_progress(self, src: Any, dst: Any): ...
    def unpack_and_compile(self, egg_path: Any, destination: Any): ...
    def byte_compile(self, to_compile: Any) -> None: ...
    def create_home_path(self) -> None: ...
    INSTALL_SCHEMES: Any = ...
    DEFAULT_SCHEME: Any = ...

def extract_wininst_cfg(dist_filename: Any): ...
def get_exe_prefixes(exe_filename: Any): ...

class PthDistributions(Environment):
    dirty: bool = ...
    filename: Any = ...
    sitedirs: Any = ...
    basedir: Any = ...
    def __init__(self, filename: Any, sitedirs: Any = ...) -> None: ...
    def save(self) -> None: ...
    def add(self, dist: Any) -> None: ...
    def remove(self, dist: Any) -> None: ...
    def make_relative(self, path: Any): ...

class RewritePthDistributions(PthDistributions):
    prelude: Any = ...
    postlude: Any = ...
PthDistributions = RewritePthDistributions

class CommandSpec(list):
    options: Any = ...
    split_args: Any = ...
    @classmethod
    def best(cls): ...
    @classmethod
    def from_param(cls, param: Any): ...
    @classmethod
    def from_environment(cls): ...
    @classmethod
    def from_string(cls, string: Any): ...
    def install_options(self, script_text: Any) -> None: ...
    def as_header(self): ...

class WindowsCommandSpec(CommandSpec):
    split_args: Any = ...

class ScriptWriter:
    template: Any = ...
    command_spec_class: Any = ...
    @classmethod
    def get_script_args(cls, dist: Any, executable: Optional[Any] = ..., wininst: bool = ...): ...
    @classmethod
    def get_script_header(cls, script_text: Any, executable: Optional[Any] = ..., wininst: bool = ...): ...
    @classmethod
    def get_args(cls, dist: Any, header: Optional[Any] = ...) -> None: ...
    @classmethod
    def get_writer(cls, force_windows: Any): ...
    @classmethod
    def best(cls): ...
    @classmethod
    def get_header(cls, script_text: str = ..., executable: Optional[Any] = ...): ...

class WindowsScriptWriter(ScriptWriter):
    command_spec_class: Any = ...
    @classmethod
    def get_writer(cls): ...
    @classmethod
    def best(cls): ...

class WindowsExecutableLauncherWriter(WindowsScriptWriter): ...
class EasyInstallDeprecationWarning(SetuptoolsDeprecationWarning): ...
