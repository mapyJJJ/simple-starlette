import typing as t
import typing as te
from . import exceptions as exceptions
from .datastructures import FileStorage as FileStorage, Headers as Headers, MultiDict as MultiDict
from .http import parse_options_header as parse_options_header
from .sansio.multipart import Data as Data, Epilogue as Epilogue, Field as Field, File as File, MultipartDecoder as MultipartDecoder, NeedData as NeedData
from .urls import url_decode_stream as url_decode_stream
from .wsgi import get_content_length as get_content_length, get_input_stream as get_input_stream
from _typeshed.wsgi import WSGIEnvironment as WSGIEnvironment
from typing import Any

t_parse_result: Any

class TStreamFactory:
    def __call__(self, total_content_length: t.Optional[int], content_type: t.Optional[str], filename: t.Optional[str], content_length: t.Optional[int]=...) -> t.IO[bytes]: ...

F: Any

def default_stream_factory(total_content_length: t.Optional[int], content_type: t.Optional[str], filename: t.Optional[str], content_length: t.Optional[int]=...) -> t.IO[bytes]: ...
def parse_form_data(environ: WSGIEnvironment, stream_factory: t.Optional[TStreamFactory]=..., charset: str=..., errors: str=..., max_form_memory_size: t.Optional[int]=..., max_content_length: t.Optional[int]=..., cls: t.Optional[t.Type[MultiDict]]=..., silent: bool=...) -> t_parse_result: ...
def exhaust_stream(f: F) -> F: ...

class FormDataParser:
    stream_factory: Any = ...
    charset: Any = ...
    errors: Any = ...
    max_form_memory_size: Any = ...
    max_content_length: Any = ...
    cls: Any = ...
    silent: Any = ...
    def __init__(self, stream_factory: t.Optional[TStreamFactory]=..., charset: str=..., errors: str=..., max_form_memory_size: t.Optional[int]=..., max_content_length: t.Optional[int]=..., cls: t.Optional[t.Type[MultiDict]]=..., silent: bool=...) -> None: ...
    def get_parse_func(self, mimetype: str, options: t.Dict[str, str]) -> t.Optional[t.Callable[[FormDataParser, t.IO[bytes], str, t.Optional[int], t.Dict[str, str]], t_parse_result]]: ...
    def parse_from_environ(self, environ: WSGIEnvironment) -> t_parse_result: ...
    def parse(self, stream: t.IO[bytes], mimetype: str, content_length: t.Optional[int], options: t.Optional[t.Dict[str, str]]=...) -> t_parse_result: ...
    parse_functions: t.Dict[str, t.Callable[[FormDataParser, t.IO[bytes], str, t.Optional[int], t.Dict[str, str]], t_parse_result]] = ...

def parse_multipart_headers(iterable: t.Iterable[bytes]) -> Headers: ...

class MultiPartParser:
    charset: Any = ...
    errors: Any = ...
    max_form_memory_size: Any = ...
    stream_factory: Any = ...
    cls: Any = ...
    buffer_size: Any = ...
    def __init__(self, stream_factory: t.Optional[TStreamFactory]=..., charset: str=..., errors: str=..., max_form_memory_size: t.Optional[int]=..., cls: t.Optional[t.Type[MultiDict]]=..., buffer_size: int=...) -> None: ...
    def fail(self, message: str) -> te.NoReturn: ...
    def get_part_charset(self, headers: Headers) -> str: ...
    def start_file_streaming(self, event: File, total_content_length: t.Optional[int]) -> t.IO[bytes]: ...
    def parse(self, stream: t.IO[bytes], boundary: bytes, content_length: t.Optional[int]) -> t.Tuple[MultiDict, MultiDict]: ...
