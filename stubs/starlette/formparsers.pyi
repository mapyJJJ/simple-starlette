import typing
from enum import Enum
from starlette.datastructures import FormData as FormData, Headers as Headers, UploadFile as UploadFile
from typing import Any

class FormMessage(Enum):
    FIELD_START: int = ...
    FIELD_NAME: int = ...
    FIELD_DATA: int = ...
    FIELD_END: int = ...
    END: int = ...

class MultiPartMessage(Enum):
    PART_BEGIN: int = ...
    PART_DATA: int = ...
    PART_END: int = ...
    HEADER_FIELD: int = ...
    HEADER_VALUE: int = ...
    HEADER_END: int = ...
    HEADERS_FINISHED: int = ...
    END: int = ...

class FormParser:
    headers: Any = ...
    stream: Any = ...
    messages: Any = ...
    def __init__(self, headers: Headers, stream: typing.AsyncGenerator[bytes, None]) -> None: ...
    def on_field_start(self) -> None: ...
    def on_field_name(self, data: bytes, start: int, end: int) -> None: ...
    def on_field_data(self, data: bytes, start: int, end: int) -> None: ...
    def on_field_end(self) -> None: ...
    def on_end(self) -> None: ...
    async def parse(self) -> FormData: ...

class MultiPartParser:
    headers: Any = ...
    stream: Any = ...
    messages: Any = ...
    def __init__(self, headers: Headers, stream: typing.AsyncGenerator[bytes, None]) -> None: ...
    def on_part_begin(self) -> None: ...
    def on_part_data(self, data: bytes, start: int, end: int) -> None: ...
    def on_part_end(self) -> None: ...
    def on_header_field(self, data: bytes, start: int, end: int) -> None: ...
    def on_header_value(self, data: bytes, start: int, end: int) -> None: ...
    def on_header_end(self) -> None: ...
    def on_headers_finished(self) -> None: ...
    def on_end(self) -> None: ...
    async def parse(self) -> FormData: ...
