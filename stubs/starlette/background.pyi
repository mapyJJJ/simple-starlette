import typing
from starlette.concurrency import run_in_threadpool as run_in_threadpool
from typing import Any

class BackgroundTask:
    func: Any = ...
    args: Any = ...
    kwargs: Any = ...
    is_async: Any = ...
    def __init__(self, func: typing.Callable, *args: typing.Any, **kwargs: typing.Any) -> None: ...
    async def __call__(self) -> None: ...

class BackgroundTasks(BackgroundTask):
    tasks: Any = ...
    def __init__(self, tasks: typing.Sequence[BackgroundTask]=...) -> None: ...
    def add_task(self, func: typing.Callable, *args: typing.Any, **kwargs: typing.Any) -> None: ...
    async def __call__(self) -> None: ...
