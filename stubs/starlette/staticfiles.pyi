import os
import typing
from starlette.datastructures import Headers as Headers, URL as URL
from starlette.exceptions import HTTPException as HTTPException
from starlette.responses import FileResponse as FileResponse, RedirectResponse as RedirectResponse, Response as Response
from starlette.types import Receive as Receive, Scope as Scope, Send as Send
from typing import Any

PathLike: Any

class NotModifiedResponse(Response):
    NOT_MODIFIED_HEADERS: Any = ...
    def __init__(self, headers: Headers) -> None: ...

class StaticFiles:
    directory: Any = ...
    packages: Any = ...
    all_directories: Any = ...
    html: Any = ...
    config_checked: bool = ...
    def __init__(self, *, directory: PathLike=..., packages: typing.List[str]=..., html: bool=..., check_dir: bool=...) -> None: ...
    def get_directories(self, directory: PathLike=..., packages: typing.List[str]=...) -> typing.List[PathLike]: ...
    async def __call__(self, scope: Scope, receive: Receive, send: Send) -> None: ...
    def get_path(self, scope: Scope) -> str: ...
    async def get_response(self, path: str, scope: Scope) -> Response: ...
    def lookup_path(self, path: str) -> typing.Tuple[str, typing.Optional[os.stat_result]]: ...
    def file_response(self, full_path: PathLike, stat_result: os.stat_result, scope: Scope, status_code: int=...) -> Response: ...
    async def check_config(self) -> None: ...
    def is_not_modified(self, response_headers: Headers, request_headers: Headers) -> bool: ...
