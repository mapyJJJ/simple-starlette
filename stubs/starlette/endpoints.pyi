import typing
from starlette import status as status
from starlette.concurrency import run_in_threadpool as run_in_threadpool
from starlette.exceptions import HTTPException as HTTPException
from starlette.requests import Request as Request
from starlette.responses import PlainTextResponse as PlainTextResponse, Response as Response
from starlette.types import Message as Message, Receive as Receive, Scope as Scope, Send as Send
from starlette.websockets import WebSocket as WebSocket
from typing import Any

class HTTPEndpoint:
    scope: Any = ...
    receive: Any = ...
    send: Any = ...
    def __init__(self, scope: Scope, receive: Receive, send: Send) -> None: ...
    def __await__(self) -> typing.Generator: ...
    async def dispatch(self) -> None: ...
    async def method_not_allowed(self, request: Request) -> Response: ...

class WebSocketEndpoint:
    encoding: typing.Optional[str] = ...
    scope: Any = ...
    receive: Any = ...
    send: Any = ...
    def __init__(self, scope: Scope, receive: Receive, send: Send) -> None: ...
    def __await__(self) -> typing.Generator: ...
    async def dispatch(self) -> None: ...
    async def decode(self, websocket: WebSocket, message: Message) -> typing.Any: ...
    async def on_connect(self, websocket: WebSocket) -> None: ...
    async def on_receive(self, websocket: WebSocket, data: typing.Any) -> None: ...
    async def on_disconnect(self, websocket: WebSocket, close_code: int) -> None: ...
