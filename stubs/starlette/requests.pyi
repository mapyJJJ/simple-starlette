import typing
from collections.abc import Mapping
from starlette.datastructures import Address as Address, FormData as FormData, Headers as Headers, QueryParams as QueryParams, State as State, URL as URL
from starlette.formparsers import FormParser as FormParser, MultiPartParser as MultiPartParser
from starlette.types import Message as Message, Receive as Receive, Scope as Scope, Send as Send
from typing import Any

SERVER_PUSH_HEADERS_TO_COPY: Any

def cookie_parser(cookie_string: str) -> typing.Dict[str, str]: ...

class ClientDisconnect(Exception): ...

class HTTPConnection(Mapping):
    scope: Any = ...
    def __init__(self, scope: Scope, receive: Receive=...) -> None: ...
    def __getitem__(self, key: str) -> typing.Any: ...
    def __iter__(self) -> typing.Iterator[str]: ...
    def __len__(self) -> int: ...
    __eq__: Any = ...
    __hash__: Any = ...
    @property
    def app(self) -> typing.Any: ...
    @property
    def url(self) -> URL: ...
    @property
    def base_url(self) -> URL: ...
    @property
    def headers(self) -> Headers: ...
    @property
    def query_params(self) -> QueryParams: ...
    @property
    def path_params(self) -> dict: ...
    @property
    def cookies(self) -> typing.Dict[str, str]: ...
    @property
    def client(self) -> Address: ...
    @property
    def session(self) -> dict: ...
    @property
    def auth(self) -> typing.Any: ...
    @property
    def user(self) -> typing.Any: ...
    @property
    def state(self) -> State: ...
    def url_for(self, name: str, **path_params: typing.Any) -> str: ...

async def empty_receive() -> Message: ...
async def empty_send(message: Message) -> None: ...

class Request(HTTPConnection):
    def __init__(self, scope: Scope, receive: Receive=..., send: Send=...) -> None: ...
    @property
    def method(self) -> str: ...
    @property
    def receive(self) -> Receive: ...
    async def stream(self) -> typing.AsyncGenerator[bytes, None]: ...
    async def body(self) -> bytes: ...
    async def json(self) -> typing.Any: ...
    async def form(self) -> FormData: ...
    async def close(self) -> None: ...
    async def is_disconnected(self) -> bool: ...
    async def send_push_promise(self, path: str) -> None: ...
