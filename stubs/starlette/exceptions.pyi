import typing
from starlette.concurrency import run_in_threadpool as run_in_threadpool
from starlette.requests import Request as Request
from starlette.responses import PlainTextResponse as PlainTextResponse, Response as Response
from starlette.types import ASGIApp as ASGIApp, Message as Message, Receive as Receive, Scope as Scope, Send as Send
from typing import Any

class HTTPException(Exception):
    status_code: Any = ...
    detail: Any = ...
    def __init__(self, status_code: int, detail: str=...) -> None: ...

class ExceptionMiddleware:
    app: Any = ...
    debug: Any = ...
    def __init__(self, app: ASGIApp, handlers: dict=..., debug: bool=...) -> None: ...
    def add_exception_handler(self, exc_class_or_status_code: typing.Union[int, typing.Type[Exception]], handler: typing.Callable) -> None: ...
    async def __call__(self, scope: Scope, receive: Receive, send: Send) -> None: ...
    def http_exception(self, request: Request, exc: HTTPException) -> Response: ...
