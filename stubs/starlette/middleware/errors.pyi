import inspect
import typing
from starlette.concurrency import run_in_threadpool as run_in_threadpool
from starlette.requests import Request as Request
from starlette.responses import HTMLResponse as HTMLResponse, PlainTextResponse as PlainTextResponse, Response as Response
from starlette.types import ASGIApp as ASGIApp, Message as Message, Receive as Receive, Scope as Scope, Send as Send
from typing import Any

STYLES: str
JS: str
TEMPLATE: str
FRAME_TEMPLATE: str
LINE: str
CENTER_LINE: str

class ServerErrorMiddleware:
    app: Any = ...
    handler: Any = ...
    debug: Any = ...
    def __init__(self, app: ASGIApp, handler: typing.Callable=..., debug: bool=...) -> None: ...
    async def __call__(self, scope: Scope, receive: Receive, send: Send) -> None: ...
    def format_line(self, index: int, line: str, frame_lineno: int, frame_index: int) -> str: ...
    def generate_frame_html(self, frame: inspect.FrameInfo, is_collapsed: bool) -> str: ...
    def generate_html(self, exc: Exception, limit: int=...) -> str: ...
    def generate_plain_text(self, exc: Exception) -> str: ...
    def debug_response(self, request: Request, exc: Exception) -> Response: ...
    def error_response(self, request: Request, exc: Exception) -> Response: ...
