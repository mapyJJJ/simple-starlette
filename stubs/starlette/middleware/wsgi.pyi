import typing
from starlette.types import Receive as Receive, Scope as Scope, Send as Send
from typing import Any

def build_environ(scope: Scope, body: bytes) -> dict: ...

class WSGIMiddleware:
    app: Any = ...
    def __init__(self, app: typing.Callable) -> None: ...
    async def __call__(self, scope: Scope, receive: Receive, send: Send) -> None: ...

class WSGIResponder:
    app: Any = ...
    scope: Any = ...
    status: Any = ...
    response_headers: Any = ...
    response_started: bool = ...
    exc_info: Any = ...
    def __init__(self, app: typing.Callable, scope: Scope) -> None: ...
    async def __call__(self, receive: Receive, send: Send) -> None: ...
    async def sender(self, send: Send) -> None: ...
    def start_response(self, status: str, response_headers: typing.List[typing.Tuple[str, str]], exc_info: typing.Any=...) -> None: ...
    def wsgi(self, environ: dict, start_response: typing.Callable) -> None: ...
