import typing
from starlette.datastructures import Headers as Headers, MutableHeaders as MutableHeaders
from starlette.responses import PlainTextResponse as PlainTextResponse, Response as Response
from starlette.types import ASGIApp as ASGIApp, Message as Message, Receive as Receive, Scope as Scope, Send as Send
from typing import Any

ALL_METHODS: Any
SAFELISTED_HEADERS: Any

class CORSMiddleware:
    app: Any = ...
    allow_origins: Any = ...
    allow_methods: Any = ...
    allow_headers: Any = ...
    allow_all_origins: Any = ...
    allow_all_headers: Any = ...
    preflight_explicit_allow_origin: Any = ...
    allow_origin_regex: Any = ...
    simple_headers: Any = ...
    preflight_headers: Any = ...
    def __init__(self, app: ASGIApp, allow_origins: typing.Sequence[str]=..., allow_methods: typing.Sequence[str]=..., allow_headers: typing.Sequence[str]=..., allow_credentials: bool=..., allow_origin_regex: str=..., expose_headers: typing.Sequence[str]=..., max_age: int=...) -> None: ...
    async def __call__(self, scope: Scope, receive: Receive, send: Send) -> None: ...
    def is_allowed_origin(self, origin: str) -> bool: ...
    def preflight_response(self, request_headers: Headers) -> Response: ...
    async def simple_response(self, scope: Scope, receive: Receive, send: Send, request_headers: Headers) -> None: ...
    async def send(self, message: Message, send: Send, request_headers: Headers) -> None: ...
    @staticmethod
    def allow_explicit_origin(headers: MutableHeaders, origin: str) -> None: ...
