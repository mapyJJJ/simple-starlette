from starlette.datastructures import Headers as Headers, MutableHeaders as MutableHeaders
from starlette.types import ASGIApp as ASGIApp, Message as Message, Receive as Receive, Scope as Scope, Send as Send
from typing import Any

class GZipMiddleware:
    app: Any = ...
    minimum_size: Any = ...
    compresslevel: Any = ...
    def __init__(self, app: ASGIApp, minimum_size: int=..., compresslevel: int=...) -> None: ...
    async def __call__(self, scope: Scope, receive: Receive, send: Send) -> None: ...

class GZipResponder:
    app: Any = ...
    minimum_size: Any = ...
    send: Any = ...
    initial_message: Any = ...
    started: bool = ...
    gzip_buffer: Any = ...
    gzip_file: Any = ...
    def __init__(self, app: ASGIApp, minimum_size: int, compresslevel: int=...) -> None: ...
    async def __call__(self, scope: Scope, receive: Receive, send: Send) -> None: ...
    async def send_with_gzip(self, message: Message) -> None: ...

async def unattached_send(message: Message) -> None: ...
