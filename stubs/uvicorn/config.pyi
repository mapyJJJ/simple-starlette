"""
This type stub file was generated by pyright.
"""

import asyncio
import os
import socket
import ssl
from asgiref.typing import ASGIApplication as ASGIApplication
from pathlib import Path
from typing import Any, Awaitable, Callable, Dict, List, Optional, Tuple, Type, Union
from typing_extensions import Literal

HTTPProtocolType: Any
WSProtocolType: Any
LifespanType: Any
LoopSetupType: Any
InterfaceType: Any
LOG_LEVELS: Dict[str, int]
HTTP_PROTOCOLS: Dict[HTTPProtocolType, str]
WS_PROTOCOLS: Dict[WSProtocolType, Optional[str]]
LIFESPAN: Dict[LifespanType, str]
LOOP_SETUPS: Dict[LoopSetupType, Optional[str]]
INTERFACES: List[InterfaceType]
SSL_PROTOCOL_VERSION: int
LOGGING_CONFIG: dict
logger: Any
def create_ssl_context(certfile: Union[str, os.PathLike], keyfile: Optional[Union[str, os.PathLike]], password: Optional[str], ssl_version: int, cert_reqs: int, ca_certs: Optional[Union[str, os.PathLike]], ciphers: Optional[str]) -> ssl.SSLContext:
    ...

def is_dir(path: Path) -> bool:
    ...

def resolve_reload_patterns(patterns_list: List[str], directories_list: List[str]) -> Tuple[List[str], List[Path]]:
    ...

class Config:
    app: Any = ...
    host: Any = ...
    port: Any = ...
    uds: Any = ...
    fd: Any = ...
    loop: Any = ...
    http: Any = ...
    ws: Any = ...
    ws_max_size: Any = ...
    ws_ping_interval: Any = ...
    ws_ping_timeout: Any = ...
    lifespan: Any = ...
    log_config: Any = ...
    log_level: Any = ...
    access_log: Any = ...
    use_colors: Any = ...
    interface: Any = ...
    debug: Any = ...
    reload: Any = ...
    reload_delay: Any = ...
    workers: Any = ...
    proxy_headers: Any = ...
    server_header: Any = ...
    date_header: Any = ...
    root_path: Any = ...
    limit_concurrency: Any = ...
    limit_max_requests: Any = ...
    backlog: Any = ...
    timeout_keep_alive: Any = ...
    timeout_notify: Any = ...
    callback_notify: Any = ...
    ssl_keyfile: Any = ...
    ssl_certfile: Any = ...
    ssl_keyfile_password: Any = ...
    ssl_version: Any = ...
    ssl_cert_reqs: Any = ...
    ssl_ca_certs: Any = ...
    ssl_ciphers: Any = ...
    headers: Any = ...
    encoded_headers: Any = ...
    factory: Any = ...
    loaded: bool = ...
    reload_dirs: Any = ...
    reload_dirs_excludes: Any = ...
    reload_includes: Any = ...
    reload_excludes: Any = ...
    forwarded_allow_ips: Any = ...
    def __init__(self, app: Union[ASGIApplication, Callable, str], host: str = ..., port: int = ..., uds: Optional[str] = ..., fd: Optional[int] = ..., loop: LoopSetupType = ..., http: Union[Type[asyncio.Protocol], HTTPProtocolType] = ..., ws: Union[Type[asyncio.Protocol], WSProtocolType] = ..., ws_max_size: int = ..., ws_ping_interval: Optional[float] = ..., ws_ping_timeout: Optional[float] = ..., lifespan: LifespanType = ..., env_file: Optional[Union[str, os.PathLike]] = ..., log_config: Optional[Union[dict, str]] = ..., log_level: Optional[Union[str, int]] = ..., access_log: bool = ..., use_colors: Optional[bool] = ..., interface: InterfaceType = ..., debug: bool = ..., reload: bool = ..., reload_dirs: Optional[Union[List[str], str]] = ..., reload_delay: Optional[float] = ..., reload_includes: Optional[Union[List[str], str]] = ..., reload_excludes: Optional[Union[List[str], str]] = ..., workers: Optional[int] = ..., proxy_headers: bool = ..., server_header: bool = ..., date_header: bool = ..., forwarded_allow_ips: Optional[str] = ..., root_path: str = ..., limit_concurrency: Optional[int] = ..., limit_max_requests: Optional[int] = ..., backlog: int = ..., timeout_keep_alive: int = ..., timeout_notify: int = ..., callback_notify: Callable[..., Awaitable[None]] = ..., ssl_keyfile: Optional[str] = ..., ssl_certfile: Optional[Union[str, os.PathLike]] = ..., ssl_keyfile_password: Optional[str] = ..., ssl_version: int = ..., ssl_cert_reqs: int = ..., ssl_ca_certs: Optional[str] = ..., ssl_ciphers: str = ..., headers: Optional[List[List[str]]] = ..., factory: bool = ...) -> None:
        ...
    
    @property
    def asgi_version(self) -> Literal['2.0', '3.0']:
        ...
    
    @property
    def is_ssl(self) -> bool:
        ...
    
    def configure_logging(self) -> None:
        ...
    
    ssl: Any = ...
    http_protocol_class: Any = ...
    ws_protocol_class: Any = ...
    lifespan_class: Any = ...
    loaded_app: Any = ...
    def load(self) -> None:
        ...
    
    def setup_event_loop(self) -> None:
        ...
    
    def bind_socket(self) -> socket.socket:
        ...
    
    @property
    def should_reload(self) -> bool:
        ...
    


