"""
This type stub file was generated by pyright.
"""

import signal
import socket
from types import FrameType
from typing import Any, List, Optional, Union
from uvicorn.config import Config as Config
from uvicorn.protocols.http.h11_impl import H11Protocol as H11Protocol
from uvicorn.protocols.http.httptools_impl import HttpToolsProtocol as HttpToolsProtocol
from uvicorn.protocols.websockets.websockets_impl import WebSocketProtocol as WebSocketProtocol
from uvicorn.protocols.websockets.wsproto_impl import WSProtocol as WSProtocol

Protocols = Union[H11Protocol, HttpToolsProtocol, WSProtocol, WebSocketProtocol]
HANDLED_SIGNALS: Any
logger: Any
class ServerState:
    total_requests: int = ...
    connections: Any = ...
    tasks: Any = ...
    default_headers: Any = ...
    def __init__(self) -> None:
        ...
    


class Server:
    config: Any = ...
    server_state: Any = ...
    started: bool = ...
    should_exit: bool = ...
    force_exit: bool = ...
    last_notified: float = ...
    def __init__(self, config: Config) -> None:
        ...
    
    def run(self, sockets: Optional[List[socket.socket]] = ...) -> None:
        ...
    
    lifespan: Any = ...
    async def serve(self, sockets: Optional[List[socket.socket]] = ...) -> None:
        ...
    
    servers: Any = ...
    async def startup(self, sockets: list = ...) -> None:
        ...
    
    async def main_loop(self) -> None:
        ...
    
    async def on_tick(self, counter: int) -> bool:
        ...
    
    async def shutdown(self, sockets: Optional[List[socket.socket]] = ...) -> None:
        ...
    
    def install_signal_handlers(self) -> None:
        ...
    
    def handle_exit(self, sig: signal.Signals, frame: FrameType) -> None:
        ...
    


