from . import attributes as attributes, evaluator as evaluator, loading as loading, sync as sync
from .. import future as future, sql as sql, util as util
from ..sql import coercions as coercions, expression as expression, operators as operators, roles as roles, select as select, sqltypes as sqltypes
from ..sql.base import CompileState as CompileState, Options as Options
from ..sql.dml import DeleteDMLState as DeleteDMLState, UpdateDMLState as UpdateDMLState
from ..sql.elements import BooleanClauseList as BooleanClauseList
from ..sql.selectable import LABEL_STYLE_TABLENAME_PLUS_COL as LABEL_STYLE_TABLENAME_PLUS_COL
from .base import NO_VALUE as NO_VALUE, state_str as state_str
from typing import Any

def save_obj(base_mapper: Any, states: Any, uowtransaction: Any, single: bool = ...) -> None: ...
def post_update(base_mapper: Any, states: Any, uowtransaction: Any, post_update_cols: Any) -> None: ...
def delete_obj(base_mapper: Any, states: Any, uowtransaction: Any) -> None: ...

class BulkUDCompileState(CompileState):
    class default_update_options(Options): ...
    @classmethod
    def orm_pre_session_exec(cls, session: Any, statement: Any, params: Any, execution_options: Any, bind_arguments: Any, is_reentrant_invoke: Any): ...
    @classmethod
    def orm_setup_cursor_result(cls, session: Any, statement: Any, params: Any, execution_options: Any, bind_arguments: Any, result: Any): ...

class BulkORMUpdate(UpdateDMLState, BulkUDCompileState):
    mapper: Any = ...
    extra_criteria_entities: Any = ...
    @classmethod
    def create_for_statement(cls, statement: Any, compiler: Any, **kw: Any): ...

class BulkORMDelete(DeleteDMLState, BulkUDCompileState):
    mapper: Any = ...
    extra_criteria_entities: Any = ...
    @classmethod
    def create_for_statement(cls, statement: Any, compiler: Any, **kw: Any): ...
