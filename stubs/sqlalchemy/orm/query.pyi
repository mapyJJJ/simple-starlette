"""
This type stub file was generated by pyright.
"""

from . import interfaces
from ..sql.annotation import SupportsCloneAnnotations
from ..sql.base import Executable
from ..sql.selectable import GroupedElement, HasHints, HasPrefixes, HasSuffixes, SelectBase, _SelectFromElements
from typing import Any, Optional

class Query(_SelectFromElements, SupportsCloneAnnotations, HasPrefixes, HasSuffixes, HasHints, Executable):
    load_options: Any = ...
    session: Any = ...
    def __init__(self, entities: Any, session: Optional[Any] = ...) -> None:
        ...
    
    @property
    def statement(self):
        ...
    
    def subquery(self, name: Optional[Any] = ..., with_labels: bool = ..., reduce_columns: bool = ...):
        ...
    
    def cte(self, name: Optional[Any] = ..., recursive: bool = ..., nesting: bool = ...):
        ...
    
    def label(self, name: Any):
        ...
    
    def as_scalar(self):
        ...
    
    def scalar_subquery(self):
        ...
    
    @property
    def selectable(self):
        ...
    
    def __clause_element__(self):
        ...
    
    def only_return_tuples(self, value: Any) -> None:
        ...
    
    @property
    def is_single_entity(self):
        ...
    
    def enable_eagerloads(self, value: Any) -> None:
        ...
    
    def with_labels(self):
        ...
    
    apply_labels: Any = ...
    @property
    def get_label_style(self):
        ...
    
    def set_label_style(self, style: Any):
        ...
    
    def enable_assertions(self, value: Any) -> None:
        ...
    
    @property
    def whereclause(self):
        ...
    
    def with_polymorphic(self, cls_or_mappers: Any, selectable: Optional[Any] = ..., polymorphic_on: Optional[Any] = ...) -> None:
        ...
    
    def yield_per(self, count: Any) -> None:
        ...
    
    def get(self, ident: Any):
        ...
    
    @property
    def lazy_loaded_from(self):
        ...
    
    def correlate(self, *fromclauses: Any) -> None:
        ...
    
    def autoflush(self, setting: Any) -> None:
        ...
    
    def populate_existing(self) -> None:
        ...
    
    def with_parent(self, instance: Any, property: Optional[Any] = ..., from_entity: Optional[Any] = ...):
        ...
    
    def add_entity(self, entity: Any, alias: Optional[Any] = ...) -> None:
        ...
    
    def with_session(self, session: Any) -> None:
        ...
    
    def from_self(self, *entities: Any):
        ...
    
    def values(self, *columns: Any):
        ...
    
    def value(self, column: Any):
        ...
    
    def with_entities(self, *entities: Any) -> None:
        ...
    
    def add_columns(self, *column: Any) -> None:
        ...
    
    def add_column(self, column: Any):
        ...
    
    def options(self, *args: Any) -> None:
        ...
    
    def with_transformation(self, fn: Any):
        ...
    
    def get_execution_options(self):
        ...
    
    def execution_options(self, **kwargs: Any) -> None:
        ...
    
    def with_for_update(self, read: bool = ..., nowait: bool = ..., of: Optional[Any] = ..., skip_locked: bool = ..., key_share: bool = ...) -> None:
        ...
    
    def params(self, *args: Any, **kwargs: Any) -> None:
        ...
    
    def where(self, *criterion: Any):
        ...
    
    def filter(self, *criterion: Any) -> None:
        ...
    
    def filter_by(self, **kwargs: Any):
        ...
    
    def order_by(self, *clauses: Any) -> None:
        ...
    
    def group_by(self, *clauses: Any) -> None:
        ...
    
    def having(self, criterion: Any) -> None:
        ...
    
    def union(self, *q: Any):
        ...
    
    def union_all(self, *q: Any):
        ...
    
    def intersect(self, *q: Any):
        ...
    
    def intersect_all(self, *q: Any):
        ...
    
    def except_(self, *q: Any):
        ...
    
    def except_all(self, *q: Any):
        ...
    
    def join(self, target: Any, *props: Any, **kwargs: Any) -> None:
        ...
    
    def outerjoin(self, target: Any, *props: Any, **kwargs: Any):
        ...
    
    def reset_joinpoint(self) -> None:
        ...
    
    def select_from(self, *from_obj: Any) -> None:
        ...
    
    def select_entity_from(self, from_obj: Any) -> None:
        ...
    
    def __getitem__(self, item: Any):
        ...
    
    def slice(self, start: Any, stop: Any) -> None:
        ...
    
    def limit(self, limit: Any) -> None:
        ...
    
    def offset(self, offset: Any) -> None:
        ...
    
    def distinct(self, *expr: Any) -> None:
        ...
    
    def all(self):
        ...
    
    def from_statement(self, statement: Any) -> None:
        ...
    
    def first(self):
        ...
    
    def one_or_none(self):
        ...
    
    def one(self):
        ...
    
    def scalar(self):
        ...
    
    def __iter__(self) -> Any:
        ...
    
    @property
    def column_descriptions(self):
        ...
    
    def instances(self, result_proxy: Any, context: Optional[Any] = ...):
        ...
    
    def merge_result(self, iterator: Any, load: bool = ...):
        ...
    
    def exists(self):
        ...
    
    def count(self):
        ...
    
    def delete(self, synchronize_session: str = ...):
        ...
    
    def update(self, values: Any, synchronize_session: str = ..., update_args: Optional[Any] = ...):
        ...
    


class FromStatement(GroupedElement, SelectBase, Executable):
    __visit_name__: str = ...
    element: Any = ...
    def __init__(self, entities: Any, element: Any) -> None:
        ...
    
    def get_label_style(self):
        ...
    
    def set_label_style(self, label_style: Any):
        ...
    
    def get_children(self, **kw: Any) -> None:
        ...
    


class AliasOption(interfaces.LoaderOption):
    def __init__(self, alias: Any) -> None:
        ...
    
    def process_compile_state(self, compile_state: Any) -> None:
        ...
    


class BulkUD:
    query: Any = ...
    mapper: Any = ...
    def __init__(self, query: Any) -> None:
        ...
    
    @property
    def session(self):
        ...
    


class BulkUpdate(BulkUD):
    values: Any = ...
    update_kwargs: Any = ...
    def __init__(self, query: Any, values: Any, update_kwargs: Any) -> None:
        ...
    


class BulkDelete(BulkUD):
    ...


