from . import attributes as attributes, interfaces as interfaces, object_mapper as object_mapper, object_session as object_session, relationships as relationships, strategies as strategies
from .. import exc as exc, log as log, util as util
from ..engine import result as result
from .query import Query as Query
from typing import Any, Optional

class DynaLoader(strategies.AbstractRelationshipLoader):
    is_class_level: bool = ...
    def init_class_attribute(self, mapper: Any) -> None: ...

class DynamicAttributeImpl(attributes.AttributeImpl):
    uses_objects: bool = ...
    default_accepts_scalar_loader: bool = ...
    supports_population: bool = ...
    collection: bool = ...
    dynamic: bool = ...
    order_by: Any = ...
    target_mapper: Any = ...
    query_class: Any = ...
    def __init__(self, class_: Any, key: Any, typecallable: Any, dispatch: Any, target_mapper: Any, order_by: Any, query_class: Optional[Any] = ..., **kw: Any) -> None: ...
    def get(self, state: Any, dict_: Any, passive: Any = ...): ...
    def get_collection(self, state: Any, dict_: Any, user_data: Optional[Any] = ..., passive: Any = ...): ...
    def fire_append_event(self, state: Any, dict_: Any, value: Any, initiator: Any, collection_history: Optional[Any] = ...) -> None: ...
    def fire_remove_event(self, state: Any, dict_: Any, value: Any, initiator: Any, collection_history: Optional[Any] = ...) -> None: ...
    def set(self, state: Any, dict_: Any, value: Any, initiator: Optional[Any] = ..., passive: Any = ..., check_old: Optional[Any] = ..., pop: bool = ..., _adapt: bool = ...) -> None: ...
    def delete(self, *args: Any, **kwargs: Any) -> None: ...
    def set_committed_value(self, state: Any, dict_: Any, value: Any) -> None: ...
    def get_history(self, state: Any, dict_: Any, passive: Any = ...): ...
    def get_all_pending(self, state: Any, dict_: Any, passive: Any = ...): ...
    def append(self, state: Any, dict_: Any, value: Any, initiator: Any, passive: Any = ...) -> None: ...
    def remove(self, state: Any, dict_: Any, value: Any, initiator: Any, passive: Any = ...) -> None: ...
    def pop(self, state: Any, dict_: Any, value: Any, initiator: Any, passive: Any = ...) -> None: ...

class DynamicCollectionAdapter:
    data: Any = ...
    def __init__(self, data: Any) -> None: ...
    def __iter__(self) -> Any: ...
    def __len__(self): ...
    def __bool__(self): ...
    __nonzero__: Any = ...

class AppenderMixin:
    query_class: Any = ...
    instance: Any = ...
    attr: Any = ...
    def __init__(self, attr: Any, state: Any) -> None: ...
    def session(self): ...
    session: Any = ...
    def __getitem__(self, index: Any): ...
    def count(self): ...
    def extend(self, iterator: Any) -> None: ...
    def append(self, item: Any) -> None: ...
    def remove(self, item: Any) -> None: ...

class AppenderQuery(AppenderMixin, Query): ...

def mixin_user_query(cls): ...

class CollectionHistory:
    unchanged_items: Any = ...
    added_items: Any = ...
    deleted_items: Any = ...
    def __init__(self, attr: Any, state: Any, apply_to: Optional[Any] = ...) -> None: ...
    @property
    def added_plus_unchanged(self): ...
    @property
    def all_items(self): ...
    def as_history(self): ...
    def indexed(self, index: Any): ...
    def add_added(self, value: Any) -> None: ...
    def add_removed(self, value: Any) -> None: ...
