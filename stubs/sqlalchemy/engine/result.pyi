"""
This type stub file was generated by pyright.
"""

from ..sql.base import InPlaceGenerative as InPlaceGenerative
from ..util import collections_abc as collections_abc
from typing import Any, Optional

class ResultMetaData:
    @property
    def keys(self):
        ...
    


class RMKeyView(collections_abc.KeysView):
    def __init__(self, parent: Any) -> None:
        ...
    
    def __len__(self):
        ...
    
    def __iter__(self) -> Any:
        ...
    
    def __contains__(self, item: Any):
        ...
    
    def __eq__(self, other: Any) -> Any:
        ...
    
    def __ne__(self, other: Any) -> Any:
        ...
    


class SimpleResultMetaData(ResultMetaData):
    def __init__(self, keys: Any, extra: Optional[Any] = ..., _processors: Optional[Any] = ..., _tuplefilter: Optional[Any] = ..., _translated_indexes: Optional[Any] = ..., _unique_filters: Optional[Any] = ...) -> None:
        ...
    


def result_tuple(fields: Any, extra: Optional[Any] = ...):
    ...

class ResultInternal(InPlaceGenerative):
    ...


class _WithKeys:
    def keys(self):
        ...
    


class Result(_WithKeys, ResultInternal):
    def __init__(self, cursor_metadata: Any) -> None:
        ...
    
    def close(self) -> None:
        ...
    
    def yield_per(self, num: Any) -> None:
        ...
    
    def unique(self, strategy: Optional[Any] = ...) -> None:
        ...
    
    def columns(self, *col_expressions: Any):
        ...
    
    def scalars(self, index: int = ...) -> ScalarResult:
        ...
    
    def mappings(self):
        ...
    
    def __iter__(self) -> Any:
        ...
    
    def __next__(self):
        ...
    
    def next(self):
        ...
    
    def partitions(self, size: Optional[Any] = ...) -> None:
        ...
    
    def fetchall(self):
        ...
    
    def fetchone(self):
        ...
    
    def fetchmany(self, size: Optional[Any] = ...):
        ...
    
    def all(self):
        ...
    
    def first(self):
        ...
    
    def one_or_none(self):
        ...
    
    def scalar_one(self):
        ...
    
    def scalar_one_or_none(self):
        ...
    
    def one(self):
        ...
    
    def scalar(self) -> ScalarResult:
        ...
    
    def freeze(self):
        ...
    
    def merge(self, *others: Any):
        ...
    


class FilterResult(ResultInternal):
    ...


class ScalarResult(FilterResult):
    def __init__(self, real_result: Any, index: Any) -> None:
        ...
    
    def unique(self, strategy: Optional[Any] = ...):
        ...
    
    def partitions(self, size: Optional[Any] = ...) -> None:
        ...
    
    def fetchall(self):
        ...
    
    def fetchmany(self, size: Optional[Any] = ...):
        ...
    
    def all(self):
        ...
    
    def __iter__(self) -> Any:
        ...
    
    def __next__(self):
        ...
    
    def next(self):
        ...
    
    def first(self):
        ...
    
    def one_or_none(self):
        ...
    
    def one(self):
        ...
    


class MappingResult(_WithKeys, FilterResult):
    def __init__(self, result: Any) -> None:
        ...
    
    def unique(self, strategy: Optional[Any] = ...):
        ...
    
    def columns(self, *col_expressions: Any):
        ...
    
    def partitions(self, size: Optional[Any] = ...) -> None:
        ...
    
    def fetchall(self):
        ...
    
    def fetchone(self):
        ...
    
    def fetchmany(self, size: Optional[Any] = ...):
        ...
    
    def all(self):
        ...
    
    def __iter__(self) -> Any:
        ...
    
    def __next__(self):
        ...
    
    def next(self):
        ...
    
    def first(self):
        ...
    
    def one_or_none(self):
        ...
    
    def one(self):
        ...
    


class FrozenResult:
    metadata: Any = ...
    data: Any = ...
    def __init__(self, result: Any) -> None:
        ...
    
    def rewrite_rows(self):
        ...
    
    def with_new_rows(self, tuple_data: Any):
        ...
    
    def __call__(self):
        ...
    


class IteratorResult(Result):
    iterator: Any = ...
    raw: Any = ...
    def __init__(self, cursor_metadata: Any, iterator: Any, raw: Optional[Any] = ..., _source_supports_scalars: bool = ...) -> None:
        ...
    


def null_result():
    ...

class ChunkedIteratorResult(IteratorResult):
    chunks: Any = ...
    raw: Any = ...
    iterator: Any = ...
    dynamic_yield_per: Any = ...
    def __init__(self, cursor_metadata: Any, chunks: Any, source_supports_scalars: bool = ..., raw: Optional[Any] = ..., dynamic_yield_per: bool = ...) -> None:
        ...
    
    def yield_per(self, num: Any) -> None:
        ...
    


class MergedResult(IteratorResult):
    closed: bool = ...
    def __init__(self, cursor_metadata: Any, results: Any) -> None:
        ...
    


