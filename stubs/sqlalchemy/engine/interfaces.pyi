"""
This type stub file was generated by pyright.
"""

from typing import Any, Optional

class Dialect:
    supports_statement_cache: bool = ...
    def create_connect_args(self, url: Any) -> None:
        ...
    
    @classmethod
    def type_descriptor(cls, typeobj: Any) -> None:
        ...
    
    def initialize(self, connection: Any) -> None:
        ...
    
    def get_columns(self, connection: Any, table_name: Any, schema: Optional[Any] = ..., **kw: Any) -> None:
        ...
    
    def get_pk_constraint(self, connection: Any, table_name: Any, schema: Optional[Any] = ..., **kw: Any) -> None:
        ...
    
    def get_foreign_keys(self, connection: Any, table_name: Any, schema: Optional[Any] = ..., **kw: Any) -> None:
        ...
    
    def get_table_names(self, connection: Any, schema: Optional[Any] = ..., **kw: Any) -> None:
        ...
    
    def get_temp_table_names(self, connection: Any, schema: Optional[Any] = ..., **kw: Any) -> None:
        ...
    
    def get_view_names(self, connection: Any, schema: Optional[Any] = ..., **kw: Any) -> None:
        ...
    
    def get_sequence_names(self, connection: Any, schema: Optional[Any] = ..., **kw: Any) -> None:
        ...
    
    def get_temp_view_names(self, connection: Any, schema: Optional[Any] = ..., **kw: Any) -> None:
        ...
    
    def get_view_definition(self, connection: Any, view_name: Any, schema: Optional[Any] = ..., **kw: Any) -> None:
        ...
    
    def get_indexes(self, connection: Any, table_name: Any, schema: Optional[Any] = ..., **kw: Any) -> None:
        ...
    
    def get_unique_constraints(self, connection: Any, table_name: Any, schema: Optional[Any] = ..., **kw: Any) -> None:
        ...
    
    def get_check_constraints(self, connection: Any, table_name: Any, schema: Optional[Any] = ..., **kw: Any) -> None:
        ...
    
    def get_table_comment(self, connection: Any, table_name: Any, schema: Optional[Any] = ..., **kw: Any) -> None:
        ...
    
    def normalize_name(self, name: Any) -> None:
        ...
    
    def denormalize_name(self, name: Any) -> None:
        ...
    
    def has_table(self, connection: Any, table_name: Any, schema: Optional[Any] = ..., **kw: Any) -> None:
        ...
    
    def has_index(self, connection: Any, table_name: Any, index_name: Any, schema: Optional[Any] = ...) -> None:
        ...
    
    def has_sequence(self, connection: Any, sequence_name: Any, schema: Optional[Any] = ..., **kw: Any) -> None:
        ...
    
    def do_begin(self, dbapi_connection: Any) -> None:
        ...
    
    def do_rollback(self, dbapi_connection: Any) -> None:
        ...
    
    def do_commit(self, dbapi_connection: Any) -> None:
        ...
    
    def do_close(self, dbapi_connection: Any) -> None:
        ...
    
    def do_set_input_sizes(self, cursor: Any, list_of_tuples: Any, context: Any) -> None:
        ...
    
    def create_xid(self) -> None:
        ...
    
    def do_savepoint(self, connection: Any, name: Any) -> None:
        ...
    
    def do_rollback_to_savepoint(self, connection: Any, name: Any) -> None:
        ...
    
    def do_release_savepoint(self, connection: Any, name: Any) -> None:
        ...
    
    def do_begin_twophase(self, connection: Any, xid: Any) -> None:
        ...
    
    def do_prepare_twophase(self, connection: Any, xid: Any) -> None:
        ...
    
    def do_rollback_twophase(self, connection: Any, xid: Any, is_prepared: bool = ..., recover: bool = ...) -> None:
        ...
    
    def do_commit_twophase(self, connection: Any, xid: Any, is_prepared: bool = ..., recover: bool = ...) -> None:
        ...
    
    def do_recover_twophase(self, connection: Any) -> None:
        ...
    
    def do_executemany(self, cursor: Any, statement: Any, parameters: Any, context: Optional[Any] = ...) -> None:
        ...
    
    def do_execute(self, cursor: Any, statement: Any, parameters: Any, context: Optional[Any] = ...) -> None:
        ...
    
    def do_execute_no_params(self, cursor: Any, statement: Any, parameters: Any, context: Optional[Any] = ...) -> None:
        ...
    
    def is_disconnect(self, e: Any, connection: Any, cursor: Any) -> None:
        ...
    
    def connect(self, *cargs: Any, **cparams: Any) -> None:
        ...
    
    def on_connect_url(self, url: Any):
        ...
    
    def on_connect(self) -> None:
        ...
    
    def reset_isolation_level(self, dbapi_conn: Any) -> None:
        ...
    
    def set_isolation_level(self, dbapi_conn: Any, level: Any) -> None:
        ...
    
    def get_isolation_level(self, dbapi_conn: Any) -> None:
        ...
    
    def get_default_isolation_level(self, dbapi_conn: Any) -> None:
        ...
    
    @classmethod
    def get_dialect_cls(cls, url: Any):
        ...
    
    @classmethod
    def load_provisioning(cls) -> None:
        ...
    
    @classmethod
    def engine_created(cls, engine: Any) -> None:
        ...
    
    def get_driver_connection(self, connection: Any) -> None:
        ...
    


class CreateEnginePlugin:
    url: Any = ...
    def __init__(self, url: Any, kwargs: Any) -> None:
        ...
    
    def update_url(self, url: Any) -> None:
        ...
    
    def handle_dialect_kwargs(self, dialect_cls: Any, dialect_args: Any) -> None:
        ...
    
    def handle_pool_kwargs(self, pool_cls: Any, pool_args: Any) -> None:
        ...
    
    def engine_created(self, engine: Any) -> None:
        ...
    


class ExecutionContext:
    def create_cursor(self) -> None:
        ...
    
    def pre_exec(self) -> None:
        ...
    
    def get_out_parameter_values(self, out_param_names: Any) -> None:
        ...
    
    def post_exec(self) -> None:
        ...
    
    def get_result_cursor_strategy(self, result: Any) -> None:
        ...
    
    def handle_dbapi_exception(self, e: Any) -> None:
        ...
    
    def should_autocommit_text(self, statement: Any) -> None:
        ...
    
    def lastrow_has_defaults(self) -> None:
        ...
    
    def get_rowcount(self) -> None:
        ...
    


class Connectable:
    def connect(self, **kwargs: Any) -> None:
        ...
    
    engine: Any = ...
    def execute(self, object_: Any, *multiparams: Any, **params: Any) -> None:
        ...
    
    def scalar(self, object_: Any, *multiparams: Any, **params: Any) -> None:
        ...
    


class ExceptionContext:
    connection: Any = ...
    engine: Any = ...
    cursor: Any = ...
    statement: Any = ...
    parameters: Any = ...
    original_exception: Any = ...
    sqlalchemy_exception: Any = ...
    chained_exception: Any = ...
    execution_context: Any = ...
    is_disconnect: Any = ...
    invalidate_pool_on_disconnect: bool = ...


class AdaptedConnection:
    @property
    def driver_connection(self):
        ...
    


