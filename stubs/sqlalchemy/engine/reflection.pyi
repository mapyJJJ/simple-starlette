"""
This type stub file was generated by pyright.
"""

from typing import Any, Optional

def cache(fn: Any, self: Any, con: Any, *args: Any, **kw: Any):
    ...

class Inspector:
    def __init__(self, bind: Any) -> None:
        ...
    
    @classmethod
    def from_engine(cls, bind: Any):
        ...
    
    @property
    def default_schema_name(self):
        ...
    
    def get_schema_names(self):
        ...
    
    def get_table_names(self, schema: Optional[Any] = ...):
        ...
    
    def has_table(self, table_name: Any, schema: Optional[Any] = ...):
        ...
    
    def has_sequence(self, sequence_name: Any, schema: Optional[Any] = ...):
        ...
    
    def get_sorted_table_and_fkc_names(self, schema: Optional[Any] = ...):
        ...
    
    def get_temp_table_names(self):
        ...
    
    def get_temp_view_names(self):
        ...
    
    def get_table_options(self, table_name: Any, schema: Optional[Any] = ..., **kw: Any):
        ...
    
    def get_view_names(self, schema: Optional[Any] = ...):
        ...
    
    def get_sequence_names(self, schema: Optional[Any] = ...):
        ...
    
    def get_view_definition(self, view_name: Any, schema: Optional[Any] = ...):
        ...
    
    def get_columns(self, table_name: Any, schema: Optional[Any] = ..., **kw: Any):
        ...
    
    def get_pk_constraint(self, table_name: Any, schema: Optional[Any] = ..., **kw: Any):
        ...
    
    def get_foreign_keys(self, table_name: Any, schema: Optional[Any] = ..., **kw: Any):
        ...
    
    def get_indexes(self, table_name: Any, schema: Optional[Any] = ..., **kw: Any):
        ...
    
    def get_unique_constraints(self, table_name: Any, schema: Optional[Any] = ..., **kw: Any):
        ...
    
    def get_table_comment(self, table_name: Any, schema: Optional[Any] = ..., **kw: Any):
        ...
    
    def get_check_constraints(self, table_name: Any, schema: Optional[Any] = ..., **kw: Any):
        ...
    
    def reflecttable(self, *args: Any, **kwargs: Any):
        ...
    
    def reflect_table(self, table: Any, include_columns: Any, exclude_columns: Any = ..., resolve_fks: bool = ..., _extend_on: Optional[Any] = ...) -> None:
        ...
    


