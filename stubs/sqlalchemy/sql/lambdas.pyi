"""
This type stub file was generated by pyright.
"""

from . import elements as elements, roles as roles
from .base import Options as Options
from .operators import ColumnOperators as ColumnOperators
from typing import Any, Optional

class LambdaOptions(Options):
    enable_tracking: bool = ...
    track_closure_variables: bool = ...
    track_on: Any = ...
    global_track_bound_values: bool = ...
    track_bound_values: bool = ...
    lambda_cache: Any = ...


def lambda_stmt(lmb: Any, enable_tracking: bool = ..., track_closure_variables: bool = ..., track_on: Optional[Any] = ..., global_track_bound_values: bool = ..., track_bound_values: bool = ..., lambda_cache: Optional[Any] = ...):
    ...

class LambdaElement(elements.ClauseElement):
    __visit_name__: str = ...
    parent_lambda: Any = ...
    fn: Any = ...
    role: Any = ...
    tracker_key: Any = ...
    opts: Any = ...
    def __init__(self, fn: Any, role: Any, opts: Any = ..., apply_propagate_attrs: Optional[Any] = ...) -> None:
        ...
    
    def __getattr__(self, key: Any):
        ...
    


class DeferredLambdaElement(LambdaElement):
    lambda_args: Any = ...
    def __init__(self, fn: Any, role: Any, opts: Any = ..., lambda_args: Any = ...) -> None:
        ...
    


class StatementLambdaElement(roles.AllowsLambdaRole, LambdaElement):
    def __add__(self, other: Any):
        ...
    
    def add_criteria(self, other: Any, enable_tracking: bool = ..., track_on: Optional[Any] = ..., track_closure_variables: bool = ..., track_bound_values: bool = ...):
        ...
    
    def spoil(self):
        ...
    


class NullLambdaStatement(roles.AllowsLambdaRole, elements.ClauseElement):
    __visit_name__: str = ...
    def __init__(self, statement: Any) -> None:
        ...
    
    def __getattr__(self, key: Any):
        ...
    
    def __add__(self, other: Any):
        ...
    
    def add_criteria(self, other: Any, **kw: Any):
        ...
    


class LinkedLambdaElement(StatementLambdaElement):
    role: Any = ...
    opts: Any = ...
    fn: Any = ...
    parent_lambda: Any = ...
    tracker_key: Any = ...
    def __init__(self, fn: Any, parent_lambda: Any, opts: Any) -> None:
        ...
    


class AnalyzedCode:
    @classmethod
    def get(cls, fn: Any, lambda_element: Any, lambda_kw: Any, **kw: Any):
        ...
    
    track_bound_values: Any = ...
    track_closure_variables: Any = ...
    bindparam_trackers: Any = ...
    closure_trackers: Any = ...
    build_py_wrappers: Any = ...
    def __init__(self, fn: Any, lambda_element: Any, opts: Any) -> None:
        ...
    


class NonAnalyzedFunction:
    closure_bindparams: Any = ...
    bindparam_trackers: Any = ...
    expr: Any = ...
    def __init__(self, expr: Any) -> None:
        ...
    
    @property
    def expected_expr(self):
        ...
    


class AnalyzedFunction:
    analyzed_code: Any = ...
    fn: Any = ...
    bindparam_trackers: Any = ...
    def __init__(self, analyzed_code: Any, lambda_element: Any, apply_propagate_attrs: Any, fn: Any) -> None:
        ...
    


class PyWrapper(ColumnOperators):
    fn: Any = ...
    track_bound_values: Any = ...
    def __init__(self, fn: Any, name: Any, to_evaluate: Any, closure_index: Optional[Any] = ..., getter: Optional[Any] = ..., track_bound_values: bool = ...) -> None:
        ...
    
    def __call__(self, *arg: Any, **kw: Any):
        ...
    
    def operate(self, op: Any, *other: Any, **kwargs: Any):
        ...
    
    def reverse_operate(self, op: Any, other: Any, **kwargs: Any):
        ...
    
    def __clause_element__(self):
        ...
    
    def __bool__(self):
        ...
    
    def __nonzero__(self):
        ...
    
    def __getattribute__(self, key: Any):
        ...
    
    def __iter__(self) -> Any:
        ...
    
    def __getitem__(self, key: Any):
        ...
    


def insp(lmb: Any):
    ...

