"""
This type stub file was generated by pyright.
"""

from . import visitors as visitors
from .base import DialectKWArgs as DialectKWArgs, Executable as Executable, SchemaEventTarget as SchemaEventTarget
from .elements import ColumnClause as ColumnClause
from .selectable import TableClause as TableClause
from typing import Any, Optional

RETAIN_SCHEMA: Any
BLANK_SCHEMA: Any
NULL_UNSPECIFIED: Any
class SchemaItem(SchemaEventTarget, visitors.Visitable):
    __visit_name__: str = ...
    create_drop_stringify_dialect: str = ...
    def info(self):
        ...
    


class Table(DialectKWArgs, SchemaItem, TableClause):
    __visit_name__: str = ...
    constraints: Any = ...
    indexes: Any = ...
    def __new__(cls, *args: Any, **kw: Any):
        ...
    
    def __init__(self, *args: Any, **kw: Any) -> None:
        ...
    
    @property
    def foreign_key_constraints(self):
        ...
    
    @property
    def key(self):
        ...
    
    @property
    def bind(self):
        ...
    
    def add_is_dependent_on(self, table: Any) -> None:
        ...
    
    def append_column(self, column: Any, replace_existing: bool = ...) -> None:
        ...
    
    def append_constraint(self, constraint: Any) -> None:
        ...
    
    def exists(self, bind: Optional[Any] = ...):
        ...
    
    def create(self, bind: Optional[Any] = ..., checkfirst: bool = ...) -> None:
        ...
    
    def drop(self, bind: Optional[Any] = ..., checkfirst: bool = ...) -> None:
        ...
    
    def tometadata(self, metadata: Any, schema: Any = ..., referred_schema_fn: Optional[Any] = ..., name: Optional[Any] = ...):
        ...
    
    def to_metadata(self, metadata: Any, schema: Any = ..., referred_schema_fn: Optional[Any] = ..., name: Optional[Any] = ...):
        ...
    


class Column(DialectKWArgs, SchemaItem, ColumnClause):
    __visit_name__: str = ...
    inherit_cache: bool = ...
    key: Any = ...
    primary_key: Any = ...
    nullable: Any = ...
    default: Any = ...
    server_default: Any = ...
    server_onupdate: Any = ...
    index: Any = ...
    unique: Any = ...
    system: Any = ...
    doc: Any = ...
    onupdate: Any = ...
    autoincrement: Any = ...
    constraints: Any = ...
    foreign_keys: Any = ...
    comment: Any = ...
    computed: Any = ...
    identity: Any = ...
    info: Any = ...
    def __init__(self, *args: Any, **kwargs: Any) -> None:
        ...
    
    def references(self, column: Any):
        ...
    
    def append_foreign_key(self, fk: Any) -> None:
        ...
    
    def copy(self, **kw: Any):
        ...
    


class ForeignKey(DialectKWArgs, SchemaItem):
    __visit_name__: str = ...
    constraint: Any = ...
    parent: Any = ...
    use_alter: Any = ...
    name: Any = ...
    onupdate: Any = ...
    ondelete: Any = ...
    deferrable: Any = ...
    initially: Any = ...
    link_to_name: Any = ...
    match: Any = ...
    info: Any = ...
    def __init__(self, column: Any, _constraint: Optional[Any] = ..., use_alter: bool = ..., name: Optional[Any] = ..., onupdate: Optional[Any] = ..., ondelete: Optional[Any] = ..., deferrable: Optional[Any] = ..., initially: Optional[Any] = ..., link_to_name: bool = ..., match: Optional[Any] = ..., info: Optional[Any] = ..., **dialect_kw: Any) -> None:
        ...
    
    def copy(self, schema: Optional[Any] = ..., **kw: Any):
        ...
    
    target_fullname: Any = ...
    def references(self, table: Any):
        ...
    
    def get_referent(self, table: Any):
        ...
    
    def column(self):
        ...
    


class DefaultGenerator(Executable, SchemaItem):
    __visit_name__: str = ...
    is_sequence: bool = ...
    is_server_default: bool = ...
    column: Any = ...
    for_update: Any = ...
    def __init__(self, for_update: bool = ...) -> None:
        ...
    
    def execute(self, bind: Optional[Any] = ...):
        ...
    
    @property
    def bind(self):
        ...
    


class ColumnDefault(DefaultGenerator):
    arg: Any = ...
    def __init__(self, arg: Any, **kwargs: Any) -> None:
        ...
    
    def is_callable(self):
        ...
    
    def is_clause_element(self):
        ...
    
    def is_scalar(self):
        ...
    


class IdentityOptions:
    start: Any = ...
    increment: Any = ...
    minvalue: Any = ...
    maxvalue: Any = ...
    nominvalue: Any = ...
    nomaxvalue: Any = ...
    cycle: Any = ...
    cache: Any = ...
    order: Any = ...
    def __init__(self, start: Optional[Any] = ..., increment: Optional[Any] = ..., minvalue: Optional[Any] = ..., maxvalue: Optional[Any] = ..., nominvalue: Optional[Any] = ..., nomaxvalue: Optional[Any] = ..., cycle: Optional[Any] = ..., cache: Optional[Any] = ..., order: Optional[Any] = ...) -> None:
        ...
    


class Sequence(IdentityOptions, DefaultGenerator):
    __visit_name__: str = ...
    is_sequence: bool = ...
    name: Any = ...
    optional: Any = ...
    schema: Any = ...
    metadata: Any = ...
    data_type: Any = ...
    def __init__(self, name: Any, start: Optional[Any] = ..., increment: Optional[Any] = ..., minvalue: Optional[Any] = ..., maxvalue: Optional[Any] = ..., nominvalue: Optional[Any] = ..., nomaxvalue: Optional[Any] = ..., cycle: Optional[Any] = ..., schema: Optional[Any] = ..., cache: Optional[Any] = ..., order: Optional[Any] = ..., data_type: Optional[Any] = ..., optional: bool = ..., quote: Optional[Any] = ..., metadata: Optional[Any] = ..., quote_schema: Optional[Any] = ..., for_update: bool = ...) -> None:
        ...
    
    def is_callable(self):
        ...
    
    def is_clause_element(self):
        ...
    
    def next_value(self):
        ...
    
    @property
    def bind(self):
        ...
    
    def create(self, bind: Optional[Any] = ..., checkfirst: bool = ...) -> None:
        ...
    
    def drop(self, bind: Optional[Any] = ..., checkfirst: bool = ...) -> None:
        ...
    


class FetchedValue(SchemaEventTarget):
    is_server_default: bool = ...
    reflected: bool = ...
    has_argument: bool = ...
    is_clause_element: bool = ...
    for_update: Any = ...
    def __init__(self, for_update: bool = ...) -> None:
        ...
    


class DefaultClause(FetchedValue):
    has_argument: bool = ...
    arg: Any = ...
    reflected: Any = ...
    def __init__(self, arg: Any, for_update: bool = ..., _reflected: bool = ...) -> None:
        ...
    


class Constraint(DialectKWArgs, SchemaItem):
    __visit_name__: str = ...
    name: Any = ...
    deferrable: Any = ...
    initially: Any = ...
    info: Any = ...
    def __init__(self, name: Optional[Any] = ..., deferrable: Optional[Any] = ..., initially: Optional[Any] = ..., _create_rule: Optional[Any] = ..., info: Optional[Any] = ..., _type_bound: bool = ..., **dialect_kw: Any) -> None:
        ...
    
    @property
    def table(self):
        ...
    
    def copy(self, **kw: Any):
        ...
    


class ColumnCollectionMixin:
    columns: Any = ...
    def __init__(self, *columns: Any, **kw: Any) -> None:
        ...
    


class ColumnCollectionConstraint(ColumnCollectionMixin, Constraint):
    def __init__(self, *columns: Any, **kw: Any) -> None:
        ...
    
    columns: Any = ...
    def __contains__(self, x: Any):
        ...
    
    def copy(self, target_table: Optional[Any] = ..., **kw: Any):
        ...
    
    def contains_column(self, col: Any):
        ...
    
    def __iter__(self) -> Any:
        ...
    
    def __len__(self):
        ...
    


class CheckConstraint(ColumnCollectionConstraint):
    __visit_name__: str = ...
    sqltext: Any = ...
    def __init__(self, sqltext: Any, name: Optional[Any] = ..., deferrable: Optional[Any] = ..., initially: Optional[Any] = ..., table: Optional[Any] = ..., info: Optional[Any] = ..., _create_rule: Optional[Any] = ..., _autoattach: bool = ..., _type_bound: bool = ..., **kw: Any) -> None:
        ...
    
    @property
    def is_column_level(self):
        ...
    
    def copy(self, target_table: Optional[Any] = ..., **kw: Any):
        ...
    


class ForeignKeyConstraint(ColumnCollectionConstraint):
    __visit_name__: str = ...
    onupdate: Any = ...
    ondelete: Any = ...
    link_to_name: Any = ...
    use_alter: Any = ...
    match: Any = ...
    elements: Any = ...
    def __init__(self, columns: Any, refcolumns: Any, name: Optional[Any] = ..., onupdate: Optional[Any] = ..., ondelete: Optional[Any] = ..., deferrable: Optional[Any] = ..., initially: Optional[Any] = ..., use_alter: bool = ..., link_to_name: bool = ..., match: Optional[Any] = ..., table: Optional[Any] = ..., info: Optional[Any] = ..., **dialect_kw: Any) -> None:
        ...
    
    columns: Any = ...
    @property
    def referred_table(self):
        ...
    
    @property
    def column_keys(self):
        ...
    
    def copy(self, schema: Optional[Any] = ..., target_table: Optional[Any] = ..., **kw: Any):
        ...
    


class PrimaryKeyConstraint(ColumnCollectionConstraint):
    __visit_name__: str = ...
    def __init__(self, *columns: Any, **kw: Any) -> None:
        ...
    
    @property
    def columns_autoinc_first(self):
        ...
    


class UniqueConstraint(ColumnCollectionConstraint):
    __visit_name__: str = ...


class Index(DialectKWArgs, ColumnCollectionMixin, SchemaItem):
    __visit_name__: str = ...
    table: Any = ...
    name: Any = ...
    unique: Any = ...
    info: Any = ...
    expressions: Any = ...
    def __init__(self, name: Any, *expressions: Any, **kw: Any) -> None:
        ...
    
    @property
    def bind(self):
        ...
    
    def create(self, bind: Optional[Any] = ..., checkfirst: bool = ...):
        ...
    
    def drop(self, bind: Optional[Any] = ..., checkfirst: bool = ...) -> None:
        ...
    


DEFAULT_NAMING_CONVENTION: Any
class MetaData(SchemaItem):
    __visit_name__: str = ...
    tables: Any = ...
    schema: Any = ...
    naming_convention: Any = ...
    info: Any = ...
    def __init__(self, bind: Optional[Any] = ..., schema: Optional[Any] = ..., quote_schema: Optional[Any] = ..., naming_convention: Optional[Any] = ..., info: Optional[Any] = ...) -> None:
        ...
    
    def __contains__(self, table_or_key: Any):
        ...
    
    def is_bound(self):
        ...
    
    def bind(self):
        ...
    
    bind: Any = ...
    def clear(self) -> None:
        ...
    
    def remove(self, table: Any) -> None:
        ...
    
    @property
    def sorted_tables(self):
        ...
    
    def reflect(self, bind: Optional[Any] = ..., schema: Optional[Any] = ..., views: bool = ..., only: Optional[Any] = ..., extend_existing: bool = ..., autoload_replace: bool = ..., resolve_fks: bool = ..., **dialect_kwargs: Any) -> None:
        ...
    
    def create_all(self, bind: Optional[Any] = ..., tables: Optional[Any] = ..., checkfirst: bool = ...) -> None:
        ...
    
    def drop_all(self, bind: Optional[Any] = ..., tables: Optional[Any] = ..., checkfirst: bool = ...) -> None:
        ...
    


class ThreadLocalMetaData(MetaData):
    __visit_name__: str = ...
    context: Any = ...
    def __init__(self) -> None:
        ...
    
    def bind(self):
        ...
    
    bind: Any = ...
    def is_bound(self):
        ...
    
    def dispose(self) -> None:
        ...
    


class Computed(FetchedValue, SchemaItem):
    __visit_name__: str = ...
    sqltext: Any = ...
    persisted: Any = ...
    column: Any = ...
    def __init__(self, sqltext: Any, persisted: Optional[Any] = ...) -> None:
        ...
    
    def copy(self, target_table: Optional[Any] = ..., **kw: Any):
        ...
    


class Identity(IdentityOptions, FetchedValue, SchemaItem):
    __visit_name__: str = ...
    always: Any = ...
    on_null: Any = ...
    column: Any = ...
    def __init__(self, always: bool = ..., on_null: Optional[Any] = ..., start: Optional[Any] = ..., increment: Optional[Any] = ..., minvalue: Optional[Any] = ..., maxvalue: Optional[Any] = ..., nominvalue: Optional[Any] = ..., nomaxvalue: Optional[Any] = ..., cycle: Optional[Any] = ..., cache: Optional[Any] = ..., order: Optional[Any] = ...) -> None:
        ...
    
    def copy(self, **kw: Any):
        ...
    


