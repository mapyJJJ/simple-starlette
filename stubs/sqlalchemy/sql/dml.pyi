"""
This type stub file was generated by pyright.
"""

from . import roles as roles
from .base import CompileState as CompileState, DialectKWArgs as DialectKWArgs, Executable as Executable, HasCompileState as HasCompileState
from .elements import ClauseElement as ClauseElement
from .selectable import HasCTE as HasCTE, HasPrefixes as HasPrefixes, ReturnsRows as ReturnsRows
from typing import Any, Optional

class DMLState(CompileState):
    isupdate: bool = ...
    isdelete: bool = ...
    isinsert: bool = ...
    def __init__(self, statement: Any, compiler: Any, **kw: Any) -> None:
        ...
    
    @property
    def dml_table(self):
        ...
    


class InsertDMLState(DMLState):
    isinsert: bool = ...
    include_table_with_column_exprs: bool = ...
    statement: Any = ...
    def __init__(self, statement: Any, compiler: Any, **kw: Any) -> None:
        ...
    


class UpdateDMLState(DMLState):
    isupdate: bool = ...
    include_table_with_column_exprs: bool = ...
    statement: Any = ...
    is_multitable: Any = ...
    def __init__(self, statement: Any, compiler: Any, **kw: Any) -> None:
        ...
    


class DeleteDMLState(DMLState):
    isdelete: bool = ...
    statement: Any = ...
    def __init__(self, statement: Any, compiler: Any, **kw: Any) -> None:
        ...
    


class UpdateBase(roles.DMLRole, HasCTE, HasCompileState, DialectKWArgs, HasPrefixes, ReturnsRows, Executable, ClauseElement):
    __visit_name__: str = ...
    named_with_column: bool = ...
    is_dml: bool = ...
    def params(self, *arg: Any, **kw: Any) -> None:
        ...
    
    def with_dialect_options(self, **opt: Any) -> None:
        ...
    
    def bind(self):
        ...
    
    bind: Any = ...
    def returning(self, *cols: Any) -> None:
        ...
    
    @property
    def exported_columns(self):
        ...
    
    def with_hint(self, text: Any, selectable: Optional[Any] = ..., dialect_name: str = ...) -> None:
        ...
    


class ValuesBase(UpdateBase):
    __visit_name__: str = ...
    select: Any = ...
    table: Any = ...
    def __init__(self, table: Any, values: Any, prefixes: Any) -> None:
        ...
    
    def values(self, *args: Any, **kwargs: Any) -> None:
        ...
    
    def return_defaults(self, *cols: Any) -> None:
        ...
    


class Insert(ValuesBase):
    __visit_name__: str = ...
    select: Any = ...
    include_insert_from_select_defaults: bool = ...
    is_insert: bool = ...
    def __init__(self, table: Any, values: Optional[Any] = ..., inline: bool = ..., bind: Optional[Any] = ..., prefixes: Optional[Any] = ..., returning: Optional[Any] = ..., return_defaults: bool = ..., **dialect_kw: Any) -> None:
        ...
    
    def inline(self) -> None:
        ...
    
    def from_select(self, names: Any, select: Any, include_defaults: bool = ...) -> None:
        ...
    


class DMLWhereBase:
    def where(self, *whereclause: Any) -> None:
        ...
    
    def filter(self, *criteria: Any):
        ...
    
    def filter_by(self, **kwargs: Any):
        ...
    
    @property
    def whereclause(self):
        ...
    


class Update(DMLWhereBase, ValuesBase):
    __visit_name__: str = ...
    is_update: bool = ...
    def __init__(self, table: Any, whereclause: Optional[Any] = ..., values: Optional[Any] = ..., inline: bool = ..., bind: Optional[Any] = ..., prefixes: Optional[Any] = ..., returning: Optional[Any] = ..., return_defaults: bool = ..., preserve_parameter_order: bool = ..., **dialect_kw: Any) -> None:
        ...
    
    def ordered_values(self, *args: Any) -> None:
        ...
    
    def inline(self) -> None:
        ...
    


class Delete(DMLWhereBase, UpdateBase):
    __visit_name__: str = ...
    is_delete: bool = ...
    table: Any = ...
    def __init__(self, table: Any, whereclause: Optional[Any] = ..., bind: Optional[Any] = ..., returning: Optional[Any] = ..., prefixes: Optional[Any] = ..., **dialect_kw: Any) -> None:
        ...
    


