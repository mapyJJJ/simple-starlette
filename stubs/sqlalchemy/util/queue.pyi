from typing import Any, Optional

class Empty(Exception): ...
class Full(Exception): ...

class Queue:
    mutex: Any = ...
    not_empty: Any = ...
    not_full: Any = ...
    use_lifo: Any = ...
    def __init__(self, maxsize: int = ..., use_lifo: bool = ...) -> None: ...
    def qsize(self): ...
    def empty(self): ...
    def full(self): ...
    def put(self, item: Any, block: bool = ..., timeout: Optional[Any] = ...) -> None: ...
    def put_nowait(self, item: Any): ...
    def get(self, block: bool = ..., timeout: Optional[Any] = ...): ...
    def get_nowait(self): ...

class AsyncAdaptedQueue:
    await_: Any = ...
    use_lifo: Any = ...
    maxsize: Any = ...
    def __init__(self, maxsize: int = ..., use_lifo: bool = ...) -> None: ...
    def empty(self): ...
    def full(self): ...
    def qsize(self): ...
    def put_nowait(self, item: Any): ...
    def put(self, item: Any, block: bool = ..., timeout: Optional[Any] = ...): ...
    def get_nowait(self): ...
    def get(self, block: bool = ..., timeout: Optional[Any] = ...): ...

class FallbackAsyncAdaptedQueue(AsyncAdaptedQueue):
    await_: Any = ...
