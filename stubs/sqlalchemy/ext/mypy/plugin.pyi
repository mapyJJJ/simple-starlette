from . import decl_class as decl_class, names as names, util as util
from mypy.nodes import MypyFile as MypyFile
from mypy.plugin import AttributeContext as AttributeContext, ClassDefContext as ClassDefContext, DynamicClassDefContext as DynamicClassDefContext, Plugin, SemanticAnalyzerPluginInterface as SemanticAnalyzerPluginInterface
from mypy.types import Type as Type
from typing import Callable, List, Optional, Tuple, Type as TypingType

class SQLAlchemyPlugin(Plugin):
    def get_dynamic_class_hook(self, fullname: str) -> Optional[Callable[[DynamicClassDefContext], None]]: ...
    def get_customize_class_mro_hook(self, fullname: str) -> Optional[Callable[[ClassDefContext], None]]: ...
    def get_class_decorator_hook(self, fullname: str) -> Optional[Callable[[ClassDefContext], None]]: ...
    def get_metaclass_hook(self, fullname: str) -> Optional[Callable[[ClassDefContext], None]]: ...
    def get_base_class_hook(self, fullname: str) -> Optional[Callable[[ClassDefContext], None]]: ...
    def get_attribute_hook(self, fullname: str) -> Optional[Callable[[AttributeContext], Type]]: ...
    def get_additional_deps(self, file: MypyFile) -> List[Tuple[int, str, int]]: ...

def plugin(version: str) -> TypingType[SQLAlchemyPlugin]: ...
