from . import infer as infer, util as util
from mypy.nodes import AssignmentStmt, ClassDef as ClassDef, NameExpr, StrExpr
from mypy.plugin import SemanticAnalyzerPluginInterface as SemanticAnalyzerPluginInterface
from mypy.types import ProperType as ProperType
from typing import List, Optional, Union

def apply_mypy_mapped_attr(cls, api: SemanticAnalyzerPluginInterface, item: Union[NameExpr, StrExpr], attributes: List[util.SQLAlchemyAttribute]) -> None: ...
def re_apply_declarative_assignments(cls, api: SemanticAnalyzerPluginInterface, attributes: List[util.SQLAlchemyAttribute]) -> None: ...
def apply_type_to_mapped_statement(api: SemanticAnalyzerPluginInterface, stmt: AssignmentStmt, lvalue: NameExpr, left_hand_explicit_type: Optional[ProperType], python_type_for_type: Optional[ProperType]) -> None: ...
def add_additional_orm_attributes(cls, api: SemanticAnalyzerPluginInterface, attributes: List[util.SQLAlchemyAttribute]) -> None: ...
