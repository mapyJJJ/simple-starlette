from ... import exc as exc, processors as processors, types as sqltypes, util as util
from ...sql.elements import quoted_name as quoted_name
from .array import ARRAY as PGARRAY
from .base import ENUM as ENUM, INTERVAL as INTERVAL, PGCompiler as PGCompiler, PGDialect as PGDialect, PGExecutionContext as PGExecutionContext, PGIdentifierPreparer as PGIdentifierPreparer, UUID as UUID
from .json import JSON as JSON, JSONB as JSONB, JSONPathType as JSONPathType
from typing import Any, Optional

class _PGNumeric(sqltypes.Numeric):
    def result_processor(self, dialect: Any, coltype: Any): ...

class _PGNumericNoBind(_PGNumeric):
    def bind_processor(self, dialect: Any) -> None: ...

class _PGJSON(JSON):
    def result_processor(self, dialect: Any, coltype: Any) -> None: ...
    def get_dbapi_type(self, dbapi: Any): ...

class _PGJSONB(JSONB):
    def result_processor(self, dialect: Any, coltype: Any) -> None: ...
    def get_dbapi_type(self, dbapi: Any): ...

class _PGJSONIndexType(sqltypes.JSON.JSONIndexType):
    def get_dbapi_type(self, dbapi: Any) -> None: ...

class _PGJSONIntIndexType(sqltypes.JSON.JSONIntIndexType):
    def get_dbapi_type(self, dbapi: Any): ...

class _PGJSONStrIndexType(sqltypes.JSON.JSONStrIndexType):
    def get_dbapi_type(self, dbapi: Any): ...

class _PGJSONPathType(JSONPathType):
    def get_dbapi_type(self, dbapi: Any): ...

class _PGUUID(UUID):
    def bind_processor(self, dialect: Any): ...
    def result_processor(self, dialect: Any, coltype: Any): ...

class _PGEnum(ENUM):
    def get_dbapi_type(self, dbapi: Any): ...

class _PGInterval(INTERVAL):
    def get_dbapi_type(self, dbapi: Any): ...
    @classmethod
    def adapt_emulated_to_native(cls, interval: Any, **kw: Any): ...

class _PGTimeStamp(sqltypes.DateTime):
    def get_dbapi_type(self, dbapi: Any): ...

class _PGTime(sqltypes.Time):
    def get_dbapi_type(self, dbapi: Any): ...

class _PGInteger(sqltypes.Integer):
    def get_dbapi_type(self, dbapi: Any): ...

class _PGSmallInteger(sqltypes.SmallInteger):
    def get_dbapi_type(self, dbapi: Any): ...

class _PGNullType(sqltypes.NullType):
    def get_dbapi_type(self, dbapi: Any): ...

class _PGBigInteger(sqltypes.BigInteger):
    def get_dbapi_type(self, dbapi: Any): ...

class _PGBoolean(sqltypes.Boolean):
    def get_dbapi_type(self, dbapi: Any): ...

class _PGARRAY(PGARRAY):
    def bind_expression(self, bindvalue: Any): ...

class PGExecutionContext_pg8000(PGExecutionContext):
    def create_server_side_cursor(self): ...
    def pre_exec(self) -> None: ...

class ServerSideCursor:
    server_side: bool = ...
    ident: Any = ...
    cursor: Any = ...
    def __init__(self, cursor: Any, ident: Any) -> None: ...
    @property
    def connection(self): ...
    @property
    def rowcount(self): ...
    @property
    def description(self): ...
    def execute(self, operation: Any, args: Any = ..., stream: Optional[Any] = ...): ...
    def executemany(self, operation: Any, param_sets: Any): ...
    def fetchone(self): ...
    def fetchmany(self, num: Optional[Any] = ...): ...
    def fetchall(self): ...
    def close(self) -> None: ...
    def setinputsizes(self, *sizes: Any) -> None: ...
    def setoutputsize(self, size: Any, column: Optional[Any] = ...) -> None: ...

class PGCompiler_pg8000(PGCompiler):
    def visit_mod_binary(self, binary: Any, operator: Any, **kw: Any): ...

class PGIdentifierPreparer_pg8000(PGIdentifierPreparer):
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...

class PGDialect_pg8000(PGDialect):
    driver: str = ...
    supports_statement_cache: bool = ...
    supports_unicode_statements: bool = ...
    supports_unicode_binds: bool = ...
    default_paramstyle: str = ...
    supports_sane_multi_rowcount: bool = ...
    execution_ctx_cls: Any = ...
    statement_compiler: Any = ...
    preparer: Any = ...
    supports_server_side_cursors: bool = ...
    use_setinputsizes: bool = ...
    description_encoding: Any = ...
    colspecs: Any = ...
    client_encoding: Any = ...
    def __init__(self, client_encoding: Optional[Any] = ..., **kwargs: Any) -> None: ...
    @classmethod
    def dbapi(cls): ...
    def create_connect_args(self, url: Any): ...
    def is_disconnect(self, e: Any, connection: Any, cursor: Any): ...
    def set_isolation_level(self, connection: Any, level: Any) -> None: ...
    def set_readonly(self, connection: Any, value: Any) -> None: ...
    def get_readonly(self, connection: Any): ...
    def set_deferrable(self, connection: Any, value: Any) -> None: ...
    def get_deferrable(self, connection: Any): ...
    def set_client_encoding(self, connection: Any, client_encoding: Any) -> None: ...
    def do_set_input_sizes(self, cursor: Any, list_of_tuples: Any, context: Any) -> None: ...
    def do_begin_twophase(self, connection: Any, xid: Any) -> None: ...
    def do_prepare_twophase(self, connection: Any, xid: Any) -> None: ...
    def do_rollback_twophase(self, connection: Any, xid: Any, is_prepared: bool = ..., recover: bool = ...) -> None: ...
    def do_commit_twophase(self, connection: Any, xid: Any, is_prepared: bool = ..., recover: bool = ...) -> None: ...
    def do_recover_twophase(self, connection: Any): ...
    def on_connect(self): ...
dialect = PGDialect_pg8000
