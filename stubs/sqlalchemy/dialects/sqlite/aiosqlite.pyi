from ... import pool as pool, util as util
from ...engine import AdaptedConnection as AdaptedConnection
from ...util.concurrency import await_fallback as await_fallback, await_only as await_only
from .base import SQLiteExecutionContext as SQLiteExecutionContext
from .pysqlite import SQLiteDialect_pysqlite as SQLiteDialect_pysqlite
from typing import Any, Optional

class AsyncAdapt_aiosqlite_cursor:
    server_side: bool = ...
    await_: Any = ...
    arraysize: int = ...
    rowcount: int = ...
    description: Any = ...
    def __init__(self, adapt_connection: Any) -> None: ...
    def close(self) -> None: ...
    lastrowid: int = ...
    def execute(self, operation: Any, parameters: Optional[Any] = ...) -> None: ...
    def executemany(self, operation: Any, seq_of_parameters: Any) -> None: ...
    def setinputsizes(self, *inputsizes: Any) -> None: ...
    def __iter__(self) -> Any: ...
    def fetchone(self): ...
    def fetchmany(self, size: Optional[Any] = ...): ...
    def fetchall(self): ...

class AsyncAdapt_aiosqlite_ss_cursor(AsyncAdapt_aiosqlite_cursor):
    server_side: bool = ...
    def __init__(self, *arg: Any, **kw: Any) -> None: ...
    def close(self) -> None: ...
    def fetchone(self): ...
    def fetchmany(self, size: Optional[Any] = ...): ...
    def fetchall(self): ...

class AsyncAdapt_aiosqlite_connection(AdaptedConnection):
    await_: Any = ...
    dbapi: Any = ...
    def __init__(self, dbapi: Any, connection: Any) -> None: ...
    @property
    def isolation_level(self): ...
    @isolation_level.setter
    def isolation_level(self, value: Any) -> None: ...
    def create_function(self, *args: Any, **kw: Any) -> None: ...
    def cursor(self, server_side: bool = ...): ...
    def execute(self, *args: Any, **kw: Any): ...
    def rollback(self) -> None: ...
    def commit(self) -> None: ...
    def close(self) -> None: ...

class AsyncAdaptFallback_aiosqlite_connection(AsyncAdapt_aiosqlite_connection):
    await_: Any = ...

class AsyncAdapt_aiosqlite_dbapi:
    aiosqlite: Any = ...
    sqlite: Any = ...
    paramstyle: str = ...
    def __init__(self, aiosqlite: Any, sqlite: Any) -> None: ...
    def connect(self, *arg: Any, **kw: Any): ...

class SQLiteExecutionContext_aiosqlite(SQLiteExecutionContext):
    def create_server_side_cursor(self): ...

class SQLiteDialect_aiosqlite(SQLiteDialect_pysqlite):
    driver: str = ...
    supports_statement_cache: bool = ...
    is_async: bool = ...
    supports_server_side_cursors: bool = ...
    execution_ctx_cls: Any = ...
    @classmethod
    def dbapi(cls): ...
    @classmethod
    def get_pool_class(cls, url: Any): ...
    def is_disconnect(self, e: Any, connection: Any, cursor: Any): ...
    def get_driver_connection(self, connection: Any): ...
dialect = SQLiteDialect_aiosqlite
