"""
This type stub file was generated by pyright.
"""

import contextlib
import os
import typing as t
from ._compat import WIN

"""
This module contains implementations for the termui module. To keep the
import time of Click down, some infrequently used functionality is
placed in this module and only imported as needed.
"""
V = ...
if os.name == "nt":
    ...
else:
    BEFORE_BAR = ...
    AFTER_BAR = ...
class ProgressBar(t.Generic[V]):
    def __init__(self, iterable: t.Optional[t.Iterable[V]], length: t.Optional[int] = ..., fill_char: str = ..., empty_char: str = ..., bar_template: str = ..., info_sep: str = ..., show_eta: bool = ..., show_percent: t.Optional[bool] = ..., show_pos: bool = ..., item_show_func: t.Optional[t.Callable[[t.Optional[V]], t.Optional[str]]] = ..., label: t.Optional[str] = ..., file: t.Optional[t.TextIO] = ..., color: t.Optional[bool] = ..., update_min_steps: int = ..., width: int = ...) -> None:
        ...
    
    def __enter__(self) -> ProgressBar:
        ...
    
    def __exit__(self, exc_type, exc_value, tb): # -> None:
        ...
    
    def __iter__(self) -> t.Iterator[V]:
        ...
    
    def __next__(self) -> V:
        ...
    
    def render_finish(self) -> None:
        ...
    
    @property
    def pct(self) -> float:
        ...
    
    @property
    def time_per_iteration(self) -> float:
        ...
    
    @property
    def eta(self) -> float:
        ...
    
    def format_eta(self) -> str:
        ...
    
    def format_pos(self) -> str:
        ...
    
    def format_pct(self) -> str:
        ...
    
    def format_bar(self) -> str:
        ...
    
    def format_progress_line(self) -> str:
        ...
    
    def render_progress(self) -> None:
        ...
    
    def make_step(self, n_steps: int) -> None:
        ...
    
    def update(self, n_steps: int, current_item: t.Optional[V] = ...) -> None:
        """Update the progress bar by advancing a specified number of
        steps, and optionally set the ``current_item`` for this new
        position.

        :param n_steps: Number of steps to advance.
        :param current_item: Optional item to set as ``current_item``
            for the updated position.

        .. versionchanged:: 8.0
            Added the ``current_item`` optional parameter.

        .. versionchanged:: 8.0
            Only render when the number of steps meets the
            ``update_min_steps`` threshold.
        """
        ...
    
    def finish(self) -> None:
        ...
    
    def generator(self) -> t.Iterator[V]:
        """Return a generator which yields the items added to the bar
        during construction, and updates the progress bar *after* the
        yielded block returns.
        """
        ...
    


def pager(generator: t.Iterable[str], color: t.Optional[bool] = ...) -> None:
    """Decide what method to use for paging through text."""
    ...

class Editor:
    def __init__(self, editor: t.Optional[str] = ..., env: t.Optional[t.Mapping[str, str]] = ..., require_save: bool = ..., extension: str = ...) -> None:
        ...
    
    def get_editor(self) -> str:
        ...
    
    def edit_file(self, filename: str) -> None:
        ...
    
    def edit(self, text: t.Optional[t.AnyStr]) -> t.Optional[t.AnyStr]:
        ...
    


def open_url(url: str, wait: bool = ..., locate: bool = ...) -> int:
    ...

if WIN:
    @contextlib.contextmanager
    def raw_terminal() -> t.Iterator[int]:
        ...
    
    def getchar(echo: bool) -> str:
        ...
    
else:
    @contextlib.contextmanager
    def raw_terminal() -> t.Iterator[int]:
        ...
    
    def getchar(echo: bool) -> str:
        ...
    
