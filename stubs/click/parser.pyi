"""
This type stub file was generated by pyright.
"""

import typing as t
from .core import Argument as CoreArgument, Context, Option as CoreOption, Parameter as CoreParameter

"""
This module started out as largely a copy paste from the stdlib's
optparse module with the features removed that we do not need from
optparse because we implement them in Click on a higher level (for
instance type handling, help formatting and a lot more).

The plan is to remove more and more from here over time.

The reason this is a different module and not optparse from the stdlib
is that there are differences in 2.x and 3.x about the error messages
generated and optparse in the stdlib uses gettext for no good reason
and might cause us issues.

Click uses parts of optparse written by Gregory P. Ward and maintained
by the Python Software Foundation. This is limited to code in parser.py.

Copyright 2001-2006 Gregory P. Ward. All rights reserved.
Copyright 2002-2006 Python Software Foundation. All rights reserved.
"""
if t.TYPE_CHECKING:
    ...
V = ...
_flag_needs_value = ...
def split_opt(opt: str) -> t.Tuple[str, str]:
    ...

def normalize_opt(opt: str, ctx: t.Optional[Context]) -> str:
    ...

def split_arg_string(string: str) -> t.List[str]:
    """Split an argument string as with :func:`shlex.split`, but don't
    fail if the string is incomplete. Ignores a missing closing quote or
    incomplete escape sequence and uses the partial token as-is.

    .. code-block:: python

        split_arg_string("example 'my file")
        ["example", "my file"]

        split_arg_string("example my\\")
        ["example", "my"]

    :param string: String to split.
    """
    ...

class Option:
    def __init__(self, obj: CoreOption, opts: t.Sequence[str], dest: t.Optional[str], action: t.Optional[str] = ..., nargs: int = ..., const: t.Optional[t.Any] = ...) -> None:
        ...
    
    @property
    def takes_value(self) -> bool:
        ...
    
    def process(self, value: str, state: ParsingState) -> None:
        ...
    


class Argument:
    def __init__(self, obj: CoreArgument, dest: t.Optional[str], nargs: int = ...) -> None:
        ...
    
    def process(self, value: t.Union[t.Optional[str], t.Sequence[t.Optional[str]]], state: ParsingState) -> None:
        ...
    


class ParsingState:
    def __init__(self, rargs: t.List[str]) -> None:
        ...
    


class OptionParser:
    """The option parser is an internal class that is ultimately used to
    parse options and arguments.  It's modelled after optparse and brings
    a similar but vastly simplified API.  It should generally not be used
    directly as the high level Click classes wrap it for you.

    It's not nearly as extensible as optparse or argparse as it does not
    implement features that are implemented on a higher level (such as
    types or defaults).

    :param ctx: optionally the :class:`~click.Context` where this parser
                should go with.
    """
    def __init__(self, ctx: t.Optional[Context] = ...) -> None:
        ...
    
    def add_option(self, obj: CoreOption, opts: t.Sequence[str], dest: t.Optional[str], action: t.Optional[str] = ..., nargs: int = ..., const: t.Optional[t.Any] = ...) -> None:
        """Adds a new option named `dest` to the parser.  The destination
        is not inferred (unlike with optparse) and needs to be explicitly
        provided.  Action can be any of ``store``, ``store_const``,
        ``append``, ``append_const`` or ``count``.

        The `obj` can be used to identify the option in the order list
        that is returned from the parser.
        """
        ...
    
    def add_argument(self, obj: CoreArgument, dest: t.Optional[str], nargs: int = ...) -> None:
        """Adds a positional argument named `dest` to the parser.

        The `obj` can be used to identify the option in the order list
        that is returned from the parser.
        """
        ...
    
    def parse_args(self, args: t.List[str]) -> t.Tuple[t.Dict[str, t.Any], t.List[str], t.List[CoreParameter]]:
        """Parses positional arguments and returns ``(values, args, order)``
        for the parsed options and arguments as well as the leftover
        arguments if there are any.  The order is a list of objects as they
        appear on the command line.  If arguments appear multiple times they
        will be memorized multiple times as well.
        """
        ...
    


