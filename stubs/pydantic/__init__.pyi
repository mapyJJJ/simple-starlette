from typing import Any, ClassVar

import decimal
import enum
import ipaddress
import pathlib
import typing
import uuid
Field: cython_function_or_method
NoneBytes: typing._GenericAlias
NoneStr: typing._GenericAlias
NoneStrBytes: typing._GenericAlias
PrivateAttr: cython_function_or_method
Required: ellipsis
StrBytes: typing._GenericAlias
VERSION: str
compiled: bool
conbytes: cython_function_or_method
condecimal: cython_function_or_method
confloat: cython_function_or_method
conint: cython_function_or_method
conlist: cython_function_or_method
conset: cython_function_or_method
constr: cython_function_or_method
create_model: cython_function_or_method
create_model_from_namedtuple: cython_function_or_method
create_model_from_typeddict: cython_function_or_method
parse_file_as: cython_function_or_method
parse_obj_as: cython_function_or_method
parse_raw_as: cython_function_or_method
root_validator: cython_function_or_method
stricturl: cython_function_or_method
validate_arguments: cython_function_or_method
validate_email: cython_function_or_method
validate_model: cython_function_or_method
validator: cython_function_or_method

class AnyHttpUrl(networks.AnyUrl):
    allowed_schemes: ClassVar[set] = ...

class AnyStrMaxLengthError(errors.PydanticValueError):
    code: ClassVar[str] = ...
    msg_template: ClassVar[str] = ...
    def __init__(self, *args, **kwargs) -> None: ...

class AnyStrMinLengthError(errors.PydanticValueError):
    code: ClassVar[str] = ...
    msg_template: ClassVar[str] = ...
    def __init__(self, *args, **kwargs) -> None: ...

class AnyUrl(str):
    allowed_schemes: ClassVar[None] = ...
    fragment: ClassVar[member_descriptor] = ...
    host: ClassVar[member_descriptor] = ...
    host_type: ClassVar[member_descriptor] = ...
    max_length: ClassVar[int] = ...
    min_length: ClassVar[int] = ...
    password: ClassVar[member_descriptor] = ...
    path: ClassVar[member_descriptor] = ...
    port: ClassVar[member_descriptor] = ...
    query: ClassVar[member_descriptor] = ...
    scheme: ClassVar[member_descriptor] = ...
    strip_whitespace: ClassVar[bool] = ...
    tld: ClassVar[member_descriptor] = ...
    tld_required: ClassVar[bool] = ...
    user: ClassVar[member_descriptor] = ...
    user_required: ClassVar[bool] = ...
    __slots__: ClassVar[tuple] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def build(self, *args, **kwargs) -> Any: ...
    @classmethod
    def validate(self, *args, **kwargs) -> Any: ...
    @classmethod
    def validate_host(self, *args, **kwargs) -> Any: ...
    @classmethod
    def validate_parts(self, *args, **kwargs) -> Any: ...
    @classmethod
    def __get_validators__(self, *args, **kwargs) -> Any: ...
    @classmethod
    def __modify_schema__(self, *args, **kwargs) -> Any: ...

class ArbitraryTypeError(errors.PydanticTypeError):
    code: ClassVar[str] = ...
    msg_template: ClassVar[str] = ...
    def __init__(self, *args, **kwargs) -> None: ...

class BaseConfig:
    class getter_dict(utils.Representation):
        _obj: ClassVar[member_descriptor] = ...
        __hash__: ClassVar[None] = ...
        __slots__: ClassVar[tuple] = ...
        def __init__(self, *args, **kwargs) -> None: ...
        def extra_keys(self, *args, **kwargs) -> Any: ...
        def get(self, *args, **kwargs) -> Any: ...
        def items(self, *args, **kwargs) -> Any: ...
        def keys(self, *args, **kwargs) -> Any: ...
        def values(self, *args, **kwargs) -> Any: ...
        def __contains__(self, other) -> Any: ...
        def __eq__(self, other) -> Any: ...
        def __getitem__(self, index) -> Any: ...
        def __iter__(self) -> Any: ...
        def __len__(self) -> Any: ...
        def __repr_args__(self, *args, **kwargs) -> Any: ...
        def __repr_name__(self, *args, **kwargs) -> Any: ...
    alias_generator: ClassVar[None] = ...
    allow_mutation: ClassVar[bool] = ...
    allow_population_by_field_name: ClassVar[bool] = ...
    anystr_lower: ClassVar[bool] = ...
    anystr_strip_whitespace: ClassVar[bool] = ...
    arbitrary_types_allowed: ClassVar[bool] = ...
    copy_on_model_validation: ClassVar[bool] = ...
    error_msg_templates: ClassVar[dict] = ...
    extra: ClassVar[main.Extra] = ...
    fields: ClassVar[dict] = ...
    frozen: ClassVar[bool] = ...
    json_dumps: ClassVar[function] = ...
    json_encoders: ClassVar[dict] = ...
    json_loads: ClassVar[function] = ...
    keep_untouched: ClassVar[tuple] = ...
    max_anystr_length: ClassVar[None] = ...
    min_anystr_length: ClassVar[None] = ...
    orm_mode: ClassVar[bool] = ...
    schema_extra: ClassVar[dict] = ...
    title: ClassVar[None] = ...
    underscore_attrs_are_private: ClassVar[bool] = ...
    use_enum_values: ClassVar[bool] = ...
    validate_all: ClassVar[bool] = ...
    validate_assignment: ClassVar[bool] = ...
    @classmethod
    def get_field_info(self, *args, **kwargs) -> Any: ...
    @classmethod
    def prepare_field(self, *args, **kwargs) -> Any: ...

class BaseModel(utils.Representation):
    class Config:
        class getter_dict(utils.Representation):
            _obj: ClassVar[member_descriptor] = ...
            __hash__: ClassVar[None] = ...
            __slots__: ClassVar[tuple] = ...
            def __init__(self, *args, **kwargs) -> None: ...
            def extra_keys(self, *args, **kwargs) -> Any: ...
            def get(self, *args, **kwargs) -> Any: ...
            def items(self, *args, **kwargs) -> Any: ...
            def keys(self, *args, **kwargs) -> Any: ...
            def values(self, *args, **kwargs) -> Any: ...
            def __contains__(self, other) -> Any: ...
            def __eq__(self, other) -> Any: ...
            def __getitem__(self, index) -> Any: ...
            def __iter__(self) -> Any: ...
            def __len__(self) -> Any: ...
            def __repr_args__(self, *args, **kwargs) -> Any: ...
            def __repr_name__(self, *args, **kwargs) -> Any: ...
        alias_generator: ClassVar[None] = ...
        allow_mutation: ClassVar[bool] = ...
        allow_population_by_field_name: ClassVar[bool] = ...
        anystr_lower: ClassVar[bool] = ...
        anystr_strip_whitespace: ClassVar[bool] = ...
        arbitrary_types_allowed: ClassVar[bool] = ...
        copy_on_model_validation: ClassVar[bool] = ...
        error_msg_templates: ClassVar[dict] = ...
        extra: ClassVar[main.Extra] = ...
        fields: ClassVar[dict] = ...
        frozen: ClassVar[bool] = ...
        json_dumps: ClassVar[function] = ...
        json_encoders: ClassVar[dict] = ...
        json_loads: ClassVar[function] = ...
        keep_untouched: ClassVar[tuple] = ...
        max_anystr_length: ClassVar[None] = ...
        min_anystr_length: ClassVar[None] = ...
        orm_mode: ClassVar[bool] = ...
        schema_extra: ClassVar[dict] = ...
        title: ClassVar[None] = ...
        underscore_attrs_are_private: ClassVar[bool] = ...
        use_enum_values: ClassVar[bool] = ...
        validate_all: ClassVar[bool] = ...
        validate_assignment: ClassVar[bool] = ...
        @classmethod
        def get_field_info(self, *args, **kwargs) -> Any: ...
        @classmethod
        def prepare_field(self, *args, **kwargs) -> Any: ...

    class __config__(main.BaseConfig):
        json_encoders: ClassVar[dict] = ...
    _abc_impl: ClassVar[_abc_data] = ...
    __abstractmethods__: ClassVar[frozenset] = ...
    __class_vars__: ClassVar[set] = ...
    __custom_root_type__: ClassVar[bool] = ...
    __fields__: ClassVar[dict] = ...
    __fields_set__: ClassVar[member_descriptor] = ...
    __hash__: ClassVar[None] = ...
    __post_root_validators__: ClassVar[list] = ...
    __pre_root_validators__: ClassVar[list] = ...
    __private_attributes__: ClassVar[dict] = ...
    __schema_cache__: ClassVar[dict] = ...
    __slots__: ClassVar[set] = ...
    __validators__: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def _calculate_keys(self, *args, **kwargs) -> Any: ...
    @classmethod
    def _decompose_class(self, *args, **kwargs) -> Any: ...
    @classmethod
    def _enforce_dict_if_root(self, *args, **kwargs) -> Any: ...
    @classmethod
    def _get_value(self, *args, **kwargs) -> Any: ...
    def _init_private_attributes(self, *args, **kwargs) -> Any: ...
    def _iter(self, *args, **kwargs) -> Any: ...
    @classmethod
    def construct(self, *args, **kwargs) -> Any: ...
    def copy(self, *args, **kwargs) -> Any: ...
    def dict(self, *args, **kwargs) -> Any: ...
    @classmethod
    def from_orm(self, *args, **kwargs) -> Any: ...
    def json(self, *args, **kwargs) -> Any: ...
    @classmethod
    def parse_file(self, *args, **kwargs) -> Any: ...
    @classmethod
    def parse_obj(self, *args, **kwargs) -> Any: ...
    @classmethod
    def parse_raw(self, *args, **kwargs) -> Any: ...
    @classmethod
    def schema(self, *args, **kwargs) -> Any: ...
    @classmethod
    def schema_json(self, *args, **kwargs) -> Any: ...
    @classmethod
    def update_forward_refs(self, *args, **kwargs) -> Any: ...
    @classmethod
    def validate(self, *args, **kwargs) -> Any: ...
    def __eq__(self, other) -> Any: ...
    @classmethod
    def __get_validators__(self, *args, **kwargs) -> Any: ...
    def __getstate__(self) -> Any: ...
    def __iter__(self) -> Any: ...
    def __json_encoder__(self, *args, **kwargs) -> Any: ...
    def __repr_args__(self, *args, **kwargs) -> Any: ...
    def __setattr__(self, name, value) -> Any: ...
    def __setstate__(self, state) -> Any: ...
    def __signature__(self, *args, **kwargs) -> Any: ...

class BaseSettings(main.BaseModel):
    class Config(main.BaseConfig):
        arbitrary_types_allowed: ClassVar[bool] = ...
        case_sensitive: ClassVar[bool] = ...
        env_file: ClassVar[None] = ...
        env_file_encoding: ClassVar[None] = ...
        env_prefix: ClassVar[str] = ...
        extra: ClassVar[main.Extra] = ...
        secrets_dir: ClassVar[None] = ...
        validate_all: ClassVar[bool] = ...
        @classmethod
        def customise_sources(self, *args, **kwargs) -> Any: ...
        @classmethod
        def prepare_field(self, *args, **kwargs) -> Any: ...

    class __config__(env_settings.BaseSettings.Config):
        json_encoders: ClassVar[dict] = ...
    _abc_impl: ClassVar[_abc_data] = ...
    __abstractmethods__: ClassVar[frozenset] = ...
    __class_vars__: ClassVar[set] = ...
    __custom_root_type__: ClassVar[bool] = ...
    __fields__: ClassVar[dict] = ...
    __hash__: ClassVar[None] = ...
    __post_root_validators__: ClassVar[list] = ...
    __pre_root_validators__: ClassVar[list] = ...
    __private_attributes__: ClassVar[dict] = ...
    __schema_cache__: ClassVar[dict] = ...
    __slots__: ClassVar[set] = ...
    __validators__: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def _build_values(self, *args, **kwargs) -> Any: ...
    def __json_encoder__(self, *args, **kwargs) -> Any: ...
    def __signature__(self, *args, **kwargs) -> Any: ...

class BoolError(errors.PydanticTypeError):
    msg_template: ClassVar[str] = ...

class ByteSize(int):
    def human_readable(self, *args, **kwargs) -> Any: ...
    def to(self, *args, **kwargs) -> Any: ...
    @classmethod
    def validate(self, *args, **kwargs) -> Any: ...
    @classmethod
    def __get_validators__(self, *args, **kwargs) -> Any: ...

class BytesError(errors.PydanticTypeError):
    msg_template: ClassVar[str] = ...

class CallableError(errors.PydanticTypeError):
    msg_template: ClassVar[str] = ...

class ClassError(errors.PydanticTypeError):
    code: ClassVar[str] = ...
    msg_template: ClassVar[str] = ...

class ColorError(errors.PydanticValueError):
    msg_template: ClassVar[str] = ...

class ConfigError(RuntimeError): ...

class ConstrainedBytes(bytes):
    max_length: ClassVar[None] = ...
    min_length: ClassVar[None] = ...
    strict: ClassVar[bool] = ...
    strip_whitespace: ClassVar[bool] = ...
    to_lower: ClassVar[bool] = ...
    @classmethod
    def __get_validators__(self, *args, **kwargs) -> Any: ...
    @classmethod
    def __modify_schema__(self, *args, **kwargs) -> Any: ...

class ConstrainedDecimal(decimal.Decimal):
    decimal_places: ClassVar[None] = ...
    ge: ClassVar[None] = ...
    gt: ClassVar[None] = ...
    le: ClassVar[None] = ...
    lt: ClassVar[None] = ...
    max_digits: ClassVar[None] = ...
    multiple_of: ClassVar[None] = ...
    @classmethod
    def validate(self, *args, **kwargs) -> Any: ...
    @classmethod
    def __get_validators__(self, *args, **kwargs) -> Any: ...
    @classmethod
    def __modify_schema__(self, *args, **kwargs) -> Any: ...

class ConstrainedFloat(float):
    ge: ClassVar[None] = ...
    gt: ClassVar[None] = ...
    le: ClassVar[None] = ...
    lt: ClassVar[None] = ...
    multiple_of: ClassVar[None] = ...
    strict: ClassVar[bool] = ...
    @classmethod
    def __get_validators__(self, *args, **kwargs) -> Any: ...
    @classmethod
    def __modify_schema__(self, *args, **kwargs) -> Any: ...

class ConstrainedInt(int):
    ge: ClassVar[None] = ...
    gt: ClassVar[None] = ...
    le: ClassVar[None] = ...
    lt: ClassVar[None] = ...
    multiple_of: ClassVar[None] = ...
    strict: ClassVar[bool] = ...
    @classmethod
    def __get_validators__(self, *args, **kwargs) -> Any: ...
    @classmethod
    def __modify_schema__(self, *args, **kwargs) -> Any: ...

class ConstrainedList(list):
    class __origin__:
        __hash__: ClassVar[None] = ...
        def __init__(self, *args, **kwargs) -> None: ...
        def append(self, *args, **kwargs) -> Any: ...
        def clear(self, *args, **kwargs) -> Any: ...
        def copy(self, *args, **kwargs) -> Any: ...
        def count(self, *args, **kwargs) -> Any: ...
        def extend(self, *args, **kwargs) -> Any: ...
        def index(self, *args, **kwargs) -> Any: ...
        def insert(self, *args, **kwargs) -> Any: ...
        def pop(self, *args, **kwargs) -> Any: ...
        def remove(self, *args, **kwargs) -> Any: ...
        def reverse(self, *args, **kwargs) -> Any: ...
        def sort(self, *args, **kwargs) -> Any: ...
        def __add__(self, other) -> Any: ...
        def __contains__(self, other) -> Any: ...
        def __delitem__(self, other) -> Any: ...
        def __eq__(self, other) -> Any: ...
        def __ge__(self, other) -> Any: ...
        def __getitem__(y) -> Any: ...
        def __gt__(self, other) -> Any: ...
        def __iadd__(self, other) -> Any: ...
        def __imul__(self, other) -> Any: ...
        def __iter__(self) -> Any: ...
        def __le__(self, other) -> Any: ...
        def __len__(self) -> Any: ...
        def __lt__(self, other) -> Any: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> Any: ...
        def __reversed__(self) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __setitem__(self, index, object) -> Any: ...
        def __sizeof__(self) -> Any: ...
    max_items: ClassVar[None] = ...
    min_items: ClassVar[None] = ...
    @classmethod
    def list_length_validator(self, *args, **kwargs) -> Any: ...
    @classmethod
    def __get_validators__(self, *args, **kwargs) -> Any: ...
    @classmethod
    def __modify_schema__(self, *args, **kwargs) -> Any: ...

class ConstrainedSet(set):
    class __origin__:
        __hash__: ClassVar[None] = ...
        def __init__(self, *args, **kwargs) -> None: ...
        def add(self, *args, **kwargs) -> Any: ...
        def clear(self, *args, **kwargs) -> Any: ...
        def copy(self, *args, **kwargs) -> Any: ...
        def difference(self, *args, **kwargs) -> Any: ...
        def difference_update(self, *args, **kwargs) -> Any: ...
        def discard(self, *args, **kwargs) -> Any: ...
        def intersection(self, *args, **kwargs) -> Any: ...
        def intersection_update(self, *args, **kwargs) -> Any: ...
        def isdisjoint(self, *args, **kwargs) -> Any: ...
        def issubset(self, *args, **kwargs) -> Any: ...
        def issuperset(self, *args, **kwargs) -> Any: ...
        def pop(self, *args, **kwargs) -> Any: ...
        def remove(self, *args, **kwargs) -> Any: ...
        def symmetric_difference(self, *args, **kwargs) -> Any: ...
        def symmetric_difference_update(self, *args, **kwargs) -> Any: ...
        def union(self, *args, **kwargs) -> Any: ...
        def update(self, *args, **kwargs) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __contains__(y) -> Any: ...
        def __eq__(self, other) -> Any: ...
        def __ge__(self, other) -> Any: ...
        def __gt__(self, other) -> Any: ...
        def __iand__(self, other) -> Any: ...
        def __ior__(self, other) -> Any: ...
        def __isub__(self, other) -> Any: ...
        def __iter__(self) -> Any: ...
        def __ixor__(self, other) -> Any: ...
        def __le__(self, other) -> Any: ...
        def __len__(self) -> Any: ...
        def __lt__(self, other) -> Any: ...
        def __ne__(self, other) -> Any: ...
        def __or__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __reduce__(self) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sizeof__(self) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __xor__(self, other) -> Any: ...
    max_items: ClassVar[None] = ...
    min_items: ClassVar[None] = ...
    @classmethod
    def set_length_validator(self, *args, **kwargs) -> Any: ...
    @classmethod
    def __get_validators__(self, *args, **kwargs) -> Any: ...
    @classmethod
    def __modify_schema__(self, *args, **kwargs) -> Any: ...

class ConstrainedStr(str):
    curtail_length: ClassVar[None] = ...
    max_length: ClassVar[None] = ...
    min_length: ClassVar[None] = ...
    regex: ClassVar[None] = ...
    strict: ClassVar[bool] = ...
    strip_whitespace: ClassVar[bool] = ...
    to_lower: ClassVar[bool] = ...
    @classmethod
    def validate(self, *args, **kwargs) -> Any: ...
    @classmethod
    def __get_validators__(self, *args, **kwargs) -> Any: ...
    @classmethod
    def __modify_schema__(self, *args, **kwargs) -> Any: ...

class DataclassTypeError(errors.PydanticTypeError):
    code: ClassVar[str] = ...
    msg_template: ClassVar[str] = ...

class DateError(errors.PydanticValueError):
    msg_template: ClassVar[str] = ...

class DateTimeError(errors.PydanticValueError):
    msg_template: ClassVar[str] = ...

class DecimalError(errors.PydanticTypeError):
    msg_template: ClassVar[str] = ...

class DecimalIsNotFiniteError(errors.PydanticValueError):
    code: ClassVar[str] = ...
    msg_template: ClassVar[str] = ...

class DecimalMaxDigitsError(errors.PydanticValueError):
    code: ClassVar[str] = ...
    msg_template: ClassVar[str] = ...
    def __init__(self, *args, **kwargs) -> None: ...

class DecimalMaxPlacesError(errors.PydanticValueError):
    code: ClassVar[str] = ...
    msg_template: ClassVar[str] = ...
    def __init__(self, *args, **kwargs) -> None: ...

class DecimalWholeDigitsError(errors.PydanticValueError):
    code: ClassVar[str] = ...
    msg_template: ClassVar[str] = ...
    def __init__(self, *args, **kwargs) -> None: ...

class DictError(errors.PydanticTypeError):
    msg_template: ClassVar[str] = ...

class DirectoryPath(pathlib.Path):
    @classmethod
    def validate(self, *args, **kwargs) -> Any: ...
    @classmethod
    def __get_validators__(self, *args, **kwargs) -> Any: ...
    @classmethod
    def __modify_schema__(self, *args, **kwargs) -> Any: ...

class DurationError(errors.PydanticValueError):
    msg_template: ClassVar[str] = ...

class EmailError(errors.PydanticValueError):
    msg_template: ClassVar[str] = ...

class EmailStr(str):
    @classmethod
    def validate(self, *args, **kwargs) -> Any: ...
    @classmethod
    def __get_validators__(self, *args, **kwargs) -> Any: ...
    @classmethod
    def __modify_schema__(self, *args, **kwargs) -> Any: ...

class EnumError(errors.PydanticTypeError):
    code: ClassVar[str] = ...
    msg_template: ClassVar[str] = ...

class EnumMemberError(errors.PydanticTypeError):
    code: ClassVar[str] = ...

class Extra(str, enum.Enum):
    class _member_type_:
        @classmethod
        def __init__(self, *args, **kwargs) -> None: ...
        def capitalize(self, *args, **kwargs) -> Any: ...
        def casefold(self, *args, **kwargs) -> Any: ...
        def center(self, *args, **kwargs) -> Any: ...
        def count(self, *args, **kwargs) -> Any: ...
        def encode(self, *args, **kwargs) -> Any: ...
        def endswith(self, *args, **kwargs) -> Any: ...
        def expandtabs(self, *args, **kwargs) -> Any: ...
        def find(self, *args, **kwargs) -> Any: ...
        def format(*args, **kwargs) -> str: ...
        def format_map(mapping) -> str: ...
        def index(self, *args, **kwargs) -> Any: ...
        def isalnum(self, *args, **kwargs) -> Any: ...
        def isalpha(self, *args, **kwargs) -> Any: ...
        def isascii(self, *args, **kwargs) -> Any: ...
        def isdecimal(self, *args, **kwargs) -> Any: ...
        def isdigit(self, *args, **kwargs) -> Any: ...
        def isidentifier(self, *args, **kwargs) -> Any: ...
        def islower(self, *args, **kwargs) -> Any: ...
        def isnumeric(self, *args, **kwargs) -> Any: ...
        def isprintable(self, *args, **kwargs) -> Any: ...
        def isspace(self, *args, **kwargs) -> Any: ...
        def istitle(self, *args, **kwargs) -> Any: ...
        def isupper(self, *args, **kwargs) -> Any: ...
        def join(self, *args, **kwargs) -> Any: ...
        def ljust(self, *args, **kwargs) -> Any: ...
        def lower(self, *args, **kwargs) -> Any: ...
        def lstrip(self, *args, **kwargs) -> Any: ...
        def maketrans(self, *args, **kwargs) -> Any: ...
        def partition(self, *args, **kwargs) -> Any: ...
        def replace(self, *args, **kwargs) -> Any: ...
        def rfind(self, *args, **kwargs) -> Any: ...
        def rindex(self, *args, **kwargs) -> Any: ...
        def rjust(self, *args, **kwargs) -> Any: ...
        def rpartition(self, *args, **kwargs) -> Any: ...
        def rsplit(self, *args, **kwargs) -> Any: ...
        def rstrip(self, *args, **kwargs) -> Any: ...
        def split(self, *args, **kwargs) -> Any: ...
        def splitlines(self, *args, **kwargs) -> Any: ...
        def startswith(self, *args, **kwargs) -> Any: ...
        def strip(self, *args, **kwargs) -> Any: ...
        def swapcase(self, *args, **kwargs) -> Any: ...
        def title(self, *args, **kwargs) -> Any: ...
        def translate(self, *args, **kwargs) -> Any: ...
        def upper(self, *args, **kwargs) -> Any: ...
        def zfill(self, *args, **kwargs) -> Any: ...
        def __add__(self, other) -> Any: ...
        def __contains__(self, other) -> Any: ...
        def __eq__(self, other) -> Any: ...
        def __format__(self, *args, **kwargs) -> Any: ...
        def __ge__(self, other) -> Any: ...
        def __getitem__(self, index) -> Any: ...
        def __getnewargs__(self, *args, **kwargs) -> Any: ...
        def __gt__(self, other) -> Any: ...
        def __hash__(self) -> Any: ...
        def __iter__(self) -> Any: ...
        def __le__(self, other) -> Any: ...
        def __len__(self) -> Any: ...
        def __lt__(self, other) -> Any: ...
        def __mod__(self, other) -> Any: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> Any: ...
        def __rmod__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __sizeof__(self) -> Any: ...
    __new__: ClassVar[function] = ...
    _generate_next_value_: ClassVar[function] = ...
    _member_map_: ClassVar[dict] = ...
    _member_names_: ClassVar[list] = ...
    _value2member_map_: ClassVar[dict] = ...
    allow: ClassVar[main.Extra] = ...
    forbid: ClassVar[main.Extra] = ...
    ignore: ClassVar[main.Extra] = ...
    __format__: ClassVar[function] = ...

class ExtraError(errors.PydanticValueError):
    msg_template: ClassVar[str] = ...

class FilePath(pathlib.Path):
    @classmethod
    def validate(self, *args, **kwargs) -> Any: ...
    @classmethod
    def __get_validators__(self, *args, **kwargs) -> Any: ...
    @classmethod
    def __modify_schema__(self, *args, **kwargs) -> Any: ...

class FloatError(errors.PydanticTypeError):
    msg_template: ClassVar[str] = ...

class FrozenSetError(errors.PydanticTypeError):
    msg_template: ClassVar[str] = ...

class HashableError(errors.PydanticTypeError):
    msg_template: ClassVar[str] = ...

class HttpUrl(networks.AnyUrl):
    allowed_schemes: ClassVar[set] = ...
    max_length: ClassVar[int] = ...
    tld_required: ClassVar[bool] = ...

class IPv4AddressError(errors.PydanticValueError):
    msg_template: ClassVar[str] = ...

class IPv4InterfaceError(errors.PydanticValueError):
    msg_template: ClassVar[str] = ...

class IPv4NetworkError(errors.PydanticValueError):
    msg_template: ClassVar[str] = ...

class IPv6AddressError(errors.PydanticValueError):
    msg_template: ClassVar[str] = ...

class IPv6InterfaceError(errors.PydanticValueError):
    msg_template: ClassVar[str] = ...

class IPv6NetworkError(errors.PydanticValueError):
    msg_template: ClassVar[str] = ...

class IPvAnyAddress(ipaddress._BaseAddress):
    @classmethod
    def validate(self, *args, **kwargs) -> Any: ...
    @classmethod
    def __get_validators__(self, *args, **kwargs) -> Any: ...
    @classmethod
    def __modify_schema__(self, *args, **kwargs) -> Any: ...

class IPvAnyAddressError(errors.PydanticValueError):
    msg_template: ClassVar[str] = ...

class IPvAnyInterface(ipaddress._BaseAddress):
    @classmethod
    def validate(self, *args, **kwargs) -> Any: ...
    @classmethod
    def __get_validators__(self, *args, **kwargs) -> Any: ...
    @classmethod
    def __modify_schema__(self, *args, **kwargs) -> Any: ...

class IPvAnyInterfaceError(errors.PydanticValueError):
    msg_template: ClassVar[str] = ...

class IPvAnyNetwork(ipaddress._BaseNetwork):
    @classmethod
    def validate(self, *args, **kwargs) -> Any: ...
    @classmethod
    def __get_validators__(self, *args, **kwargs) -> Any: ...
    @classmethod
    def __modify_schema__(self, *args, **kwargs) -> Any: ...

class IPvAnyNetworkError(errors.PydanticValueError):
    msg_template: ClassVar[str] = ...

class IntEnumError(errors.PydanticTypeError):
    code: ClassVar[str] = ...
    msg_template: ClassVar[str] = ...

class IntegerError(errors.PydanticTypeError):
    msg_template: ClassVar[str] = ...

class InvalidByteSize(errors.PydanticValueError):
    msg_template: ClassVar[str] = ...

class InvalidByteSizeUnit(errors.PydanticValueError):
    msg_template: ClassVar[str] = ...

class InvalidLengthForBrand(errors.PydanticValueError):
    code: ClassVar[str] = ...
    msg_template: ClassVar[str] = ...

class Json:
    @classmethod
    def __modify_schema__(self, *args, **kwargs) -> Any: ...

class JsonError(errors.PydanticValueError):
    msg_template: ClassVar[str] = ...

class JsonTypeError(errors.PydanticTypeError):
    code: ClassVar[str] = ...
    msg_template: ClassVar[str] = ...

class JsonWrapper: ...

class ListError(errors.PydanticTypeError):
    msg_template: ClassVar[str] = ...

class ListMaxLengthError(errors.PydanticValueError):
    code: ClassVar[str] = ...
    msg_template: ClassVar[str] = ...
    def __init__(self, *args, **kwargs) -> None: ...

class ListMinLengthError(errors.PydanticValueError):
    code: ClassVar[str] = ...
    msg_template: ClassVar[str] = ...
    def __init__(self, *args, **kwargs) -> None: ...

class LuhnValidationError(errors.PydanticValueError):
    code: ClassVar[str] = ...
    msg_template: ClassVar[str] = ...

class MissingError(errors.PydanticValueError):
    msg_template: ClassVar[str] = ...

class NameEmail(utils.Representation):
    email: ClassVar[member_descriptor] = ...
    name: ClassVar[member_descriptor] = ...
    __hash__: ClassVar[None] = ...
    __slots__: ClassVar[tuple] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def validate(self, *args, **kwargs) -> Any: ...
    def __eq__(self, other) -> Any: ...
    @classmethod
    def __get_validators__(self, *args, **kwargs) -> Any: ...
    @classmethod
    def __modify_schema__(self, *args, **kwargs) -> Any: ...

class NegativeFloat(types.ConstrainedFloat):
    lt: ClassVar[int] = ...

class NegativeInt(types.ConstrainedInt):
    lt: ClassVar[int] = ...

class NonNegativeFloat(types.ConstrainedFloat):
    ge: ClassVar[int] = ...

class NonNegativeInt(types.ConstrainedInt):
    ge: ClassVar[int] = ...

class NonPositiveFloat(types.ConstrainedFloat):
    le: ClassVar[int] = ...

class NonPositiveInt(types.ConstrainedInt):
    le: ClassVar[int] = ...

class NoneIsAllowedError(errors.PydanticTypeError):
    code: ClassVar[str] = ...
    msg_template: ClassVar[str] = ...

class NoneIsNotAllowedError(errors.PydanticTypeError):
    code: ClassVar[str] = ...
    msg_template: ClassVar[str] = ...

class NotDigitError(errors.PydanticValueError):
    code: ClassVar[str] = ...
    msg_template: ClassVar[str] = ...

class NotNoneError(errors.PydanticTypeError):
    code: ClassVar[str] = ...
    msg_template: ClassVar[str] = ...

class NumberNotGeError(errors._NumberBoundError):
    code: ClassVar[str] = ...
    msg_template: ClassVar[str] = ...

class NumberNotGtError(errors._NumberBoundError):
    code: ClassVar[str] = ...
    msg_template: ClassVar[str] = ...

class NumberNotLeError(errors._NumberBoundError):
    code: ClassVar[str] = ...
    msg_template: ClassVar[str] = ...

class NumberNotLtError(errors._NumberBoundError):
    code: ClassVar[str] = ...
    msg_template: ClassVar[str] = ...

class NumberNotMultipleError(errors.PydanticValueError):
    code: ClassVar[str] = ...
    msg_template: ClassVar[str] = ...
    def __init__(self, *args, **kwargs) -> None: ...

class PathError(errors.PydanticTypeError):
    msg_template: ClassVar[str] = ...

class PathNotADirectoryError(errors._PathValueError):
    code: ClassVar[str] = ...
    msg_template: ClassVar[str] = ...

class PathNotAFileError(errors._PathValueError):
    code: ClassVar[str] = ...
    msg_template: ClassVar[str] = ...

class PathNotExistsError(errors._PathValueError):
    code: ClassVar[str] = ...
    msg_template: ClassVar[str] = ...

class PatternError(errors.PydanticValueError):
    code: ClassVar[str] = ...
    msg_template: ClassVar[str] = ...

class PaymentCardNumber(str):
    max_length: ClassVar[int] = ...
    min_length: ClassVar[int] = ...
    strip_whitespace: ClassVar[bool] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def _get_brand(self, *args, **kwargs) -> Any: ...
    @classmethod
    def validate_digits(self, *args, **kwargs) -> Any: ...
    @classmethod
    def validate_length_for_brand(self, *args, **kwargs) -> Any: ...
    @classmethod
    def validate_luhn_check_digit(self, *args, **kwargs) -> Any: ...
    @classmethod
    def __get_validators__(self, *args, **kwargs) -> Any: ...
    @property
    def masked(self) -> Any: ...

class PositiveFloat(types.ConstrainedFloat):
    gt: ClassVar[int] = ...

class PositiveInt(types.ConstrainedInt):
    gt: ClassVar[int] = ...

class PostgresDsn(networks.AnyUrl):
    allowed_schemes: ClassVar[set] = ...
    user_required: ClassVar[bool] = ...

class Protocol(str, enum.Enum):
    class _member_type_:
        @classmethod
        def __init__(self, *args, **kwargs) -> None: ...
        def capitalize(self, *args, **kwargs) -> Any: ...
        def casefold(self, *args, **kwargs) -> Any: ...
        def center(self, *args, **kwargs) -> Any: ...
        def count(self, *args, **kwargs) -> Any: ...
        def encode(self, *args, **kwargs) -> Any: ...
        def endswith(self, *args, **kwargs) -> Any: ...
        def expandtabs(self, *args, **kwargs) -> Any: ...
        def find(self, *args, **kwargs) -> Any: ...
        def format(*args, **kwargs) -> str: ...
        def format_map(mapping) -> str: ...
        def index(self, *args, **kwargs) -> Any: ...
        def isalnum(self, *args, **kwargs) -> Any: ...
        def isalpha(self, *args, **kwargs) -> Any: ...
        def isascii(self, *args, **kwargs) -> Any: ...
        def isdecimal(self, *args, **kwargs) -> Any: ...
        def isdigit(self, *args, **kwargs) -> Any: ...
        def isidentifier(self, *args, **kwargs) -> Any: ...
        def islower(self, *args, **kwargs) -> Any: ...
        def isnumeric(self, *args, **kwargs) -> Any: ...
        def isprintable(self, *args, **kwargs) -> Any: ...
        def isspace(self, *args, **kwargs) -> Any: ...
        def istitle(self, *args, **kwargs) -> Any: ...
        def isupper(self, *args, **kwargs) -> Any: ...
        def join(self, *args, **kwargs) -> Any: ...
        def ljust(self, *args, **kwargs) -> Any: ...
        def lower(self, *args, **kwargs) -> Any: ...
        def lstrip(self, *args, **kwargs) -> Any: ...
        def maketrans(self, *args, **kwargs) -> Any: ...
        def partition(self, *args, **kwargs) -> Any: ...
        def replace(self, *args, **kwargs) -> Any: ...
        def rfind(self, *args, **kwargs) -> Any: ...
        def rindex(self, *args, **kwargs) -> Any: ...
        def rjust(self, *args, **kwargs) -> Any: ...
        def rpartition(self, *args, **kwargs) -> Any: ...
        def rsplit(self, *args, **kwargs) -> Any: ...
        def rstrip(self, *args, **kwargs) -> Any: ...
        def split(self, *args, **kwargs) -> Any: ...
        def splitlines(self, *args, **kwargs) -> Any: ...
        def startswith(self, *args, **kwargs) -> Any: ...
        def strip(self, *args, **kwargs) -> Any: ...
        def swapcase(self, *args, **kwargs) -> Any: ...
        def title(self, *args, **kwargs) -> Any: ...
        def translate(self, *args, **kwargs) -> Any: ...
        def upper(self, *args, **kwargs) -> Any: ...
        def zfill(self, *args, **kwargs) -> Any: ...
        def __add__(self, other) -> Any: ...
        def __contains__(self, other) -> Any: ...
        def __eq__(self, other) -> Any: ...
        def __format__(self, *args, **kwargs) -> Any: ...
        def __ge__(self, other) -> Any: ...
        def __getitem__(self, index) -> Any: ...
        def __getnewargs__(self, *args, **kwargs) -> Any: ...
        def __gt__(self, other) -> Any: ...
        def __hash__(self) -> Any: ...
        def __iter__(self) -> Any: ...
        def __le__(self, other) -> Any: ...
        def __len__(self) -> Any: ...
        def __lt__(self, other) -> Any: ...
        def __mod__(self, other) -> Any: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> Any: ...
        def __rmod__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __sizeof__(self) -> Any: ...
    __new__: ClassVar[function] = ...
    _generate_next_value_: ClassVar[function] = ...
    _member_map_: ClassVar[dict] = ...
    _member_names_: ClassVar[list] = ...
    _value2member_map_: ClassVar[dict] = ...
    json: ClassVar[parse.Protocol] = ...
    pickle: ClassVar[parse.Protocol] = ...
    __format__: ClassVar[function] = ...

class PyObject:
    validate_always: ClassVar[bool] = ...
    @classmethod
    def validate(self, *args, **kwargs) -> Any: ...
    @classmethod
    def __get_validators__(self, *args, **kwargs) -> Any: ...

class PyObjectError(errors.PydanticTypeError):
    msg_template: ClassVar[str] = ...

class PydanticTypeError(errors.PydanticErrorMixin, TypeError): ...

class PydanticValueError(errors.PydanticErrorMixin, ValueError): ...

class RedisDsn(networks.AnyUrl):
    allowed_schemes: ClassVar[set] = ...
    @classmethod
    def validate_parts(self, *args, **kwargs) -> Any: ...

class SecretBytes:
    max_length: ClassVar[None] = ...
    min_length: ClassVar[None] = ...
    __hash__: ClassVar[None] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def display(self, *args, **kwargs) -> Any: ...
    def get_secret_value(self, *args, **kwargs) -> Any: ...
    @classmethod
    def validate(self, *args, **kwargs) -> Any: ...
    def __eq__(self, other) -> Any: ...
    @classmethod
    def __get_validators__(self, *args, **kwargs) -> Any: ...
    def __len__(self) -> Any: ...
    @classmethod
    def __modify_schema__(self, *args, **kwargs) -> Any: ...

class SecretStr:
    max_length: ClassVar[None] = ...
    min_length: ClassVar[None] = ...
    __hash__: ClassVar[None] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def display(self, *args, **kwargs) -> Any: ...
    def get_secret_value(self, *args, **kwargs) -> Any: ...
    @classmethod
    def validate(self, *args, **kwargs) -> Any: ...
    def __eq__(self, other) -> Any: ...
    @classmethod
    def __get_validators__(self, *args, **kwargs) -> Any: ...
    def __len__(self) -> Any: ...
    @classmethod
    def __modify_schema__(self, *args, **kwargs) -> Any: ...

class SequenceError(errors.PydanticTypeError):
    msg_template: ClassVar[str] = ...

class SetError(errors.PydanticTypeError):
    msg_template: ClassVar[str] = ...

class StrError(errors.PydanticTypeError):
    msg_template: ClassVar[str] = ...

class StrRegexError(errors.PydanticValueError):
    code: ClassVar[str] = ...
    msg_template: ClassVar[str] = ...
    def __init__(self, *args, **kwargs) -> None: ...

class StrictBool(int):
    @classmethod
    def validate(self, *args, **kwargs) -> Any: ...
    @classmethod
    def __get_validators__(self, *args, **kwargs) -> Any: ...
    @classmethod
    def __modify_schema__(self, *args, **kwargs) -> Any: ...

class StrictBoolError(errors.PydanticValueError):
    msg_template: ClassVar[str] = ...

class StrictBytes(types.ConstrainedBytes):
    strict: ClassVar[bool] = ...

class StrictFloat(types.ConstrainedFloat):
    strict: ClassVar[bool] = ...

class StrictInt(types.ConstrainedInt):
    strict: ClassVar[bool] = ...

class StrictStr(types.ConstrainedStr):
    strict: ClassVar[bool] = ...

class SubclassError(errors.PydanticTypeError):
    code: ClassVar[str] = ...
    msg_template: ClassVar[str] = ...
    def __init__(self, *args, **kwargs) -> None: ...

class TimeError(errors.PydanticValueError):
    msg_template: ClassVar[str] = ...

class TupleError(errors.PydanticTypeError):
    msg_template: ClassVar[str] = ...

class TupleLengthError(errors.PydanticValueError):
    code: ClassVar[str] = ...
    msg_template: ClassVar[str] = ...
    def __init__(self, *args, **kwargs) -> None: ...

class UUID1(uuid.UUID):
    _required_version: ClassVar[int] = ...
    @classmethod
    def __modify_schema__(self, *args, **kwargs) -> Any: ...

class UUID3(types.UUID1):
    _required_version: ClassVar[int] = ...

class UUID4(types.UUID1):
    _required_version: ClassVar[int] = ...

class UUID5(types.UUID1):
    _required_version: ClassVar[int] = ...

class UUIDError(errors.PydanticTypeError):
    msg_template: ClassVar[str] = ...

class UUIDVersionError(errors.PydanticValueError):
    code: ClassVar[str] = ...
    msg_template: ClassVar[str] = ...
    def __init__(self, *args, **kwargs) -> None: ...

class UrlError(errors.PydanticValueError):
    code: ClassVar[str] = ...

class UrlExtraError(errors.UrlError):
    code: ClassVar[str] = ...
    msg_template: ClassVar[str] = ...

class UrlHostError(errors.UrlError):
    code: ClassVar[str] = ...
    msg_template: ClassVar[str] = ...

class UrlHostTldError(errors.UrlError):
    code: ClassVar[str] = ...
    msg_template: ClassVar[str] = ...

class UrlPortError(errors.UrlError):
    code: ClassVar[str] = ...
    msg_template: ClassVar[str] = ...

class UrlSchemeError(errors.UrlError):
    code: ClassVar[str] = ...
    msg_template: ClassVar[str] = ...

class UrlSchemePermittedError(errors.UrlError):
    code: ClassVar[str] = ...
    msg_template: ClassVar[str] = ...
    def __init__(self, *args, **kwargs) -> None: ...

class UrlUserInfoError(errors.UrlError):
    code: ClassVar[str] = ...
    msg_template: ClassVar[str] = ...

class ValidationError(utils.Representation, ValueError):
    _error_cache: ClassVar[member_descriptor] = ...
    model: ClassVar[member_descriptor] = ...
    raw_errors: ClassVar[member_descriptor] = ...
    __slots__: ClassVar[tuple] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def errors(self, *args, **kwargs) -> Any: ...
    def json(self, *args, **kwargs) -> Any: ...
    def __repr_args__(self, *args, **kwargs) -> Any: ...

class WrongConstantError(errors.PydanticValueError):
    code: ClassVar[str] = ...

class _NumberBoundError(errors.PydanticValueError):
    def __init__(self, *args, **kwargs) -> None: ...

class _PathValueError(errors.PydanticValueError):
    def __init__(self, *args, **kwargs) -> None: ...
