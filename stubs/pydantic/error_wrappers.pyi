from typing import Any, ClassVar, Dict, List, Optional, Tuple, Union

import pydantic.utils
import typing
Any: typing._SpecialForm
Dict: typing._GenericAlias
ErrorList: typing._GenericAlias
Generator: typing._GenericAlias
List: typing._GenericAlias
Optional: typing._SpecialForm
Sequence: typing._GenericAlias
TYPE_CHECKING: bool
Tuple: typing._VariadicGenericAlias
Type: typing._GenericAlias
Union: typing._SpecialForm
_EXC_TYPE_CACHE: dict
_display_error_loc: cython_function_or_method
_display_error_type_and_ctx: cython_function_or_method
_get_exc_type: cython_function_or_method
display_errors: cython_function_or_method
error_dict: cython_function_or_method
flatten_errors: cython_function_or_method
get_exc_type: cython_function_or_method
pydantic_encoder: cython_function_or_method

class ErrorWrapper(pydantic.utils.Representation):
    _loc: ClassVar[member_descriptor] = ...
    exc: ClassVar[member_descriptor] = ...
    __slots__: ClassVar[tuple] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def loc_tuple(self, *args, **kwargs) -> Any: ...
    def __repr_args__(self, *args, **kwargs) -> Any: ...

class Representation:
    __slots__: ClassVar[tuple] = ...
    def __pretty__(self, *args, **kwargs) -> Any: ...
    def __repr_args__(self, *args, **kwargs) -> Any: ...
    def __repr_name__(self, *args, **kwargs) -> Any: ...
    def __repr_str__(self, *args, **kwargs) -> Any: ...

class ValidationError(pydantic.utils.Representation, ValueError):
    _error_cache: ClassVar[member_descriptor] = ...
    model: ClassVar[member_descriptor] = ...
    raw_errors: ClassVar[member_descriptor] = ...
    __slots__: ClassVar[tuple] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def errors(self, *args, **kwargs) -> Any: ...
    def json(self, *args, **kwargs) -> Any: ...
    def __repr_args__(self, *args, **kwargs) -> Any: ...
