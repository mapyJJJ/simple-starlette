from typing import Any, Callable, ClassVar, Union

import enum
import pathlib
import typing
Any: typing._SpecialForm
Callable: typing._VariadicGenericAlias
StrBytes: typing._GenericAlias
Union: typing._SpecialForm
load_file: cython_function_or_method
load_str_bytes: cython_function_or_method

class Enum:
    class _member_type_:
        __class__: ClassVar[getset_descriptor] = ...
        def __init__(self, *args, **kwargs) -> None: ...
        def __delattr__(self, name) -> Any: ...
        def __dir__(self) -> Any: ...
        def __eq__(self, other) -> Any: ...
        def __format__(self, *args, **kwargs) -> Any: ...
        def __ge__(self, other) -> Any: ...
        def __gt__(self, other) -> Any: ...
        def __hash__(self) -> Any: ...
        @classmethod
        def __init_subclass__(self, *args, **kwargs) -> Any: ...
        def __le__(self, other) -> Any: ...
        def __lt__(self, other) -> Any: ...
        def __ne__(self, other) -> Any: ...
        def __reduce__(self) -> Any: ...
        def __reduce_ex__(self, protocol) -> Any: ...
        def __setattr__(self, name, value) -> Any: ...
        def __sizeof__(self) -> Any: ...
        @classmethod
        def __subclasshook__(self, *args, **kwargs) -> Any: ...
    _generate_next_value_: ClassVar[function] = ...
    _member_map_: ClassVar[dict] = ...
    _member_names_: ClassVar[list] = ...
    _value2member_map_: ClassVar[dict] = ...
    __dir__: ClassVar[function] = ...
    __format__: ClassVar[function] = ...
    __hash__: ClassVar[function] = ...
    __reduce_ex__: ClassVar[function] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def _missing_(self, *args, **kwargs) -> Any: ...
    @property
    def name(self) -> Any: ...
    @property
    def value(self) -> Any: ...

class Path(pathlib.PurePath):
    _accessor: ClassVar[member_descriptor] = ...
    _closed: ClassVar[member_descriptor] = ...
    _init: ClassVar[function] = ...
    _make_child_relpath: ClassVar[function] = ...
    _opener: ClassVar[function] = ...
    _raise_closed: ClassVar[function] = ...
    _raw_open: ClassVar[function] = ...
    absolute: ClassVar[function] = ...
    chmod: ClassVar[function] = ...
    exists: ClassVar[function] = ...
    expanduser: ClassVar[function] = ...
    glob: ClassVar[function] = ...
    group: ClassVar[function] = ...
    is_block_device: ClassVar[function] = ...
    is_char_device: ClassVar[function] = ...
    is_dir: ClassVar[function] = ...
    is_fifo: ClassVar[function] = ...
    is_file: ClassVar[function] = ...
    is_mount: ClassVar[function] = ...
    is_socket: ClassVar[function] = ...
    is_symlink: ClassVar[function] = ...
    iterdir: ClassVar[function] = ...
    lchmod: ClassVar[function] = ...
    link_to: ClassVar[function] = ...
    lstat: ClassVar[function] = ...
    mkdir: ClassVar[function] = ...
    open: ClassVar[function] = ...
    owner: ClassVar[function] = ...
    read_bytes: ClassVar[function] = ...
    read_text: ClassVar[function] = ...
    rename: ClassVar[function] = ...
    replace: ClassVar[function] = ...
    resolve: ClassVar[function] = ...
    rglob: ClassVar[function] = ...
    rmdir: ClassVar[function] = ...
    samefile: ClassVar[function] = ...
    stat: ClassVar[function] = ...
    symlink_to: ClassVar[function] = ...
    touch: ClassVar[function] = ...
    unlink: ClassVar[function] = ...
    write_bytes: ClassVar[function] = ...
    write_text: ClassVar[function] = ...
    __enter__: ClassVar[function] = ...
    __exit__: ClassVar[function] = ...
    __slots__: ClassVar[tuple] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def cwd(self, *args, **kwargs) -> Any: ...
    @classmethod
    def home(self, *args, **kwargs) -> Any: ...

class Protocol(str, enum.Enum):
    class _member_type_:
        @classmethod
        def __init__(self, *args, **kwargs) -> None: ...
        def capitalize(self, *args, **kwargs) -> Any: ...
        def casefold(self, *args, **kwargs) -> Any: ...
        def center(self, *args, **kwargs) -> Any: ...
        def count(self, *args, **kwargs) -> Any: ...
        def encode(self, *args, **kwargs) -> Any: ...
        def endswith(self, *args, **kwargs) -> Any: ...
        def expandtabs(self, *args, **kwargs) -> Any: ...
        def find(self, *args, **kwargs) -> Any: ...
        def format(*args, **kwargs) -> str: ...
        def format_map(mapping) -> str: ...
        def index(self, *args, **kwargs) -> Any: ...
        def isalnum(self, *args, **kwargs) -> Any: ...
        def isalpha(self, *args, **kwargs) -> Any: ...
        def isascii(self, *args, **kwargs) -> Any: ...
        def isdecimal(self, *args, **kwargs) -> Any: ...
        def isdigit(self, *args, **kwargs) -> Any: ...
        def isidentifier(self, *args, **kwargs) -> Any: ...
        def islower(self, *args, **kwargs) -> Any: ...
        def isnumeric(self, *args, **kwargs) -> Any: ...
        def isprintable(self, *args, **kwargs) -> Any: ...
        def isspace(self, *args, **kwargs) -> Any: ...
        def istitle(self, *args, **kwargs) -> Any: ...
        def isupper(self, *args, **kwargs) -> Any: ...
        def join(self, *args, **kwargs) -> Any: ...
        def ljust(self, *args, **kwargs) -> Any: ...
        def lower(self, *args, **kwargs) -> Any: ...
        def lstrip(self, *args, **kwargs) -> Any: ...
        def maketrans(self, *args, **kwargs) -> Any: ...
        def partition(self, *args, **kwargs) -> Any: ...
        def replace(self, *args, **kwargs) -> Any: ...
        def rfind(self, *args, **kwargs) -> Any: ...
        def rindex(self, *args, **kwargs) -> Any: ...
        def rjust(self, *args, **kwargs) -> Any: ...
        def rpartition(self, *args, **kwargs) -> Any: ...
        def rsplit(self, *args, **kwargs) -> Any: ...
        def rstrip(self, *args, **kwargs) -> Any: ...
        def split(self, *args, **kwargs) -> Any: ...
        def splitlines(self, *args, **kwargs) -> Any: ...
        def startswith(self, *args, **kwargs) -> Any: ...
        def strip(self, *args, **kwargs) -> Any: ...
        def swapcase(self, *args, **kwargs) -> Any: ...
        def title(self, *args, **kwargs) -> Any: ...
        def translate(self, *args, **kwargs) -> Any: ...
        def upper(self, *args, **kwargs) -> Any: ...
        def zfill(self, *args, **kwargs) -> Any: ...
        def __add__(self, other) -> Any: ...
        def __contains__(self, other) -> Any: ...
        def __eq__(self, other) -> Any: ...
        def __format__(self, *args, **kwargs) -> Any: ...
        def __ge__(self, other) -> Any: ...
        def __getitem__(self, index) -> Any: ...
        def __getnewargs__(self, *args, **kwargs) -> Any: ...
        def __gt__(self, other) -> Any: ...
        def __hash__(self) -> Any: ...
        def __iter__(self) -> Any: ...
        def __le__(self, other) -> Any: ...
        def __len__(self) -> Any: ...
        def __lt__(self, other) -> Any: ...
        def __mod__(self, other) -> Any: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> Any: ...
        def __rmod__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __sizeof__(self) -> Any: ...
    __new__: ClassVar[function] = ...
    _generate_next_value_: ClassVar[function] = ...
    _member_map_: ClassVar[dict] = ...
    _member_names_: ClassVar[list] = ...
    _value2member_map_: ClassVar[dict] = ...
    json: ClassVar[Protocol] = ...
    pickle: ClassVar[Protocol] = ...
    __format__: ClassVar[function] = ...
