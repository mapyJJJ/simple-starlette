from typing import Any, Callable, ClassVar, Tuple, Union

import pathlib
import typing
Any: typing._SpecialForm
Callable: typing._VariadicGenericAlias
Set: typing._GenericAlias
TYPE_CHECKING: bool
Tuple: typing._VariadicGenericAlias
Type: typing._GenericAlias
Union: typing._SpecialForm
cls_kwargs: cython_function_or_method
display_as_type: cython_function_or_method

class AnyStrMaxLengthError(PydanticValueError):
    code: ClassVar[str] = ...
    msg_template: ClassVar[str] = ...
    def __init__(self, *args, **kwargs) -> None: ...

class AnyStrMinLengthError(PydanticValueError):
    code: ClassVar[str] = ...
    msg_template: ClassVar[str] = ...
    def __init__(self, *args, **kwargs) -> None: ...

class ArbitraryTypeError(PydanticTypeError):
    code: ClassVar[str] = ...
    msg_template: ClassVar[str] = ...
    def __init__(self, *args, **kwargs) -> None: ...

class BoolError(PydanticTypeError):
    msg_template: ClassVar[str] = ...

class BytesError(PydanticTypeError):
    msg_template: ClassVar[str] = ...

class CallableError(PydanticTypeError):
    msg_template: ClassVar[str] = ...

class ClassError(PydanticTypeError):
    code: ClassVar[str] = ...
    msg_template: ClassVar[str] = ...

class ColorError(PydanticValueError):
    msg_template: ClassVar[str] = ...

class ConfigError(RuntimeError): ...

class DataclassTypeError(PydanticTypeError):
    code: ClassVar[str] = ...
    msg_template: ClassVar[str] = ...

class DateError(PydanticValueError):
    msg_template: ClassVar[str] = ...

class DateTimeError(PydanticValueError):
    msg_template: ClassVar[str] = ...

class Decimal:
    imag: ClassVar[getset_descriptor] = ...
    real: ClassVar[getset_descriptor] = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def adjusted(self, *args, **kwargs) -> Any: ...
    def as_integer_ratio(self, *args, **kwargs) -> Any: ...
    def as_tuple(self, *args, **kwargs) -> Any: ...
    def canonical(self, *args, **kwargs) -> Any: ...
    def compare(self, *args, **kwargs) -> Any: ...
    def compare_signal(self, *args, **kwargs) -> Any: ...
    def compare_total(self, *args, **kwargs) -> Any: ...
    def compare_total_mag(y) -> Any: ...
    def conjugate(self, *args, **kwargs) -> Any: ...
    def copy_abs(self, *args, **kwargs) -> Any: ...
    def copy_negate(self, *args, **kwargs) -> Any: ...
    def copy_sign(self, *args, **kwargs) -> Any: ...
    def exp(self, *args, **kwargs) -> Any: ...
    def fma(self, *args, **kwargs) -> Any: ...
    @classmethod
    def from_float(self, *args, **kwargs) -> Any: ...
    def is_canonical(self, *args, **kwargs) -> Any: ...
    def is_finite(self, *args, **kwargs) -> Any: ...
    def is_infinite(self, *args, **kwargs) -> Any: ...
    def is_nan(self, *args, **kwargs) -> Any: ...
    def is_normal(self, *args, **kwargs) -> Any: ...
    def is_qnan(self, *args, **kwargs) -> Any: ...
    def is_signed(self, *args, **kwargs) -> Any: ...
    def is_snan(self, *args, **kwargs) -> Any: ...
    def is_subnormal(self, *args, **kwargs) -> Any: ...
    def is_zero(self, *args, **kwargs) -> Any: ...
    def ln(self, *args, **kwargs) -> Any: ...
    def log10(self, *args, **kwargs) -> Any: ...
    def logb(self, *args, **kwargs) -> Any: ...
    def logical_and(self, *args, **kwargs) -> Any: ...
    def logical_invert(self, *args, **kwargs) -> Any: ...
    def logical_or(self, *args, **kwargs) -> Any: ...
    def logical_xor(self, *args, **kwargs) -> Any: ...
    def max(self, *args, **kwargs) -> Any: ...
    def max_mag(self, *args, **kwargs) -> Any: ...
    def min(self, *args, **kwargs) -> Any: ...
    def min_mag(self, *args, **kwargs) -> Any: ...
    def next_minus(self, *args, **kwargs) -> Any: ...
    def next_plus(self, *args, **kwargs) -> Any: ...
    def next_toward(self, *args, **kwargs) -> Any: ...
    def normalize(self, *args, **kwargs) -> Any: ...
    def number_class(self, *args, **kwargs) -> Any: ...
    def quantize(self, *args, **kwargs) -> Any: ...
    def radix(base) -> Any: ...
    def remainder_near(self, *args, **kwargs) -> Any: ...
    def rotate(self, *args, **kwargs) -> Any: ...
    def same_quantum(self, *args, **kwargs) -> Any: ...
    def scaleb(self, *args, **kwargs) -> Any: ...
    def shift(self, *args, **kwargs) -> Any: ...
    def sqrt(self, *args, **kwargs) -> Any: ...
    def to_eng_string(self, *args, **kwargs) -> Any: ...
    def to_integral() -> Any: ...
    def to_integral_exact(self, *args, **kwargs) -> Any: ...
    def to_integral_value(self, *args, **kwargs) -> Any: ...
    def __abs__(self) -> Any: ...
    def __add__(self, other) -> Any: ...
    def __bool__(self) -> Any: ...
    def __ceil__(self, *args, **kwargs) -> Any: ...
    def __complex__(self) -> Any: ...
    def __copy__(self) -> Any: ...
    def __deepcopy__(self) -> Any: ...
    def __divmod__(self, other) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __float__(self) -> Any: ...
    def __floor__(self, *args, **kwargs) -> Any: ...
    def __floordiv__(self, other) -> Any: ...
    def __format__(self, *args, **kwargs) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __int__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __mod__(self, other) -> Any: ...
    def __mul__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __neg__(self) -> Any: ...
    def __pos__(self) -> Any: ...
    def __pow__(self, other) -> Any: ...
    def __radd__(self, other) -> Any: ...
    def __rdivmod__(self, other) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __rfloordiv__(self, other) -> Any: ...
    def __rmod__(self, other) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __round__(self) -> Any: ...
    def __rpow__(self, other) -> Any: ...
    def __rsub__(self, other) -> Any: ...
    def __rtruediv__(self, other) -> Any: ...
    def __sizeof__(self) -> Any: ...
    def __sub__(self, other) -> Any: ...
    def __truediv__(self, other) -> Any: ...
    def __trunc__(self) -> Any: ...

class DecimalError(PydanticTypeError):
    msg_template: ClassVar[str] = ...

class DecimalIsNotFiniteError(PydanticValueError):
    code: ClassVar[str] = ...
    msg_template: ClassVar[str] = ...

class DecimalMaxDigitsError(PydanticValueError):
    code: ClassVar[str] = ...
    msg_template: ClassVar[str] = ...
    def __init__(self, *args, **kwargs) -> None: ...

class DecimalMaxPlacesError(PydanticValueError):
    code: ClassVar[str] = ...
    msg_template: ClassVar[str] = ...
    def __init__(self, *args, **kwargs) -> None: ...

class DecimalWholeDigitsError(PydanticValueError):
    code: ClassVar[str] = ...
    msg_template: ClassVar[str] = ...
    def __init__(self, *args, **kwargs) -> None: ...

class DequeError(PydanticTypeError):
    msg_template: ClassVar[str] = ...

class DictError(PydanticTypeError):
    msg_template: ClassVar[str] = ...

class DurationError(PydanticValueError):
    msg_template: ClassVar[str] = ...

class EmailError(PydanticValueError):
    msg_template: ClassVar[str] = ...

class EnumError(PydanticTypeError):
    code: ClassVar[str] = ...
    msg_template: ClassVar[str] = ...

class EnumMemberError(PydanticTypeError):
    code: ClassVar[str] = ...

class ExtraError(PydanticValueError):
    msg_template: ClassVar[str] = ...

class FloatError(PydanticTypeError):
    msg_template: ClassVar[str] = ...

class FrozenSetError(PydanticTypeError):
    msg_template: ClassVar[str] = ...

class HashableError(PydanticTypeError):
    msg_template: ClassVar[str] = ...

class IPv4AddressError(PydanticValueError):
    msg_template: ClassVar[str] = ...

class IPv4InterfaceError(PydanticValueError):
    msg_template: ClassVar[str] = ...

class IPv4NetworkError(PydanticValueError):
    msg_template: ClassVar[str] = ...

class IPv6AddressError(PydanticValueError):
    msg_template: ClassVar[str] = ...

class IPv6InterfaceError(PydanticValueError):
    msg_template: ClassVar[str] = ...

class IPv6NetworkError(PydanticValueError):
    msg_template: ClassVar[str] = ...

class IPvAnyAddressError(PydanticValueError):
    msg_template: ClassVar[str] = ...

class IPvAnyInterfaceError(PydanticValueError):
    msg_template: ClassVar[str] = ...

class IPvAnyNetworkError(PydanticValueError):
    msg_template: ClassVar[str] = ...

class IntEnumError(PydanticTypeError):
    code: ClassVar[str] = ...
    msg_template: ClassVar[str] = ...

class IntegerError(PydanticTypeError):
    msg_template: ClassVar[str] = ...

class InvalidByteSize(PydanticValueError):
    msg_template: ClassVar[str] = ...

class InvalidByteSizeUnit(PydanticValueError):
    msg_template: ClassVar[str] = ...

class InvalidLengthForBrand(PydanticValueError):
    code: ClassVar[str] = ...
    msg_template: ClassVar[str] = ...

class IterableError(PydanticTypeError):
    msg_template: ClassVar[str] = ...

class JsonError(PydanticValueError):
    msg_template: ClassVar[str] = ...

class JsonTypeError(PydanticTypeError):
    code: ClassVar[str] = ...
    msg_template: ClassVar[str] = ...

class ListError(PydanticTypeError):
    msg_template: ClassVar[str] = ...

class ListMaxLengthError(PydanticValueError):
    code: ClassVar[str] = ...
    msg_template: ClassVar[str] = ...
    def __init__(self, *args, **kwargs) -> None: ...

class ListMinLengthError(PydanticValueError):
    code: ClassVar[str] = ...
    msg_template: ClassVar[str] = ...
    def __init__(self, *args, **kwargs) -> None: ...

class LuhnValidationError(PydanticValueError):
    code: ClassVar[str] = ...
    msg_template: ClassVar[str] = ...

class MissingError(PydanticValueError):
    msg_template: ClassVar[str] = ...

class NoneIsAllowedError(PydanticTypeError):
    code: ClassVar[str] = ...
    msg_template: ClassVar[str] = ...

class NoneIsNotAllowedError(PydanticTypeError):
    code: ClassVar[str] = ...
    msg_template: ClassVar[str] = ...

class NotDigitError(PydanticValueError):
    code: ClassVar[str] = ...
    msg_template: ClassVar[str] = ...

class NotNoneError(PydanticTypeError):
    code: ClassVar[str] = ...
    msg_template: ClassVar[str] = ...

class NumberNotGeError(_NumberBoundError):
    code: ClassVar[str] = ...
    msg_template: ClassVar[str] = ...

class NumberNotGtError(_NumberBoundError):
    code: ClassVar[str] = ...
    msg_template: ClassVar[str] = ...

class NumberNotLeError(_NumberBoundError):
    code: ClassVar[str] = ...
    msg_template: ClassVar[str] = ...

class NumberNotLtError(_NumberBoundError):
    code: ClassVar[str] = ...
    msg_template: ClassVar[str] = ...

class NumberNotMultipleError(PydanticValueError):
    code: ClassVar[str] = ...
    msg_template: ClassVar[str] = ...
    def __init__(self, *args, **kwargs) -> None: ...

class Path(pathlib.PurePath):
    _accessor: ClassVar[member_descriptor] = ...
    _closed: ClassVar[member_descriptor] = ...
    _init: ClassVar[function] = ...
    _make_child_relpath: ClassVar[function] = ...
    _opener: ClassVar[function] = ...
    _raise_closed: ClassVar[function] = ...
    _raw_open: ClassVar[function] = ...
    absolute: ClassVar[function] = ...
    chmod: ClassVar[function] = ...
    exists: ClassVar[function] = ...
    expanduser: ClassVar[function] = ...
    glob: ClassVar[function] = ...
    group: ClassVar[function] = ...
    is_block_device: ClassVar[function] = ...
    is_char_device: ClassVar[function] = ...
    is_dir: ClassVar[function] = ...
    is_fifo: ClassVar[function] = ...
    is_file: ClassVar[function] = ...
    is_mount: ClassVar[function] = ...
    is_socket: ClassVar[function] = ...
    is_symlink: ClassVar[function] = ...
    iterdir: ClassVar[function] = ...
    lchmod: ClassVar[function] = ...
    link_to: ClassVar[function] = ...
    lstat: ClassVar[function] = ...
    mkdir: ClassVar[function] = ...
    open: ClassVar[function] = ...
    owner: ClassVar[function] = ...
    read_bytes: ClassVar[function] = ...
    read_text: ClassVar[function] = ...
    rename: ClassVar[function] = ...
    replace: ClassVar[function] = ...
    resolve: ClassVar[function] = ...
    rglob: ClassVar[function] = ...
    rmdir: ClassVar[function] = ...
    samefile: ClassVar[function] = ...
    stat: ClassVar[function] = ...
    symlink_to: ClassVar[function] = ...
    touch: ClassVar[function] = ...
    unlink: ClassVar[function] = ...
    write_bytes: ClassVar[function] = ...
    write_text: ClassVar[function] = ...
    __enter__: ClassVar[function] = ...
    __exit__: ClassVar[function] = ...
    __slots__: ClassVar[tuple] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def cwd(self, *args, **kwargs) -> Any: ...
    @classmethod
    def home(self, *args, **kwargs) -> Any: ...

class PathError(PydanticTypeError):
    msg_template: ClassVar[str] = ...

class PathNotADirectoryError(_PathValueError):
    code: ClassVar[str] = ...
    msg_template: ClassVar[str] = ...

class PathNotAFileError(_PathValueError):
    code: ClassVar[str] = ...
    msg_template: ClassVar[str] = ...

class PathNotExistsError(_PathValueError):
    code: ClassVar[str] = ...
    msg_template: ClassVar[str] = ...

class PatternError(PydanticValueError):
    code: ClassVar[str] = ...
    msg_template: ClassVar[str] = ...

class PyObjectError(PydanticTypeError):
    msg_template: ClassVar[str] = ...

class PydanticErrorMixin:
    def __init__(self, *args, **kwargs) -> None: ...
    def __reduce__(self) -> Any: ...

class PydanticTypeError(PydanticErrorMixin, TypeError): ...

class PydanticValueError(PydanticErrorMixin, ValueError): ...

class SequenceError(PydanticTypeError):
    msg_template: ClassVar[str] = ...

class SetError(PydanticTypeError):
    msg_template: ClassVar[str] = ...

class SetMaxLengthError(PydanticValueError):
    code: ClassVar[str] = ...
    msg_template: ClassVar[str] = ...
    def __init__(self, *args, **kwargs) -> None: ...

class SetMinLengthError(PydanticValueError):
    code: ClassVar[str] = ...
    msg_template: ClassVar[str] = ...
    def __init__(self, *args, **kwargs) -> None: ...

class StrError(PydanticTypeError):
    msg_template: ClassVar[str] = ...

class StrRegexError(PydanticValueError):
    code: ClassVar[str] = ...
    msg_template: ClassVar[str] = ...
    def __init__(self, *args, **kwargs) -> None: ...

class StrictBoolError(PydanticValueError):
    msg_template: ClassVar[str] = ...

class SubclassError(PydanticTypeError):
    code: ClassVar[str] = ...
    msg_template: ClassVar[str] = ...
    def __init__(self, *args, **kwargs) -> None: ...

class TimeError(PydanticValueError):
    msg_template: ClassVar[str] = ...

class TupleError(PydanticTypeError):
    msg_template: ClassVar[str] = ...

class TupleLengthError(PydanticValueError):
    code: ClassVar[str] = ...
    msg_template: ClassVar[str] = ...
    def __init__(self, *args, **kwargs) -> None: ...

class UUIDError(PydanticTypeError):
    msg_template: ClassVar[str] = ...

class UUIDVersionError(PydanticValueError):
    code: ClassVar[str] = ...
    msg_template: ClassVar[str] = ...
    def __init__(self, *args, **kwargs) -> None: ...

class UrlError(PydanticValueError):
    code: ClassVar[str] = ...

class UrlExtraError(UrlError):
    code: ClassVar[str] = ...
    msg_template: ClassVar[str] = ...

class UrlHostError(UrlError):
    code: ClassVar[str] = ...
    msg_template: ClassVar[str] = ...

class UrlHostTldError(UrlError):
    code: ClassVar[str] = ...
    msg_template: ClassVar[str] = ...

class UrlPortError(UrlError):
    code: ClassVar[str] = ...
    msg_template: ClassVar[str] = ...

class UrlSchemeError(UrlError):
    code: ClassVar[str] = ...
    msg_template: ClassVar[str] = ...

class UrlSchemePermittedError(UrlError):
    code: ClassVar[str] = ...
    msg_template: ClassVar[str] = ...
    def __init__(self, *args, **kwargs) -> None: ...

class UrlUserInfoError(UrlError):
    code: ClassVar[str] = ...
    msg_template: ClassVar[str] = ...

class WrongConstantError(PydanticValueError):
    code: ClassVar[str] = ...

class _NumberBoundError(PydanticValueError):
    def __init__(self, *args, **kwargs) -> None: ...

class _PathValueError(PydanticValueError):
    def __init__(self, *args, **kwargs) -> None: ...
