from typing import Any, Callable, ClassVar, Dict, List, Optional, Tuple, Union

import enum
import pydantic.main
import pydantic.utils
import typing
ALT_V_ARGS: str
ALT_V_KWARGS: str
Any: typing._SpecialForm
Callable: typing._VariadicGenericAlias
Dict: typing._GenericAlias
List: typing._GenericAlias
Mapping: typing._GenericAlias
Optional: typing._SpecialForm
TYPE_CHECKING: bool
Tuple: typing._VariadicGenericAlias
Type: typing._GenericAlias
Union: typing._SpecialForm
V_DUPLICATE_KWARGS: str
V_POSITIONAL_ONLY_NAME: str
create_model: cython_function_or_method
get_all_type_hints: function
overload: function
to_camel: cython_function_or_method
validate_arguments: cython_function_or_method
validator: cython_function_or_method
wraps: function

class BaseModel(pydantic.utils.Representation):
    class Config:
        class getter_dict(pydantic.utils.Representation):
            _obj: ClassVar[member_descriptor] = ...
            __hash__: ClassVar[None] = ...
            __slots__: ClassVar[tuple] = ...
            def __init__(self, *args, **kwargs) -> None: ...
            def extra_keys(self, *args, **kwargs) -> Any: ...
            def get(self, *args, **kwargs) -> Any: ...
            def items(self, *args, **kwargs) -> Any: ...
            def keys(self, *args, **kwargs) -> Any: ...
            def values(self, *args, **kwargs) -> Any: ...
            def __contains__(self, other) -> Any: ...
            def __eq__(self, other) -> Any: ...
            def __getitem__(self, index) -> Any: ...
            def __iter__(self) -> Any: ...
            def __len__(self) -> Any: ...
            def __repr_args__(self, *args, **kwargs) -> Any: ...
            def __repr_name__(self, *args, **kwargs) -> Any: ...
        alias_generator: ClassVar[None] = ...
        allow_mutation: ClassVar[bool] = ...
        allow_population_by_field_name: ClassVar[bool] = ...
        anystr_lower: ClassVar[bool] = ...
        anystr_strip_whitespace: ClassVar[bool] = ...
        arbitrary_types_allowed: ClassVar[bool] = ...
        copy_on_model_validation: ClassVar[bool] = ...
        error_msg_templates: ClassVar[dict] = ...
        extra: ClassVar[pydantic.main.Extra] = ...
        fields: ClassVar[dict] = ...
        frozen: ClassVar[bool] = ...
        json_dumps: ClassVar[function] = ...
        json_encoders: ClassVar[dict] = ...
        json_loads: ClassVar[function] = ...
        keep_untouched: ClassVar[tuple] = ...
        max_anystr_length: ClassVar[None] = ...
        min_anystr_length: ClassVar[None] = ...
        orm_mode: ClassVar[bool] = ...
        schema_extra: ClassVar[dict] = ...
        title: ClassVar[None] = ...
        underscore_attrs_are_private: ClassVar[bool] = ...
        use_enum_values: ClassVar[bool] = ...
        validate_all: ClassVar[bool] = ...
        validate_assignment: ClassVar[bool] = ...
        @classmethod
        def get_field_info(self, *args, **kwargs) -> Any: ...
        @classmethod
        def prepare_field(self, *args, **kwargs) -> Any: ...

    class __config__(pydantic.main.BaseConfig):
        json_encoders: ClassVar[dict] = ...
    _abc_impl: ClassVar[_abc_data] = ...
    __abstractmethods__: ClassVar[frozenset] = ...
    __class_vars__: ClassVar[set] = ...
    __custom_root_type__: ClassVar[bool] = ...
    __fields__: ClassVar[dict] = ...
    __fields_set__: ClassVar[member_descriptor] = ...
    __hash__: ClassVar[None] = ...
    __post_root_validators__: ClassVar[list] = ...
    __pre_root_validators__: ClassVar[list] = ...
    __private_attributes__: ClassVar[dict] = ...
    __schema_cache__: ClassVar[dict] = ...
    __slots__: ClassVar[set] = ...
    __validators__: ClassVar[dict] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def _calculate_keys(self, *args, **kwargs) -> Any: ...
    @classmethod
    def _decompose_class(self, *args, **kwargs) -> Any: ...
    @classmethod
    def _enforce_dict_if_root(self, *args, **kwargs) -> Any: ...
    @classmethod
    def _get_value(self, *args, **kwargs) -> Any: ...
    def _init_private_attributes(self, *args, **kwargs) -> Any: ...
    def _iter(self, *args, **kwargs) -> Any: ...
    @classmethod
    def construct(self, *args, **kwargs) -> Any: ...
    def copy(self, *args, **kwargs) -> Any: ...
    def dict(self, *args, **kwargs) -> Any: ...
    @classmethod
    def from_orm(self, *args, **kwargs) -> Any: ...
    def json(self, *args, **kwargs) -> Any: ...
    @classmethod
    def parse_file(self, *args, **kwargs) -> Any: ...
    @classmethod
    def parse_obj(self, *args, **kwargs) -> Any: ...
    @classmethod
    def parse_raw(self, *args, **kwargs) -> Any: ...
    @classmethod
    def schema(self, *args, **kwargs) -> Any: ...
    @classmethod
    def schema_json(self, *args, **kwargs) -> Any: ...
    @classmethod
    def update_forward_refs(self, *args, **kwargs) -> Any: ...
    @classmethod
    def validate(self, *args, **kwargs) -> Any: ...
    def __eq__(self, other) -> Any: ...
    @classmethod
    def __get_validators__(self, *args, **kwargs) -> Any: ...
    def __getstate__(self) -> Any: ...
    def __iter__(self) -> Any: ...
    def __json_encoder__(self, *args, **kwargs) -> Any: ...
    def __repr_args__(self, *args, **kwargs) -> Any: ...
    def __setattr__(self, name, value) -> Any: ...
    def __setstate__(self, state) -> Any: ...
    def __signature__(self, *args, **kwargs) -> Any: ...

class ConfigError(RuntimeError): ...

class Extra(str, enum.Enum):
    class _member_type_:
        @classmethod
        def __init__(self, *args, **kwargs) -> None: ...
        def capitalize(self, *args, **kwargs) -> Any: ...
        def casefold(self, *args, **kwargs) -> Any: ...
        def center(self, *args, **kwargs) -> Any: ...
        def count(self, *args, **kwargs) -> Any: ...
        def encode(self, *args, **kwargs) -> Any: ...
        def endswith(self, *args, **kwargs) -> Any: ...
        def expandtabs(self, *args, **kwargs) -> Any: ...
        def find(self, *args, **kwargs) -> Any: ...
        def format(*args, **kwargs) -> str: ...
        def format_map(mapping) -> str: ...
        def index(self, *args, **kwargs) -> Any: ...
        def isalnum(self, *args, **kwargs) -> Any: ...
        def isalpha(self, *args, **kwargs) -> Any: ...
        def isascii(self, *args, **kwargs) -> Any: ...
        def isdecimal(self, *args, **kwargs) -> Any: ...
        def isdigit(self, *args, **kwargs) -> Any: ...
        def isidentifier(self, *args, **kwargs) -> Any: ...
        def islower(self, *args, **kwargs) -> Any: ...
        def isnumeric(self, *args, **kwargs) -> Any: ...
        def isprintable(self, *args, **kwargs) -> Any: ...
        def isspace(self, *args, **kwargs) -> Any: ...
        def istitle(self, *args, **kwargs) -> Any: ...
        def isupper(self, *args, **kwargs) -> Any: ...
        def join(self, *args, **kwargs) -> Any: ...
        def ljust(self, *args, **kwargs) -> Any: ...
        def lower(self, *args, **kwargs) -> Any: ...
        def lstrip(self, *args, **kwargs) -> Any: ...
        def maketrans(self, *args, **kwargs) -> Any: ...
        def partition(self, *args, **kwargs) -> Any: ...
        def replace(self, *args, **kwargs) -> Any: ...
        def rfind(self, *args, **kwargs) -> Any: ...
        def rindex(self, *args, **kwargs) -> Any: ...
        def rjust(self, *args, **kwargs) -> Any: ...
        def rpartition(self, *args, **kwargs) -> Any: ...
        def rsplit(self, *args, **kwargs) -> Any: ...
        def rstrip(self, *args, **kwargs) -> Any: ...
        def split(self, *args, **kwargs) -> Any: ...
        def splitlines(self, *args, **kwargs) -> Any: ...
        def startswith(self, *args, **kwargs) -> Any: ...
        def strip(self, *args, **kwargs) -> Any: ...
        def swapcase(self, *args, **kwargs) -> Any: ...
        def title(self, *args, **kwargs) -> Any: ...
        def translate(self, *args, **kwargs) -> Any: ...
        def upper(self, *args, **kwargs) -> Any: ...
        def zfill(self, *args, **kwargs) -> Any: ...
        def __add__(self, other) -> Any: ...
        def __contains__(self, other) -> Any: ...
        def __eq__(self, other) -> Any: ...
        def __format__(self, *args, **kwargs) -> Any: ...
        def __ge__(self, other) -> Any: ...
        def __getitem__(self, index) -> Any: ...
        def __getnewargs__(self, *args, **kwargs) -> Any: ...
        def __gt__(self, other) -> Any: ...
        def __hash__(self) -> Any: ...
        def __iter__(self) -> Any: ...
        def __le__(self, other) -> Any: ...
        def __len__(self) -> Any: ...
        def __lt__(self, other) -> Any: ...
        def __mod__(self, other) -> Any: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> Any: ...
        def __rmod__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __sizeof__(self) -> Any: ...
    __new__: ClassVar[function] = ...
    _generate_next_value_: ClassVar[function] = ...
    _member_map_: ClassVar[dict] = ...
    _member_names_: ClassVar[list] = ...
    _value2member_map_: ClassVar[dict] = ...
    allow: ClassVar[pydantic.main.Extra] = ...
    forbid: ClassVar[pydantic.main.Extra] = ...
    ignore: ClassVar[pydantic.main.Extra] = ...
    __format__: ClassVar[function] = ...

class TypeVar(typing._Final, typing._Immutable):
    __init__: ClassVar[function] = ...
    __bound__: ClassVar[member_descriptor] = ...
    __constraints__: ClassVar[member_descriptor] = ...
    __contravariant__: ClassVar[member_descriptor] = ...
    __covariant__: ClassVar[member_descriptor] = ...
    __name__: ClassVar[member_descriptor] = ...
    __reduce__: ClassVar[function] = ...
    __slots__: ClassVar[tuple] = ...

class ValidatedFunction:
    def __init__(self, *args, **kwargs) -> None: ...
    def build_values(self, *args, **kwargs) -> Any: ...
    def call(self, *args, **kwargs) -> Any: ...
    def create_model(self, *args, **kwargs) -> Any: ...
    def execute(self, *args, **kwargs) -> Any: ...
    def init_model_instance(self, *args, **kwargs) -> Any: ...
