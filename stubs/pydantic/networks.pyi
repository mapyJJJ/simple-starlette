from typing import Any, ClassVar, Dict, Optional, Tuple, Union

import ipaddress
import pydantic.utils
import re
import typing
Any: typing._SpecialForm
Dict: typing._GenericAlias
FrozenSet: typing._GenericAlias
Generator: typing._GenericAlias
NetworkType: typing._GenericAlias
Optional: typing._SpecialForm
Pattern: typing._GenericAlias
Set: typing._GenericAlias
TYPE_CHECKING: bool
Tuple: typing._VariadicGenericAlias
Type: typing._GenericAlias
Union: typing._SpecialForm
_ascii_domain_regex_cache: None
_int_domain_regex_cache: None
_url_regex_cache: None
ascii_domain_regex: cython_function_or_method
cast: function
constr_length_validator: cython_function_or_method
email_validator: None
import_email_validator: cython_function_or_method
int_domain_regex: cython_function_or_method
no_type_check: function
pretty_email_regex: re.Pattern
str_validator: cython_function_or_method
stricturl: cython_function_or_method
update_not_none: cython_function_or_method
url_regex: cython_function_or_method
validate_email: cython_function_or_method

class AnyHttpUrl(AnyUrl):
    allowed_schemes: ClassVar[set] = ...

class AnyUrl(str):
    allowed_schemes: ClassVar[None] = ...
    fragment: ClassVar[member_descriptor] = ...
    host: ClassVar[member_descriptor] = ...
    host_type: ClassVar[member_descriptor] = ...
    max_length: ClassVar[int] = ...
    min_length: ClassVar[int] = ...
    password: ClassVar[member_descriptor] = ...
    path: ClassVar[member_descriptor] = ...
    port: ClassVar[member_descriptor] = ...
    query: ClassVar[member_descriptor] = ...
    scheme: ClassVar[member_descriptor] = ...
    strip_whitespace: ClassVar[bool] = ...
    tld: ClassVar[member_descriptor] = ...
    tld_required: ClassVar[bool] = ...
    user: ClassVar[member_descriptor] = ...
    user_required: ClassVar[bool] = ...
    __slots__: ClassVar[tuple] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def build(self, *args, **kwargs) -> Any: ...
    @classmethod
    def validate(self, *args, **kwargs) -> Any: ...
    @classmethod
    def validate_host(self, *args, **kwargs) -> Any: ...
    @classmethod
    def validate_parts(self, *args, **kwargs) -> Any: ...
    @classmethod
    def __get_validators__(self, *args, **kwargs) -> Any: ...
    @classmethod
    def __modify_schema__(self, *args, **kwargs) -> Any: ...

class EmailStr(str):
    @classmethod
    def validate(self, *args, **kwargs) -> Any: ...
    @classmethod
    def __get_validators__(self, *args, **kwargs) -> Any: ...
    @classmethod
    def __modify_schema__(self, *args, **kwargs) -> Any: ...

class HttpUrl(AnyUrl):
    allowed_schemes: ClassVar[set] = ...
    max_length: ClassVar[int] = ...
    tld_required: ClassVar[bool] = ...

class IPv4Address(ipaddress._BaseV4, ipaddress._BaseAddress):
    class _constants:
        _linklocal_network: ClassVar[ipaddress.IPv4Network] = ...
        _loopback_network: ClassVar[ipaddress.IPv4Network] = ...
        _multicast_network: ClassVar[ipaddress.IPv4Network] = ...
        _private_networks: ClassVar[list] = ...
        _public_network: ClassVar[ipaddress.IPv4Network] = ...
        _reserved_network: ClassVar[ipaddress.IPv4Network] = ...
        _unspecified_address: ClassVar[ipaddress.IPv4Address] = ...
    __init__: ClassVar[function] = ...
    _ip: ClassVar[member_descriptor] = ...
    __slots__: ClassVar[tuple] = ...
    @property
    def is_global(self) -> Any: ...
    @property
    def is_link_local(self) -> Any: ...
    @property
    def is_loopback(self) -> Any: ...
    @property
    def is_multicast(self) -> Any: ...
    @property
    def is_private(self) -> Any: ...
    @property
    def is_reserved(self) -> Any: ...
    @property
    def is_unspecified(self) -> Any: ...
    @property
    def packed(self) -> Any: ...

class IPv4Interface(ipaddress.IPv4Address):
    __init__: ClassVar[function] = ...
    __eq__: ClassVar[function] = ...
    __hash__: ClassVar[function] = ...
    __lt__: ClassVar[function] = ...
    __reduce__: ClassVar[function] = ...
    def hostmask(self, *args, **kwargs) -> Any: ...
    @property
    def ip(self) -> Any: ...
    @property
    def with_hostmask(self) -> Any: ...
    @property
    def with_netmask(self) -> Any: ...
    @property
    def with_prefixlen(self) -> Any: ...

class IPv4Network(ipaddress._BaseV4, ipaddress._BaseNetwork):
    class _address_class(ipaddress._BaseV4, ipaddress._BaseAddress):
        class _constants:
            _linklocal_network: ClassVar[ipaddress.IPv4Network] = ...
            _loopback_network: ClassVar[ipaddress.IPv4Network] = ...
            _multicast_network: ClassVar[ipaddress.IPv4Network] = ...
            _private_networks: ClassVar[list] = ...
            _public_network: ClassVar[ipaddress.IPv4Network] = ...
            _reserved_network: ClassVar[ipaddress.IPv4Network] = ...
            _unspecified_address: ClassVar[ipaddress.IPv4Address] = ...
        __init__: ClassVar[function] = ...
        _ip: ClassVar[member_descriptor] = ...
        __slots__: ClassVar[tuple] = ...
        @property
        def is_global(self) -> Any: ...
        @property
        def is_link_local(self) -> Any: ...
        @property
        def is_loopback(self) -> Any: ...
        @property
        def is_multicast(self) -> Any: ...
        @property
        def is_private(self) -> Any: ...
        @property
        def is_reserved(self) -> Any: ...
        @property
        def is_unspecified(self) -> Any: ...
        @property
        def packed(self) -> Any: ...
    __init__: ClassVar[function] = ...
    @property
    def is_global(self) -> Any: ...

class IPv6Address(ipaddress._BaseV6, ipaddress._BaseAddress):
    class _constants:
        _linklocal_network: ClassVar[ipaddress.IPv6Network] = ...
        _multicast_network: ClassVar[ipaddress.IPv6Network] = ...
        _private_networks: ClassVar[list] = ...
        _reserved_networks: ClassVar[list] = ...
        _sitelocal_network: ClassVar[ipaddress.IPv6Network] = ...
    __init__: ClassVar[function] = ...
    _ip: ClassVar[member_descriptor] = ...
    __slots__: ClassVar[tuple] = ...
    @property
    def ipv4_mapped(self) -> Any: ...
    @property
    def is_global(self) -> Any: ...
    @property
    def is_link_local(self) -> Any: ...
    @property
    def is_loopback(self) -> Any: ...
    @property
    def is_multicast(self) -> Any: ...
    @property
    def is_private(self) -> Any: ...
    @property
    def is_reserved(self) -> Any: ...
    @property
    def is_site_local(self) -> Any: ...
    @property
    def is_unspecified(self) -> Any: ...
    @property
    def packed(self) -> Any: ...
    @property
    def sixtofour(self) -> Any: ...
    @property
    def teredo(self) -> Any: ...

class IPv6Interface(ipaddress.IPv6Address):
    __init__: ClassVar[function] = ...
    __eq__: ClassVar[function] = ...
    __hash__: ClassVar[function] = ...
    __lt__: ClassVar[function] = ...
    __reduce__: ClassVar[function] = ...
    def hostmask(self, *args, **kwargs) -> Any: ...
    @property
    def ip(self) -> Any: ...
    @property
    def is_loopback(self) -> Any: ...
    @property
    def is_unspecified(self) -> Any: ...
    @property
    def with_hostmask(self) -> Any: ...
    @property
    def with_netmask(self) -> Any: ...
    @property
    def with_prefixlen(self) -> Any: ...

class IPv6Network(ipaddress._BaseV6, ipaddress._BaseNetwork):
    class _address_class(ipaddress._BaseV6, ipaddress._BaseAddress):
        class _constants:
            _linklocal_network: ClassVar[ipaddress.IPv6Network] = ...
            _multicast_network: ClassVar[ipaddress.IPv6Network] = ...
            _private_networks: ClassVar[list] = ...
            _reserved_networks: ClassVar[list] = ...
            _sitelocal_network: ClassVar[ipaddress.IPv6Network] = ...
        __init__: ClassVar[function] = ...
        _ip: ClassVar[member_descriptor] = ...
        __slots__: ClassVar[tuple] = ...
        @property
        def ipv4_mapped(self) -> Any: ...
        @property
        def is_global(self) -> Any: ...
        @property
        def is_link_local(self) -> Any: ...
        @property
        def is_loopback(self) -> Any: ...
        @property
        def is_multicast(self) -> Any: ...
        @property
        def is_private(self) -> Any: ...
        @property
        def is_reserved(self) -> Any: ...
        @property
        def is_site_local(self) -> Any: ...
        @property
        def is_unspecified(self) -> Any: ...
        @property
        def packed(self) -> Any: ...
        @property
        def sixtofour(self) -> Any: ...
        @property
        def teredo(self) -> Any: ...
    __init__: ClassVar[function] = ...
    hosts: ClassVar[function] = ...
    @property
    def is_site_local(self) -> Any: ...

class IPvAnyAddress(ipaddress._BaseAddress):
    @classmethod
    def validate(self, *args, **kwargs) -> Any: ...
    @classmethod
    def __get_validators__(self, *args, **kwargs) -> Any: ...
    @classmethod
    def __modify_schema__(self, *args, **kwargs) -> Any: ...

class IPvAnyInterface(ipaddress._BaseAddress):
    @classmethod
    def validate(self, *args, **kwargs) -> Any: ...
    @classmethod
    def __get_validators__(self, *args, **kwargs) -> Any: ...
    @classmethod
    def __modify_schema__(self, *args, **kwargs) -> Any: ...

class IPvAnyNetwork(ipaddress._BaseNetwork):
    @classmethod
    def validate(self, *args, **kwargs) -> Any: ...
    @classmethod
    def __get_validators__(self, *args, **kwargs) -> Any: ...
    @classmethod
    def __modify_schema__(self, *args, **kwargs) -> Any: ...

class NameEmail(pydantic.utils.Representation):
    email: ClassVar[member_descriptor] = ...
    name: ClassVar[member_descriptor] = ...
    __hash__: ClassVar[None] = ...
    __slots__: ClassVar[tuple] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def validate(self, *args, **kwargs) -> Any: ...
    def __eq__(self, other) -> Any: ...
    @classmethod
    def __get_validators__(self, *args, **kwargs) -> Any: ...
    @classmethod
    def __modify_schema__(self, *args, **kwargs) -> Any: ...

class PostgresDsn(AnyUrl):
    allowed_schemes: ClassVar[set] = ...
    user_required: ClassVar[bool] = ...

class RedisDsn(AnyUrl):
    allowed_schemes: ClassVar[set] = ...
    @classmethod
    def validate_parts(self, *args, **kwargs) -> Any: ...

class Representation:
    __slots__: ClassVar[tuple] = ...
    def __pretty__(self, *args, **kwargs) -> Any: ...
    def __repr_args__(self, *args, **kwargs) -> Any: ...
    def __repr_name__(self, *args, **kwargs) -> Any: ...
    def __repr_str__(self, *args, **kwargs) -> Any: ...

class _BaseAddress(ipaddress._IPAddressBase):
    _get_address_key: ClassVar[function] = ...
    __add__: ClassVar[function] = ...
    __eq__: ClassVar[function] = ...
    __ge__: ClassVar[function] = ...
    __gt__: ClassVar[function] = ...
    __hash__: ClassVar[function] = ...
    __int__: ClassVar[function] = ...
    __le__: ClassVar[function] = ...
    __lt__: ClassVar[function] = ...
    __reduce__: ClassVar[function] = ...
    __slots__: ClassVar[tuple] = ...
    __sub__: ClassVar[function] = ...

class _BaseNetwork(ipaddress._IPAddressBase):
    _get_networks_key: ClassVar[function] = ...
    address_exclude: ClassVar[function] = ...
    compare_networks: ClassVar[function] = ...
    hosts: ClassVar[function] = ...
    overlaps: ClassVar[function] = ...
    subnet_of: ClassVar[function] = ...
    subnets: ClassVar[function] = ...
    supernet: ClassVar[function] = ...
    supernet_of: ClassVar[function] = ...
    __contains__: ClassVar[function] = ...
    __eq__: ClassVar[function] = ...
    __ge__: ClassVar[function] = ...
    __getitem__: ClassVar[function] = ...
    __gt__: ClassVar[function] = ...
    __hash__: ClassVar[function] = ...
    __iter__: ClassVar[function] = ...
    __le__: ClassVar[function] = ...
    __lt__: ClassVar[function] = ...
    def _is_subnet_of(self, *args, **kwargs) -> Any: ...
    def broadcast_address(self, *args, **kwargs) -> Any: ...
    def hostmask(self, *args, **kwargs) -> Any: ...
    @property
    def _address_class(self) -> Any: ...
    @property
    def is_global(self) -> Any: ...
    @property
    def is_link_local(self) -> Any: ...
    @property
    def is_loopback(self) -> Any: ...
    @property
    def is_multicast(self) -> Any: ...
    @property
    def is_private(self) -> Any: ...
    @property
    def is_reserved(self) -> Any: ...
    @property
    def is_unspecified(self) -> Any: ...
    @property
    def num_addresses(self) -> Any: ...
    @property
    def prefixlen(self) -> Any: ...
    @property
    def with_hostmask(self) -> Any: ...
    @property
    def with_netmask(self) -> Any: ...
    @property
    def with_prefixlen(self) -> Any: ...
