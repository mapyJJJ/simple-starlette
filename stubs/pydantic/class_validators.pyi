from typing import Any, Callable, ClassVar, Dict, Iterable, List, Optional, Tuple, Union

import collections.abc
import typing
Any: typing._SpecialForm
AnyCallable: typing._GenericAlias
Callable: typing._VariadicGenericAlias
Dict: typing._GenericAlias
Iterable: typing._GenericAlias
List: typing._GenericAlias
Optional: typing._SpecialForm
ROOT_KEY: str
ROOT_VALIDATOR_CONFIG_KEY: str
Set: typing._GenericAlias
TYPE_CHECKING: bool
Tuple: typing._VariadicGenericAlias
Type: typing._GenericAlias
Union: typing._SpecialForm
VALIDATOR_CONFIG_KEY: str
_FUNCS: set
_generic_validator_basic: cython_function_or_method
_generic_validator_cls: cython_function_or_method
_prepare_validator: cython_function_or_method
all_kwargs: set
extract_root_validators: cython_function_or_method
extract_validators: cython_function_or_method
gather_all_validators: cython_function_or_method
in_ipython: cython_function_or_method
inherit_validators: cython_function_or_method
make_generic_validator: cython_function_or_method
overload: function
prep_validators: cython_function_or_method
root_validator: cython_function_or_method
validator: cython_function_or_method
wraps: function

class ChainMap(collections.abc.MutableMapping):
    __init__: ClassVar[function] = ...
    _abc_impl: ClassVar[_abc_data] = ...
    clear: ClassVar[function] = ...
    copy: ClassVar[function] = ...
    get: ClassVar[function] = ...
    new_child: ClassVar[function] = ...
    pop: ClassVar[function] = ...
    popitem: ClassVar[function] = ...
    __abstractmethods__: ClassVar[frozenset] = ...
    __bool__: ClassVar[function] = ...
    __contains__: ClassVar[function] = ...
    __copy__: ClassVar[function] = ...
    __delitem__: ClassVar[function] = ...
    __getitem__: ClassVar[function] = ...
    __iter__: ClassVar[function] = ...
    __len__: ClassVar[function] = ...
    __missing__: ClassVar[function] = ...
    __setitem__: ClassVar[function] = ...
    @classmethod
    def fromkeys(self, *args, **kwargs) -> Any: ...
    @property
    def parents(self) -> Any: ...

class ConfigError(RuntimeError): ...

class FunctionType:
    __annotations__: ClassVar[getset_descriptor] = ...
    __closure__: ClassVar[member_descriptor] = ...
    __code__: ClassVar[getset_descriptor] = ...
    __defaults__: ClassVar[getset_descriptor] = ...
    __globals__: ClassVar[member_descriptor] = ...
    __kwdefaults__: ClassVar[getset_descriptor] = ...
    __name__: ClassVar[getset_descriptor] = ...
    __qualname__: ClassVar[getset_descriptor] = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def __call__(self, *args, **kwargs) -> Any: ...
    def __get__(self, instance, owner) -> Any: ...

class Validator:
    always: ClassVar[member_descriptor] = ...
    check_fields: ClassVar[member_descriptor] = ...
    each_item: ClassVar[member_descriptor] = ...
    func: ClassVar[member_descriptor] = ...
    pre: ClassVar[member_descriptor] = ...
    skip_on_failure: ClassVar[member_descriptor] = ...
    __slots__: ClassVar[tuple] = ...
    def __init__(self, *args, **kwargs) -> None: ...

class ValidatorGroup:
    def __init__(self, *args, **kwargs) -> None: ...
    def check_for_unused(self, *args, **kwargs) -> Any: ...
    def get_validators(self, *args, **kwargs) -> Any: ...

class chain:
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def from_iterable(self, *args, **kwargs) -> Any: ...
    def __iter__(self) -> Any: ...
    def __next__(self) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...
