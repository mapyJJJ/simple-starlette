from typing import Any, Callable, ClassVar, Dict, Iterable, Iterator, List, Optional, Tuple, Union

import typing
AbstractSet: typing._GenericAlias
Any: typing._SpecialForm
BUILTIN_COLLECTIONS: set
Callable: typing._VariadicGenericAlias
Dict: typing._GenericAlias
Generator: typing._GenericAlias
GenericAlias: tuple
IMMUTABLE_NON_COLLECTIONS_TYPES: set
Iterable: typing._GenericAlias
Iterator: typing._GenericAlias
KeyType: typing.TypeVar
List: typing._GenericAlias
Mapping: typing._GenericAlias
Obj: typing.TypeVar
Optional: typing._SpecialForm
ROOT_KEY: str
Set: typing._GenericAlias
T: typing.TypeVar
TYPE_CHECKING: bool
Tuple: typing._VariadicGenericAlias
Type: typing._GenericAlias
Union: typing._SpecialForm
_EMPTY: object
all_identical: cython_function_or_method
almost_equal_floats: cython_function_or_method
deep_update: cython_function_or_method
deepcopy: function
display_as_type: cython_function_or_method
generate_model_signature: cython_function_or_method
get_model: cython_function_or_method
import_string: cython_function_or_method
in_ipython: cython_function_or_method
is_valid_field: cython_function_or_method
is_valid_private_name: cython_function_or_method
lenient_issubclass: cython_function_or_method
no_type_check: function
path_type: cython_function_or_method
path_types: dict
sequence_like: cython_function_or_method
smart_deepcopy: cython_function_or_method
to_camel: cython_function_or_method
truncate: cython_function_or_method
unique_list: cython_function_or_method
update_normalized_all: cython_function_or_method
update_not_none: cython_function_or_method
validate_field_name: cython_function_or_method
version_info: cython_function_or_method

class BuiltinFunctionType:
    __name__: ClassVar[getset_descriptor] = ...
    __qualname__: ClassVar[getset_descriptor] = ...
    __self__: ClassVar[getset_descriptor] = ...
    __text_signature__: ClassVar[getset_descriptor] = ...
    def __call__(self, *args, **kwargs) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __reduce__(self) -> Any: ...

class ClassAttribute:
    name: ClassVar[member_descriptor] = ...
    value: ClassVar[member_descriptor] = ...
    __slots__: ClassVar[tuple] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __get__(self, instance, owner) -> Any: ...

class CodeType:
    co_argcount: ClassVar[member_descriptor] = ...
    co_cellvars: ClassVar[member_descriptor] = ...
    co_code: ClassVar[member_descriptor] = ...
    co_consts: ClassVar[member_descriptor] = ...
    co_filename: ClassVar[member_descriptor] = ...
    co_firstlineno: ClassVar[member_descriptor] = ...
    co_flags: ClassVar[member_descriptor] = ...
    co_freevars: ClassVar[member_descriptor] = ...
    co_kwonlyargcount: ClassVar[member_descriptor] = ...
    co_lnotab: ClassVar[member_descriptor] = ...
    co_name: ClassVar[member_descriptor] = ...
    co_names: ClassVar[member_descriptor] = ...
    co_nlocals: ClassVar[member_descriptor] = ...
    co_posonlyargcount: ClassVar[member_descriptor] = ...
    co_stacksize: ClassVar[member_descriptor] = ...
    co_varnames: ClassVar[member_descriptor] = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def replace(self, *args, **kwargs) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __sizeof__(self) -> Any: ...

class FunctionType:
    __annotations__: ClassVar[getset_descriptor] = ...
    __closure__: ClassVar[member_descriptor] = ...
    __code__: ClassVar[getset_descriptor] = ...
    __defaults__: ClassVar[getset_descriptor] = ...
    __globals__: ClassVar[member_descriptor] = ...
    __kwdefaults__: ClassVar[getset_descriptor] = ...
    __name__: ClassVar[getset_descriptor] = ...
    __qualname__: ClassVar[getset_descriptor] = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def __call__(self, *args, **kwargs) -> Any: ...
    def __get__(self, instance, owner) -> Any: ...

class GeneratorType:
    gi_code: ClassVar[member_descriptor] = ...
    gi_frame: ClassVar[member_descriptor] = ...
    gi_running: ClassVar[member_descriptor] = ...
    gi_yieldfrom: ClassVar[getset_descriptor] = ...
    __name__: ClassVar[getset_descriptor] = ...
    __qualname__: ClassVar[getset_descriptor] = ...
    def close(self, *args, **kwargs) -> Any: ...
    def send(self, *args, **kwargs) -> Any: ...
    def throw(self, *args, **kwargs) -> Any: ...
    def __del__(self, *args, **kwargs) -> Any: ...
    def __iter__(self) -> Any: ...
    def __next__(self) -> Any: ...

class GetterDict(Representation):
    _obj: ClassVar[member_descriptor] = ...
    __hash__: ClassVar[None] = ...
    __slots__: ClassVar[tuple] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def extra_keys(self, *args, **kwargs) -> Any: ...
    def get(self, *args, **kwargs) -> Any: ...
    def items(self, *args, **kwargs) -> Any: ...
    def keys(self, *args, **kwargs) -> Any: ...
    def values(self, *args, **kwargs) -> Any: ...
    def __contains__(self, other) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __getitem__(self, index) -> Any: ...
    def __iter__(self) -> Any: ...
    def __len__(self) -> Any: ...
    def __repr_args__(self, *args, **kwargs) -> Any: ...
    def __repr_name__(self, *args, **kwargs) -> Any: ...

class LambdaType:
    __annotations__: ClassVar[getset_descriptor] = ...
    __closure__: ClassVar[member_descriptor] = ...
    __code__: ClassVar[getset_descriptor] = ...
    __defaults__: ClassVar[getset_descriptor] = ...
    __globals__: ClassVar[member_descriptor] = ...
    __kwdefaults__: ClassVar[getset_descriptor] = ...
    __name__: ClassVar[getset_descriptor] = ...
    __qualname__: ClassVar[getset_descriptor] = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def __call__(self, *args, **kwargs) -> Any: ...
    def __get__(self, instance, owner) -> Any: ...

class ModuleType:
    def __init__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> Any: ...
    def __dir__() -> list: ...
    def __setattr__(self, name, value) -> Any: ...

class NoneType:
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def __bool__(self) -> Any: ...

class OrderedDict(dict):
    __hash__: ClassVar[None] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, *args, **kwargs) -> Any: ...
    def copy() -> ashallowcopyofod: ...
    @classmethod
    def fromkeys(self, *args, **kwargs) -> Any: ...
    def items(self, *args, **kwargs) -> Any: ...
    def keys(self, *args, **kwargs) -> Any: ...
    def move_to_end(self, *args, **kwargs) -> Any: ...
    def pop(self, *args, **kwargs) -> Any: ...
    def popitem(self, *args, **kwargs) -> Any: ...
    def setdefault(self, *args, **kwargs) -> Any: ...
    def update(self, *args, **kwargs) -> Any: ...
    def values(self, *args, **kwargs) -> Any: ...
    def __delitem__(self, other) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __iter__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __reversed__() -> Any: ...
    def __setitem__(self, index, object) -> Any: ...
    def __sizeof__(self) -> Any: ...

class PyObjectStr(str): ...

class Representation:
    __slots__: ClassVar[tuple] = ...
    def __pretty__(self, *args, **kwargs) -> Any: ...
    def __repr_args__(self, *args, **kwargs) -> Any: ...
    def __repr_name__(self, *args, **kwargs) -> Any: ...
    def __repr_str__(self, *args, **kwargs) -> Any: ...

class TypeVar(typing._Final, typing._Immutable):
    __init__: ClassVar[function] = ...
    __bound__: ClassVar[member_descriptor] = ...
    __constraints__: ClassVar[member_descriptor] = ...
    __contravariant__: ClassVar[member_descriptor] = ...
    __covariant__: ClassVar[member_descriptor] = ...
    __name__: ClassVar[member_descriptor] = ...
    __reduce__: ClassVar[function] = ...
    __slots__: ClassVar[tuple] = ...

class ValueItems(Representation):
    _items: ClassVar[member_descriptor] = ...
    _type: ClassVar[member_descriptor] = ...
    __slots__: ClassVar[tuple] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def _normalize_indexes(self, *args, **kwargs) -> Any: ...
    def for_element(self, *args, **kwargs) -> Any: ...
    def is_excluded(self, *args, **kwargs) -> Any: ...
    def is_included(self, *args, **kwargs) -> Any: ...
    def __repr_args__(self, *args, **kwargs) -> Any: ...

class defaultdict(dict):
    default_factory: ClassVar[member_descriptor] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def copy(self, *args, **kwargs) -> Any: ...
    def __copy__(self) -> Any: ...
    def __missing__(key) -> Any: ...
    def __reduce__(self) -> Any: ...

class deque:
    maxlen: ClassVar[getset_descriptor] = ...
    __hash__: ClassVar[None] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def append(self, *args, **kwargs) -> Any: ...
    def appendleft(self, *args, **kwargs) -> Any: ...
    def clear(self, *args, **kwargs) -> Any: ...
    def copy(self, *args, **kwargs) -> Any: ...
    def count(self, *args, **kwargs) -> Any: ...
    def extend(self, *args, **kwargs) -> Any: ...
    def extendleft(self, *args, **kwargs) -> Any: ...
    def index(self, *args, **kwargs) -> Any: ...
    def insert(index, object) -> Any: ...
    def pop(self, *args, **kwargs) -> Any: ...
    def popleft(self, *args, **kwargs) -> Any: ...
    def remove(value) -> Any: ...
    def reverse() -> Any: ...
    def rotate(self, *args, **kwargs) -> Any: ...
    def __add__(self, other) -> Any: ...
    def __bool__(self) -> Any: ...
    def __contains__(self, other) -> Any: ...
    def __copy__(self) -> Any: ...
    def __delitem__(self, other) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __getitem__(self, index) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __iadd__(self, other) -> Any: ...
    def __imul__(self, other) -> Any: ...
    def __iter__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __len__(self) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __mul__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __reversed__() -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __setitem__(self, index, object) -> Any: ...
    def __sizeof__() -> Any: ...

class islice:
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def __iter__(self) -> Any: ...
    def __next__(self) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class zip_longest:
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def __iter__(self) -> Any: ...
    def __next__(self) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...
