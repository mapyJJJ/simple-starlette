from typing import Any, ClassVar, Dict, Optional, Union

import datetime
import re
import typing
Dict: typing._GenericAlias
EPOCH: datetime.datetime
MAX_NUMBER: int
MS_WATERSHED: int
Optional: typing._SpecialForm
StrBytesIntFloat: typing._GenericAlias
Type: typing._GenericAlias
Union: typing._SpecialForm
_parse_timezone: cython_function_or_method
date_expr: str
date_re: re.Pattern
datetime_re: re.Pattern
from_unix_seconds: cython_function_or_method
get_numeric: cython_function_or_method
iso8601_duration_re: re.Pattern
parse_date: cython_function_or_method
parse_datetime: cython_function_or_method
parse_duration: cython_function_or_method
parse_time: cython_function_or_method
standard_duration_re: re.Pattern
time_expr: str
time_re: re.Pattern

class date:
    day: ClassVar[getset_descriptor] = ...
    max: ClassVar[datetime.date] = ...
    min: ClassVar[datetime.date] = ...
    month: ClassVar[getset_descriptor] = ...
    resolution: ClassVar[datetime.timedelta] = ...
    year: ClassVar[getset_descriptor] = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def ctime() -> Any: ...
    @classmethod
    def fromisocalendar(self, *args, **kwargs) -> Any: ...
    @classmethod
    def fromisoformat(self, *args, **kwargs) -> Any: ...
    @classmethod
    def fromordinal(self, *args, **kwargs) -> Any: ...
    @classmethod
    def fromtimestamp(self, *args, **kwargs) -> Any: ...
    def isocalendar(self, *args, **kwargs) -> Any: ...
    def isoformat(self, *args, **kwargs) -> Any: ...
    def isoweekday(self, *args, **kwargs) -> Any: ...
    def replace(self, *args, **kwargs) -> Any: ...
    def strftime(self, *args, **kwargs) -> Any: ...
    def timetuple(self, *args, **kwargs) -> Any: ...
    @classmethod
    def today(self, *args, **kwargs) -> Any: ...
    def toordinal(self, *args, **kwargs) -> Any: ...
    def weekday(self, *args, **kwargs) -> Any: ...
    def __add__(self, other) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __format__(self, *args, **kwargs) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __radd__(self, other) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __rsub__(self, other) -> Any: ...
    def __sub__(self, other) -> Any: ...

class datetime(datetime.date):
    fold: ClassVar[getset_descriptor] = ...
    hour: ClassVar[getset_descriptor] = ...
    max: ClassVar[datetime.datetime] = ...
    microsecond: ClassVar[getset_descriptor] = ...
    min: ClassVar[datetime.datetime] = ...
    minute: ClassVar[getset_descriptor] = ...
    resolution: ClassVar[datetime.timedelta] = ...
    second: ClassVar[getset_descriptor] = ...
    tzinfo: ClassVar[getset_descriptor] = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def astimezone(self, *args, **kwargs) -> Any: ...
    @classmethod
    def combine(self, *args, **kwargs) -> Any: ...
    def ctime() -> Any: ...
    def date(self, *args, **kwargs) -> Any: ...
    def dst(self) -> Any: ...
    @classmethod
    def fromisoformat(self, *args, **kwargs) -> Any: ...
    @classmethod
    def fromtimestamp(self, *args, **kwargs) -> Any: ...
    def isoformat(self, *args, **kwargs) -> Any: ...
    @classmethod
    def now(self, *args, **kwargs) -> Any: ...
    def replace(self, *args, **kwargs) -> Any: ...
    @classmethod
    def strptime(self, *args, **kwargs) -> Any: ...
    def time(self, *args, **kwargs) -> Any: ...
    def timestamp(self, *args, **kwargs) -> Any: ...
    def timetuple(self, *args, **kwargs) -> Any: ...
    def timetz(self, *args, **kwargs) -> Any: ...
    def tzname(self) -> Any: ...
    @classmethod
    def utcfromtimestamp(self, *args, **kwargs) -> Any: ...
    @classmethod
    def utcnow(self, *args, **kwargs) -> Any: ...
    def utcoffset(self) -> Any: ...
    def utctimetuple(self, *args, **kwargs) -> Any: ...
    def __add__(self, other) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __radd__(self, other) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __reduce_ex__(self, protocol) -> Any: ...
    def __rsub__(self, other) -> Any: ...
    def __sub__(self, other) -> Any: ...

class time:
    fold: ClassVar[getset_descriptor] = ...
    hour: ClassVar[getset_descriptor] = ...
    max: ClassVar[datetime.time] = ...
    microsecond: ClassVar[getset_descriptor] = ...
    min: ClassVar[datetime.time] = ...
    minute: ClassVar[getset_descriptor] = ...
    resolution: ClassVar[datetime.timedelta] = ...
    second: ClassVar[getset_descriptor] = ...
    tzinfo: ClassVar[getset_descriptor] = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def dst(self) -> Any: ...
    @classmethod
    def fromisoformat(self, *args, **kwargs) -> Any: ...
    def isoformat(self, *args, **kwargs) -> Any: ...
    def replace(self, *args, **kwargs) -> Any: ...
    def strftime(self, *args, **kwargs) -> Any: ...
    def tzname(self) -> Any: ...
    def utcoffset(self) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __format__(self, *args, **kwargs) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __reduce_ex__(self, protocol) -> Any: ...

class timedelta:
    days: ClassVar[member_descriptor] = ...
    max: ClassVar[datetime.timedelta] = ...
    microseconds: ClassVar[member_descriptor] = ...
    min: ClassVar[datetime.timedelta] = ...
    resolution: ClassVar[datetime.timedelta] = ...
    seconds: ClassVar[member_descriptor] = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def total_seconds(self, *args, **kwargs) -> Any: ...
    def __abs__(self) -> Any: ...
    def __add__(self, other) -> Any: ...
    def __bool__(self) -> Any: ...
    def __divmod__(self, other) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __floordiv__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __mod__(self, other) -> Any: ...
    def __mul__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __neg__(self) -> Any: ...
    def __pos__(self) -> Any: ...
    def __radd__(self, other) -> Any: ...
    def __rdivmod__(self, other) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __rfloordiv__(self, other) -> Any: ...
    def __rmod__(self, other) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __rsub__(self, other) -> Any: ...
    def __rtruediv__(self, other) -> Any: ...
    def __sub__(self, other) -> Any: ...
    def __truediv__(self, other) -> Any: ...

class timezone(datetime.tzinfo):
    max: ClassVar[datetime.timezone] = ...
    min: ClassVar[datetime.timezone] = ...
    utc: ClassVar[datetime.timezone] = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def dst(self, *args, **kwargs) -> Any: ...
    def fromutc(self, *args, **kwargs) -> Any: ...
    def tzname(self, *args, **kwargs) -> Any: ...
    def utcoffset(self, *args, **kwargs) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __getinitargs__(self) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
