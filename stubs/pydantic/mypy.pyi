from typing import Any, Callable, ClassVar, Dict, List, Optional, Tuple, Union

import _collections
import configparser
import mypy.errorcodes
import mypy.nodes
import mypy.plugin
import mypy.types
import typing
ARG_NAMED: int
ARG_NAMED_OPT: int
ARG_OPT: int
ARG_POS: int
ARG_STAR2: int
Any: typing._SpecialForm
BASEMODEL_FULLNAME: str
BASESETTINGS_FULLNAME: str
CONFIGFILE_KEY: str
Callable: typing._VariadicGenericAlias
DATACLASS_FULLNAME: str
Dict: typing._GenericAlias
ERROR_ALIAS: mypy.errorcodes.ErrorCode
ERROR_CONFIG: mypy.errorcodes.ErrorCode
ERROR_ORM: mypy.errorcodes.ErrorCode
ERROR_UNEXPECTED: mypy.errorcodes.ErrorCode
ERROR_UNTYPED: mypy.errorcodes.ErrorCode
FIELD_FULLNAME: str
JsonDict: typing._GenericAlias
List: typing._GenericAlias
MDEF: int
METADATA_KEY: str
Optional: typing._SpecialForm
Set: typing._GenericAlias
Tuple: typing._VariadicGenericAlias
TypingType: typing._GenericAlias
Union: typing._SpecialForm
add_method: cython_function_or_method
error_from_orm: cython_function_or_method
error_invalid_config_value: cython_function_or_method
error_required_dynamic_aliases: cython_function_or_method
error_unexpected_behavior: cython_function_or_method
error_untyped_fields: cython_function_or_method
from_orm_callback: cython_function_or_method
get_fullname: cython_function_or_method
get_name: cython_function_or_method
plugin: cython_function_or_method

class AnyType(mypy.types.ProperType):
    is_from_error: ClassVar[getset_descriptor] = ...
    missing_import_name: ClassVar[getset_descriptor] = ...
    source_any: ClassVar[getset_descriptor] = ...
    type_of_any: ClassVar[getset_descriptor] = ...
    __mypyc_attrs__: ClassVar[tuple] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def accept(self, *args, **kwargs) -> Any: ...
    def copy_modified(self, *args, **kwargs) -> Any: ...
    @classmethod
    def deserialize(self, *args, **kwargs) -> Any: ...
    def serialize(self, *args, **kwargs) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __getstate__(self) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class Argument(mypy.nodes.Node):
    initializer: ClassVar[getset_descriptor] = ...
    kind: ClassVar[getset_descriptor] = ...
    type_annotation: ClassVar[getset_descriptor] = ...
    variable: ClassVar[getset_descriptor] = ...
    __mypyc_attrs__: ClassVar[tuple] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def set_line(self, *args, **kwargs) -> Any: ...
    def __getstate__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class AssignmentStmt(mypy.nodes.Statement):
    is_alias_def: ClassVar[getset_descriptor] = ...
    is_final_def: ClassVar[getset_descriptor] = ...
    lvalues: ClassVar[getset_descriptor] = ...
    new_syntax: ClassVar[getset_descriptor] = ...
    rvalue: ClassVar[getset_descriptor] = ...
    type: ClassVar[getset_descriptor] = ...
    unanalyzed_type: ClassVar[getset_descriptor] = ...
    __mypyc_attrs__: ClassVar[tuple] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __mypyc_defaults_setup(self, *args, **kwargs) -> Any: ...
    def accept(self, *args, **kwargs) -> Any: ...
    def __getstate__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class Block(mypy.nodes.Statement):
    body: ClassVar[getset_descriptor] = ...
    is_unreachable: ClassVar[getset_descriptor] = ...
    __mypyc_attrs__: ClassVar[tuple] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def accept(self, *args, **kwargs) -> Any: ...
    def __getstate__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class CallExpr(mypy.nodes.Expression):
    analyzed: ClassVar[getset_descriptor] = ...
    arg_kinds: ClassVar[getset_descriptor] = ...
    arg_names: ClassVar[getset_descriptor] = ...
    args: ClassVar[getset_descriptor] = ...
    callee: ClassVar[getset_descriptor] = ...
    __mypyc_attrs__: ClassVar[tuple] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def accept(self, *args, **kwargs) -> Any: ...
    def __getstate__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class CallableType(mypy.types.FunctionLike):
    arg_kinds: ClassVar[getset_descriptor] = ...
    arg_names: ClassVar[getset_descriptor] = ...
    arg_types: ClassVar[getset_descriptor] = ...
    bound_args: ClassVar[getset_descriptor] = ...
    def_extras: ClassVar[getset_descriptor] = ...
    definition: ClassVar[getset_descriptor] = ...
    from_type_type: ClassVar[getset_descriptor] = ...
    implicit: ClassVar[getset_descriptor] = ...
    is_ellipsis_args: ClassVar[getset_descriptor] = ...
    is_kw_arg: ClassVar[getset_descriptor] = ...
    is_var_arg: ClassVar[getset_descriptor] = ...
    min_args: ClassVar[getset_descriptor] = ...
    name: ClassVar[getset_descriptor] = ...
    ret_type: ClassVar[getset_descriptor] = ...
    special_sig: ClassVar[getset_descriptor] = ...
    type_guard: ClassVar[getset_descriptor] = ...
    variables: ClassVar[getset_descriptor] = ...
    __mypyc_attrs__: ClassVar[tuple] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def accept(self, *args, **kwargs) -> Any: ...
    def argument_by_name(self, *args, **kwargs) -> Any: ...
    def argument_by_position(self, *args, **kwargs) -> Any: ...
    def copy_modified(self, *args, **kwargs) -> Any: ...
    @classmethod
    def deserialize(self, *args, **kwargs) -> Any: ...
    def formal_arguments(self, *args, **kwargs) -> Any: ...
    def get_name(self, *args, **kwargs) -> Any: ...
    def is_generic(self, *args, **kwargs) -> Any: ...
    def is_type_obj(self, *args, **kwargs) -> Any: ...
    def items(self, *args, **kwargs) -> Any: ...
    def kw_arg(self, *args, **kwargs) -> Any: ...
    def max_possible_positional_args(self, *args, **kwargs) -> Any: ...
    def serialize(self, *args, **kwargs) -> Any: ...
    def try_synthesizing_arg_from_kwarg(self, *args, **kwargs) -> Any: ...
    def try_synthesizing_arg_from_vararg(self, *args, **kwargs) -> Any: ...
    def type_object(self, *args, **kwargs) -> Any: ...
    def type_var_ids(self, *args, **kwargs) -> Any: ...
    def var_arg(self, *args, **kwargs) -> Any: ...
    def with_name(self, *args, **kwargs) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __getstate__(self) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class CheckerPluginInterface:
    type_context: ClassVar[getset_descriptor] = ...
    __mypyc_attrs__: ClassVar[tuple] = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def __mypyc_defaults_setup(self, *args, **kwargs) -> Any: ...
    def fail(self, *args, **kwargs) -> Any: ...
    def named_generic_type(self, *args, **kwargs) -> Any: ...
    def __getstate__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class ClassDef(mypy.nodes.Statement):
    analyzed: ClassVar[getset_descriptor] = ...
    base_type_exprs: ClassVar[getset_descriptor] = ...
    decorators: ClassVar[getset_descriptor] = ...
    defs: ClassVar[getset_descriptor] = ...
    fullname: ClassVar[getset_descriptor] = ...
    has_incompatible_baseclass: ClassVar[getset_descriptor] = ...
    info: ClassVar[getset_descriptor] = ...
    keywords: ClassVar[getset_descriptor] = ...
    metaclass: ClassVar[getset_descriptor] = ...
    name: ClassVar[getset_descriptor] = ...
    removed_base_type_exprs: ClassVar[getset_descriptor] = ...
    type_vars: ClassVar[getset_descriptor] = ...
    __mypyc_attrs__: ClassVar[tuple] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __mypyc_defaults_setup(self, *args, **kwargs) -> Any: ...
    def accept(self, *args, **kwargs) -> Any: ...
    @classmethod
    def deserialize(self, *args, **kwargs) -> Any: ...
    def is_generic(self, *args, **kwargs) -> Any: ...
    def serialize(self, *args, **kwargs) -> Any: ...
    def __getstate__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class ClassDefContext(tuple):
    _asdict: ClassVar[function] = ...
    _field_defaults: ClassVar[dict] = ...
    _field_types: ClassVar[dict] = ...
    _fields: ClassVar[tuple] = ...
    _fields_defaults: ClassVar[dict] = ...
    _replace: ClassVar[function] = ...
    api: ClassVar[_collections._tuplegetter] = ...
    cls: ClassVar[_collections._tuplegetter] = ...
    reason: ClassVar[_collections._tuplegetter] = ...
    __annotations__: ClassVar[dict] = ...
    __getnewargs__: ClassVar[function] = ...
    __slots__: ClassVar[tuple] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def _make(self, *args, **kwargs) -> Any: ...

class ConfigParser(configparser.RawConfigParser):
    _DEFAULT_INTERPOLATION: ClassVar[configparser.BasicInterpolation] = ...
    _abc_impl: ClassVar[_abc_data] = ...
    _read_defaults: ClassVar[function] = ...
    add_section: ClassVar[function] = ...
    set: ClassVar[function] = ...
    __abstractmethods__: ClassVar[frozenset] = ...

class Context:
    column: ClassVar[getset_descriptor] = ...
    end_line: ClassVar[getset_descriptor] = ...
    line: ClassVar[getset_descriptor] = ...
    __mypyc_attrs__: ClassVar[tuple] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def get_column(self, *args, **kwargs) -> Any: ...
    def get_line(self, *args, **kwargs) -> Any: ...
    def set_line(self, *args, **kwargs) -> Any: ...
    def __getstate__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class Decorator(mypy.nodes.SymbolNode, mypy.nodes.Statement):
    decorators: ClassVar[getset_descriptor] = ...
    fullname: ClassVar[getset_descriptor] = ...
    func: ClassVar[getset_descriptor] = ...
    info: ClassVar[getset_descriptor] = ...
    is_final: ClassVar[getset_descriptor] = ...
    is_overload: ClassVar[getset_descriptor] = ...
    name: ClassVar[getset_descriptor] = ...
    original_decorators: ClassVar[getset_descriptor] = ...
    type: ClassVar[getset_descriptor] = ...
    var: ClassVar[getset_descriptor] = ...
    __mypyc_attrs__: ClassVar[tuple] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __mypyc_defaults_setup(self, *args, **kwargs) -> Any: ...
    def accept(self, *args, **kwargs) -> Any: ...
    @classmethod
    def deserialize(self, *args, **kwargs) -> Any: ...
    def serialize(self, *args, **kwargs) -> Any: ...
    def __getstate__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class EllipsisExpr(mypy.nodes.Expression):
    __mypyc_attrs__: ClassVar[tuple] = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def accept(self, *args, **kwargs) -> Any: ...
    def __getstate__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class ErrorCode:
    category: ClassVar[getset_descriptor] = ...
    code: ClassVar[getset_descriptor] = ...
    default_enabled: ClassVar[getset_descriptor] = ...
    description: ClassVar[getset_descriptor] = ...
    __mypyc_attrs__: ClassVar[tuple] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __getstate__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class FuncBase(mypy.nodes.Node):
    _fullname: ClassVar[getset_descriptor] = ...
    fullname: ClassVar[getset_descriptor] = ...
    info: ClassVar[getset_descriptor] = ...
    is_class: ClassVar[getset_descriptor] = ...
    is_final: ClassVar[getset_descriptor] = ...
    is_property: ClassVar[getset_descriptor] = ...
    is_static: ClassVar[getset_descriptor] = ...
    name: ClassVar[getset_descriptor] = ...
    type: ClassVar[getset_descriptor] = ...
    unanalyzed_type: ClassVar[getset_descriptor] = ...
    __mypyc_attrs__: ClassVar[tuple] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __getstate__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class FuncDef(mypy.nodes.FuncItem, mypy.nodes.SymbolNode, mypy.nodes.Statement):
    _name: ClassVar[getset_descriptor] = ...
    is_abstract: ClassVar[getset_descriptor] = ...
    is_conditional: ClassVar[getset_descriptor] = ...
    is_decorated: ClassVar[getset_descriptor] = ...
    name: ClassVar[getset_descriptor] = ...
    original_def: ClassVar[getset_descriptor] = ...
    __mypyc_attrs__: ClassVar[tuple] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def accept(self, *args, **kwargs) -> Any: ...
    @classmethod
    def deserialize(self, *args, **kwargs) -> Any: ...
    def serialize(self, *args, **kwargs) -> Any: ...
    def __getstate__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class Instance(mypy.types.ProperType):
    args: ClassVar[getset_descriptor] = ...
    erased: ClassVar[getset_descriptor] = ...
    invalid: ClassVar[getset_descriptor] = ...
    last_known_value: ClassVar[getset_descriptor] = ...
    type: ClassVar[getset_descriptor] = ...
    type_ref: ClassVar[getset_descriptor] = ...
    __mypyc_attrs__: ClassVar[tuple] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def accept(self, *args, **kwargs) -> Any: ...
    def copy_modified(self, *args, **kwargs) -> Any: ...
    @classmethod
    def deserialize(self, *args, **kwargs) -> Any: ...
    def has_readable_member(self, *args, **kwargs) -> Any: ...
    def serialize(self, *args, **kwargs) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __getstate__(self) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class MemberExpr(mypy.nodes.RefExpr):
    def_var: ClassVar[getset_descriptor] = ...
    expr: ClassVar[getset_descriptor] = ...
    name: ClassVar[getset_descriptor] = ...
    __mypyc_attrs__: ClassVar[tuple] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def accept(self, *args, **kwargs) -> Any: ...
    def __getstate__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class MethodContext(tuple):
    _asdict: ClassVar[function] = ...
    _field_defaults: ClassVar[dict] = ...
    _field_types: ClassVar[dict] = ...
    _fields: ClassVar[tuple] = ...
    _fields_defaults: ClassVar[dict] = ...
    _replace: ClassVar[function] = ...
    api: ClassVar[_collections._tuplegetter] = ...
    arg_kinds: ClassVar[_collections._tuplegetter] = ...
    arg_names: ClassVar[_collections._tuplegetter] = ...
    arg_types: ClassVar[_collections._tuplegetter] = ...
    args: ClassVar[_collections._tuplegetter] = ...
    callee_arg_names: ClassVar[_collections._tuplegetter] = ...
    context: ClassVar[_collections._tuplegetter] = ...
    default_return_type: ClassVar[_collections._tuplegetter] = ...
    type: ClassVar[_collections._tuplegetter] = ...
    __annotations__: ClassVar[dict] = ...
    __getnewargs__: ClassVar[function] = ...
    __slots__: ClassVar[tuple] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def _make(self, *args, **kwargs) -> Any: ...

class ModelConfigData:
    def __init__(self, *args, **kwargs) -> None: ...
    def set_values_dict(self, *args, **kwargs) -> Any: ...
    def setdefault(self, *args, **kwargs) -> Any: ...
    def update(self, *args, **kwargs) -> Any: ...

class NameExpr(mypy.nodes.RefExpr):
    is_special_form: ClassVar[getset_descriptor] = ...
    name: ClassVar[getset_descriptor] = ...
    __mypyc_attrs__: ClassVar[tuple] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def accept(self, *args, **kwargs) -> Any: ...
    def serialize(self, *args, **kwargs) -> Any: ...
    def __getstate__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class NoneType(mypy.types.ProperType):
    __mypyc_attrs__: ClassVar[tuple] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def accept(self, *args, **kwargs) -> Any: ...
    def can_be_true_default(self, *args, **kwargs) -> Any: ...
    @classmethod
    def deserialize(self, *args, **kwargs) -> Any: ...
    def serialize(self, *args, **kwargs) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __getstate__(self) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class Options:
    _glob_options: ClassVar[getset_descriptor] = ...
    _per_module_cache: ClassVar[getset_descriptor] = ...
    allow_redefinition: ClassVar[getset_descriptor] = ...
    allow_untyped_globals: ClassVar[getset_descriptor] = ...
    always_false: ClassVar[getset_descriptor] = ...
    always_true: ClassVar[getset_descriptor] = ...
    bazel: ClassVar[getset_descriptor] = ...
    build_type: ClassVar[getset_descriptor] = ...
    cache_dir: ClassVar[getset_descriptor] = ...
    cache_fine_grained: ClassVar[getset_descriptor] = ...
    cache_map: ClassVar[getset_descriptor] = ...
    check_untyped_defs: ClassVar[getset_descriptor] = ...
    color_output: ClassVar[getset_descriptor] = ...
    config_file: ClassVar[getset_descriptor] = ...
    custom_typeshed_dir: ClassVar[getset_descriptor] = ...
    custom_typing_module: ClassVar[getset_descriptor] = ...
    debug_cache: ClassVar[getset_descriptor] = ...
    disable_error_code: ClassVar[getset_descriptor] = ...
    disabled_error_codes: ClassVar[getset_descriptor] = ...
    disallow_any_decorated: ClassVar[getset_descriptor] = ...
    disallow_any_explicit: ClassVar[getset_descriptor] = ...
    disallow_any_expr: ClassVar[getset_descriptor] = ...
    disallow_any_generics: ClassVar[getset_descriptor] = ...
    disallow_any_unimported: ClassVar[getset_descriptor] = ...
    disallow_incomplete_defs: ClassVar[getset_descriptor] = ...
    disallow_subclassing_any: ClassVar[getset_descriptor] = ...
    disallow_untyped_calls: ClassVar[getset_descriptor] = ...
    disallow_untyped_decorators: ClassVar[getset_descriptor] = ...
    disallow_untyped_defs: ClassVar[getset_descriptor] = ...
    dump_build_stats: ClassVar[getset_descriptor] = ...
    dump_deps: ClassVar[getset_descriptor] = ...
    dump_graph: ClassVar[getset_descriptor] = ...
    dump_inference_stats: ClassVar[getset_descriptor] = ...
    dump_type_stats: ClassVar[getset_descriptor] = ...
    enable_error_code: ClassVar[getset_descriptor] = ...
    enabled_error_codes: ClassVar[getset_descriptor] = ...
    error_summary: ClassVar[getset_descriptor] = ...
    exclude: ClassVar[getset_descriptor] = ...
    explicit_package_bases: ClassVar[getset_descriptor] = ...
    export_types: ClassVar[getset_descriptor] = ...
    fast_exit: ClassVar[getset_descriptor] = ...
    files: ClassVar[getset_descriptor] = ...
    fine_grained_incremental: ClassVar[getset_descriptor] = ...
    follow_imports: ClassVar[getset_descriptor] = ...
    follow_imports_for_stubs: ClassVar[getset_descriptor] = ...
    ignore_errors: ClassVar[getset_descriptor] = ...
    ignore_missing_imports: ClassVar[getset_descriptor] = ...
    ignore_missing_imports_per_module: ClassVar[getset_descriptor] = ...
    implicit_reexport: ClassVar[getset_descriptor] = ...
    incremental: ClassVar[getset_descriptor] = ...
    install_types: ClassVar[getset_descriptor] = ...
    junit_xml: ClassVar[getset_descriptor] = ...
    local_partial_types: ClassVar[getset_descriptor] = ...
    logical_deps: ClassVar[getset_descriptor] = ...
    many_errors_threshold: ClassVar[getset_descriptor] = ...
    mypy_path: ClassVar[getset_descriptor] = ...
    mypyc: ClassVar[getset_descriptor] = ...
    namespace_packages: ClassVar[getset_descriptor] = ...
    new_semantic_analyzer: ClassVar[getset_descriptor] = ...
    no_implicit_optional: ClassVar[getset_descriptor] = ...
    no_silence_site_packages: ClassVar[getset_descriptor] = ...
    no_site_packages: ClassVar[getset_descriptor] = ...
    package_root: ClassVar[getset_descriptor] = ...
    pdb: ClassVar[getset_descriptor] = ...
    per_module_options: ClassVar[getset_descriptor] = ...
    platform: ClassVar[getset_descriptor] = ...
    plugins: ClassVar[getset_descriptor] = ...
    preserve_asts: ClassVar[getset_descriptor] = ...
    pretty: ClassVar[getset_descriptor] = ...
    python_executable: ClassVar[getset_descriptor] = ...
    python_version: ClassVar[getset_descriptor] = ...
    quickstart_file: ClassVar[getset_descriptor] = ...
    raise_exceptions: ClassVar[getset_descriptor] = ...
    report_dirs: ClassVar[getset_descriptor] = ...
    scripts_are_modules: ClassVar[getset_descriptor] = ...
    semantic_analysis_only: ClassVar[getset_descriptor] = ...
    shadow_file: ClassVar[getset_descriptor] = ...
    show_absolute_path: ClassVar[getset_descriptor] = ...
    show_column_numbers: ClassVar[getset_descriptor] = ...
    show_error_codes: ClassVar[getset_descriptor] = ...
    show_error_context: ClassVar[getset_descriptor] = ...
    show_none_errors: ClassVar[getset_descriptor] = ...
    show_traceback: ClassVar[getset_descriptor] = ...
    skip_cache_mtime_checks: ClassVar[getset_descriptor] = ...
    skip_version_check: ClassVar[getset_descriptor] = ...
    sqlite_cache: ClassVar[getset_descriptor] = ...
    strict_equality: ClassVar[getset_descriptor] = ...
    strict_optional: ClassVar[getset_descriptor] = ...
    strict_optional_whitelist: ClassVar[getset_descriptor] = ...
    transform_source: ClassVar[getset_descriptor] = ...
    unused_configs: ClassVar[getset_descriptor] = ...
    use_builtins_fixtures: ClassVar[getset_descriptor] = ...
    use_fine_grained_cache: ClassVar[getset_descriptor] = ...
    verbosity: ClassVar[getset_descriptor] = ...
    warn_incomplete_stub: ClassVar[getset_descriptor] = ...
    warn_no_return: ClassVar[getset_descriptor] = ...
    warn_redundant_casts: ClassVar[getset_descriptor] = ...
    warn_return_any: ClassVar[getset_descriptor] = ...
    warn_unreachable: ClassVar[getset_descriptor] = ...
    warn_unused_configs: ClassVar[getset_descriptor] = ...
    warn_unused_ignores: ClassVar[getset_descriptor] = ...
    wip_pep_612: ClassVar[getset_descriptor] = ...
    __mypyc_attrs__: ClassVar[tuple] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def apply_changes(self, *args, **kwargs) -> Any: ...
    def build_per_module_cache(self, *args, **kwargs) -> Any: ...
    def clone_for_module(self, *args, **kwargs) -> Any: ...
    def compile_glob(self, *args, **kwargs) -> Any: ...
    def select_options_affecting_cache(self, *args, **kwargs) -> Any: ...
    def snapshot(self, *args, **kwargs) -> Any: ...
    def __getstate__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class PassStmt(mypy.nodes.Statement):
    __mypyc_attrs__: ClassVar[tuple] = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def accept(self, *args, **kwargs) -> Any: ...
    def __getstate__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class PlaceholderNode(mypy.nodes.SymbolNode):
    _fullname: ClassVar[getset_descriptor] = ...
    becomes_typeinfo: ClassVar[getset_descriptor] = ...
    fullname: ClassVar[getset_descriptor] = ...
    name: ClassVar[getset_descriptor] = ...
    node: ClassVar[getset_descriptor] = ...
    __mypyc_attrs__: ClassVar[tuple] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def accept(self, *args, **kwargs) -> Any: ...
    def serialize(self, *args, **kwargs) -> Any: ...
    def __getstate__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class Plugin(mypy.plugin.CommonPluginApi):
    _modules: ClassVar[getset_descriptor] = ...
    python_version: ClassVar[getset_descriptor] = ...
    __mypyc_attrs__: ClassVar[tuple] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __mypyc_defaults_setup(self, *args, **kwargs) -> Any: ...
    def get_additional_deps(self, *args, **kwargs) -> Any: ...
    def get_attribute_hook(self, *args, **kwargs) -> Any: ...
    def get_base_class_hook(self, *args, **kwargs) -> Any: ...
    def get_class_decorator_hook(self, *args, **kwargs) -> Any: ...
    def get_customize_class_mro_hook(self, *args, **kwargs) -> Any: ...
    def get_dynamic_class_hook(self, *args, **kwargs) -> Any: ...
    def get_function_hook(self, *args, **kwargs) -> Any: ...
    def get_function_signature_hook(self, *args, **kwargs) -> Any: ...
    def get_metaclass_hook(self, *args, **kwargs) -> Any: ...
    def get_method_hook(self, *args, **kwargs) -> Any: ...
    def get_method_signature_hook(self, *args, **kwargs) -> Any: ...
    def get_type_analyze_hook(self, *args, **kwargs) -> Any: ...
    def lookup_fully_qualified(self, *args, **kwargs) -> Any: ...
    def report_config_data(self, *args, **kwargs) -> Any: ...
    def set_modules(self, *args, **kwargs) -> Any: ...
    def __getstate__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class PydanticModelField:
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def deserialize(self, *args, **kwargs) -> Any: ...
    def serialize(self, *args, **kwargs) -> Any: ...
    def to_argument(self, *args, **kwargs) -> Any: ...
    def to_var(self, *args, **kwargs) -> Any: ...

class PydanticModelTransformer:
    tracked_config_fields: ClassVar[set] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def add_construct_method(self, *args, **kwargs) -> Any: ...
    def add_initializer(self, *args, **kwargs) -> Any: ...
    def collect_config(self, *args, **kwargs) -> Any: ...
    def collect_fields(self, *args, **kwargs) -> Any: ...
    def get_alias_info(self, *args, **kwargs) -> Any: ...
    def get_config_update(self, *args, **kwargs) -> Any: ...
    def get_field_arguments(self, *args, **kwargs) -> Any: ...
    def get_is_required(self, *args, **kwargs) -> Any: ...
    def is_dynamic_alias_present(self, *args, **kwargs) -> Any: ...
    def set_frozen(self, *args, **kwargs) -> Any: ...
    def should_init_forbid_extra(self, *args, **kwargs) -> Any: ...
    def transform(self, *args, **kwargs) -> Any: ...

class PydanticPlugin(mypy.plugin.Plugin):
    def __init__(self, *args, **kwargs) -> None: ...
    def _pydantic_model_class_maker_callback(self, *args, **kwargs) -> Any: ...
    def get_base_class_hook(self, *args, **kwargs) -> Any: ...
    def get_class_decorator_hook(self, *args, **kwargs) -> Any: ...
    def get_method_hook(self, *args, **kwargs) -> Any: ...

class PydanticPluginConfig:
    init_forbid_extra: ClassVar[member_descriptor] = ...
    init_typed: ClassVar[member_descriptor] = ...
    warn_required_dynamic_aliases: ClassVar[member_descriptor] = ...
    warn_untyped_fields: ClassVar[member_descriptor] = ...
    __slots__: ClassVar[tuple] = ...
    def __init__(self, *args, **kwargs) -> None: ...

class RefExpr(mypy.nodes.Expression):
    fullname: ClassVar[getset_descriptor] = ...
    is_alias_rvalue: ClassVar[getset_descriptor] = ...
    is_inferred_def: ClassVar[getset_descriptor] = ...
    is_new_def: ClassVar[getset_descriptor] = ...
    kind: ClassVar[getset_descriptor] = ...
    node: ClassVar[getset_descriptor] = ...
    type_guard: ClassVar[getset_descriptor] = ...
    __mypyc_attrs__: ClassVar[tuple] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __getstate__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class SemanticAnalyzerPluginInterface:
    final_iteration: ClassVar[getset_descriptor] = ...
    __mypyc_attrs__: ClassVar[tuple] = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def __mypyc_defaults_setup(self, *args, **kwargs) -> Any: ...
    def add_plugin_dependency(self, *args, **kwargs) -> Any: ...
    def add_symbol_table_node(self, *args, **kwargs) -> Any: ...
    def anal_type(self, *args, **kwargs) -> Any: ...
    def builtin_type(self, *args, **kwargs) -> Any: ...
    def class_type(self, *args, **kwargs) -> Any: ...
    def defer(self, *args, **kwargs) -> Any: ...
    def fail(self, *args, **kwargs) -> Any: ...
    def lookup_fully_qualified(self, *args, **kwargs) -> Any: ...
    def lookup_fully_qualified_or_none(self, *args, **kwargs) -> Any: ...
    def lookup_qualified(self, *args, **kwargs) -> Any: ...
    def named_type(self, *args, **kwargs) -> Any: ...
    def parse_bool(self, *args, **kwargs) -> Any: ...
    def qualified_name(self, *args, **kwargs) -> Any: ...
    def __getstate__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class StrExpr(mypy.nodes.Expression):
    from_python_3: ClassVar[getset_descriptor] = ...
    value: ClassVar[getset_descriptor] = ...
    __mypyc_attrs__: ClassVar[tuple] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __mypyc_defaults_setup(self, *args, **kwargs) -> Any: ...
    def accept(self, *args, **kwargs) -> Any: ...
    def __getstate__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class SymbolNode(mypy.nodes.Node):
    fullname: ClassVar[getset_descriptor] = ...
    name: ClassVar[getset_descriptor] = ...
    __mypyc_attrs__: ClassVar[tuple] = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def deserialize(self, *args, **kwargs) -> Any: ...
    def serialize(self, *args, **kwargs) -> Any: ...
    def __getstate__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class SymbolTableNode:
    cross_ref: ClassVar[getset_descriptor] = ...
    fullname: ClassVar[getset_descriptor] = ...
    implicit: ClassVar[getset_descriptor] = ...
    kind: ClassVar[getset_descriptor] = ...
    module_hidden: ClassVar[getset_descriptor] = ...
    module_public: ClassVar[getset_descriptor] = ...
    no_serialize: ClassVar[getset_descriptor] = ...
    node: ClassVar[getset_descriptor] = ...
    plugin_generated: ClassVar[getset_descriptor] = ...
    type: ClassVar[getset_descriptor] = ...
    __mypyc_attrs__: ClassVar[tuple] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def copy(self, *args, **kwargs) -> Any: ...
    @classmethod
    def deserialize(self, *args, **kwargs) -> Any: ...
    def serialize(self, *args, **kwargs) -> Any: ...
    def __getstate__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class TempNode(mypy.nodes.Expression):
    no_rhs: ClassVar[getset_descriptor] = ...
    type: ClassVar[getset_descriptor] = ...
    __mypyc_attrs__: ClassVar[tuple] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __mypyc_defaults_setup(self, *args, **kwargs) -> Any: ...
    def accept(self, *args, **kwargs) -> Any: ...
    def __getstate__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class Type(mypy.nodes.Context):
    can_be_false: ClassVar[getset_descriptor] = ...
    can_be_true: ClassVar[getset_descriptor] = ...
    __mypyc_attrs__: ClassVar[tuple] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def accept(self, *args, **kwargs) -> Any: ...
    def can_be_false_default(self, *args, **kwargs) -> Any: ...
    def can_be_true_default(self, *args, **kwargs) -> Any: ...
    @classmethod
    def deserialize(self, *args, **kwargs) -> Any: ...
    def serialize(self, *args, **kwargs) -> Any: ...
    def __getstate__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class TypeInfo(mypy.nodes.SymbolNode):
    FLAGS: ClassVar[list] = ...
    _fullname: ClassVar[getset_descriptor] = ...
    _mro_refs: ClassVar[getset_descriptor] = ...
    _promote: ClassVar[getset_descriptor] = ...
    abstract_attributes: ClassVar[getset_descriptor] = ...
    assuming: ClassVar[getset_descriptor] = ...
    assuming_proper: ClassVar[getset_descriptor] = ...
    bad_mro: ClassVar[getset_descriptor] = ...
    bases: ClassVar[getset_descriptor] = ...
    declared_metaclass: ClassVar[getset_descriptor] = ...
    defn: ClassVar[getset_descriptor] = ...
    fallback_to_any: ClassVar[getset_descriptor] = ...
    fullname: ClassVar[getset_descriptor] = ...
    inferring: ClassVar[getset_descriptor] = ...
    is_abstract: ClassVar[getset_descriptor] = ...
    is_enum: ClassVar[getset_descriptor] = ...
    is_final: ClassVar[getset_descriptor] = ...
    is_intersection: ClassVar[getset_descriptor] = ...
    is_named_tuple: ClassVar[getset_descriptor] = ...
    is_newtype: ClassVar[getset_descriptor] = ...
    is_protocol: ClassVar[getset_descriptor] = ...
    metaclass_type: ClassVar[getset_descriptor] = ...
    metadata: ClassVar[getset_descriptor] = ...
    module_name: ClassVar[getset_descriptor] = ...
    mro: ClassVar[getset_descriptor] = ...
    name: ClassVar[getset_descriptor] = ...
    names: ClassVar[getset_descriptor] = ...
    protocol_members: ClassVar[getset_descriptor] = ...
    runtime_protocol: ClassVar[getset_descriptor] = ...
    tuple_type: ClassVar[getset_descriptor] = ...
    type_vars: ClassVar[getset_descriptor] = ...
    typeddict_type: ClassVar[getset_descriptor] = ...
    __mypyc_attrs__: ClassVar[tuple] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __mypyc_defaults_setup(self, *args, **kwargs) -> Any: ...
    def add_type_vars(self, *args, **kwargs) -> Any: ...
    def calculate_metaclass_type(self, *args, **kwargs) -> Any: ...
    @classmethod
    def deserialize(self, *args, **kwargs) -> Any: ...
    def direct_base_classes(self, *args, **kwargs) -> Any: ...
    def dump(self, *args, **kwargs) -> Any: ...
    def get(self, *args, **kwargs) -> Any: ...
    def get_containing_type_info(self, *args, **kwargs) -> Any: ...
    def get_method(self, *args, **kwargs) -> Any: ...
    def has_base(self, *args, **kwargs) -> Any: ...
    def has_readable_member(self, *args, **kwargs) -> Any: ...
    def is_generic(self, *args, **kwargs) -> Any: ...
    def is_metaclass(self, *args, **kwargs) -> Any: ...
    def serialize(self, *args, **kwargs) -> Any: ...
    def __bool__(self) -> Any: ...
    def __getitem__(self, index) -> Any: ...
    def __getstate__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class TypeOfAny:
    explicit: ClassVar[int] = ...
    from_another_any: ClassVar[int] = ...
    from_error: ClassVar[int] = ...
    from_omitted_generics: ClassVar[int] = ...
    from_unimported_type: ClassVar[int] = ...
    implementation_artifact: ClassVar[int] = ...
    special_form: ClassVar[int] = ...
    suggestion_engine: ClassVar[int] = ...
    unannotated: ClassVar[int] = ...
    __mypyc_attrs__: ClassVar[tuple] = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def __mypyc_defaults_setup(self, *args, **kwargs) -> Any: ...
    def __getstate__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class TypeType(mypy.types.ProperType):
    item: ClassVar[getset_descriptor] = ...
    __mypyc_attrs__: ClassVar[tuple] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __mypyc_defaults_setup(self, *args, **kwargs) -> Any: ...
    def accept(self, *args, **kwargs) -> Any: ...
    @classmethod
    def deserialize(self, *args, **kwargs) -> Any: ...
    def make_normalized(self, *args, **kwargs) -> Any: ...
    def serialize(self, *args, **kwargs) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __getstate__(self) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class TypeVarDef(mypy.types.TypeVarLikeDef):
    upper_bound: ClassVar[getset_descriptor] = ...
    values: ClassVar[getset_descriptor] = ...
    variance: ClassVar[getset_descriptor] = ...
    __mypyc_attrs__: ClassVar[tuple] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __mypyc_defaults_setup(self, *args, **kwargs) -> Any: ...
    @classmethod
    def deserialize(self, *args, **kwargs) -> Any: ...
    def new_unification_variable(self, *args, **kwargs) -> Any: ...
    def serialize(self, *args, **kwargs) -> Any: ...
    def __getstate__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class TypeVarExpr(mypy.nodes.TypeVarLikeExpr):
    values: ClassVar[getset_descriptor] = ...
    __mypyc_attrs__: ClassVar[tuple] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __mypyc_defaults_setup(self, *args, **kwargs) -> Any: ...
    def accept(self, *args, **kwargs) -> Any: ...
    @classmethod
    def deserialize(self, *args, **kwargs) -> Any: ...
    def serialize(self, *args, **kwargs) -> Any: ...
    def __getstate__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class TypeVarType(mypy.types.ProperType):
    fullname: ClassVar[getset_descriptor] = ...
    id: ClassVar[getset_descriptor] = ...
    name: ClassVar[getset_descriptor] = ...
    upper_bound: ClassVar[getset_descriptor] = ...
    values: ClassVar[getset_descriptor] = ...
    variance: ClassVar[getset_descriptor] = ...
    __mypyc_attrs__: ClassVar[tuple] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def accept(self, *args, **kwargs) -> Any: ...
    @classmethod
    def deserialize(self, *args, **kwargs) -> Any: ...
    def serialize(self, *args, **kwargs) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __getstate__(self) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class UnionType(mypy.types.ProperType):
    is_evaluated: ClassVar[getset_descriptor] = ...
    items: ClassVar[getset_descriptor] = ...
    uses_pep604_syntax: ClassVar[getset_descriptor] = ...
    __mypyc_attrs__: ClassVar[tuple] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def accept(self, *args, **kwargs) -> Any: ...
    @classmethod
    def deserialize(self, *args, **kwargs) -> Any: ...
    def has_readable_member(self, *args, **kwargs) -> Any: ...
    def length(self, *args, **kwargs) -> Any: ...
    def make_union(self, *args, **kwargs) -> Any: ...
    def relevant_items(self, *args, **kwargs) -> Any: ...
    def serialize(self, *args, **kwargs) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __getstate__(self) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class Var(mypy.nodes.SymbolNode):
    _fullname: ClassVar[getset_descriptor] = ...
    _name: ClassVar[getset_descriptor] = ...
    explicit_self_type: ClassVar[getset_descriptor] = ...
    final_set_in_init: ClassVar[getset_descriptor] = ...
    final_unset_in_class: ClassVar[getset_descriptor] = ...
    final_value: ClassVar[getset_descriptor] = ...
    from_module_getattr: ClassVar[getset_descriptor] = ...
    fullname: ClassVar[getset_descriptor] = ...
    info: ClassVar[getset_descriptor] = ...
    is_abstract_var: ClassVar[getset_descriptor] = ...
    is_classmethod: ClassVar[getset_descriptor] = ...
    is_classvar: ClassVar[getset_descriptor] = ...
    is_final: ClassVar[getset_descriptor] = ...
    is_inferred: ClassVar[getset_descriptor] = ...
    is_initialized_in_class: ClassVar[getset_descriptor] = ...
    is_property: ClassVar[getset_descriptor] = ...
    is_ready: ClassVar[getset_descriptor] = ...
    is_self: ClassVar[getset_descriptor] = ...
    is_settable_property: ClassVar[getset_descriptor] = ...
    is_staticmethod: ClassVar[getset_descriptor] = ...
    is_suppressed_import: ClassVar[getset_descriptor] = ...
    name: ClassVar[getset_descriptor] = ...
    type: ClassVar[getset_descriptor] = ...
    __mypyc_attrs__: ClassVar[tuple] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def accept(self, *args, **kwargs) -> Any: ...
    @classmethod
    def deserialize(self, *args, **kwargs) -> Any: ...
    def serialize(self, *args, **kwargs) -> Any: ...
    def __getstate__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

def fill_typevars(*args, **kwargs) -> Any: ...
def get_proper_type(*args, **kwargs) -> Any: ...
def get_unique_redefinition_name(*args, **kwargs) -> Any: ...
def make_wildcard_trigger(*args, **kwargs) -> Any: ...
def set_callable_name(*args, **kwargs) -> Any: ...
